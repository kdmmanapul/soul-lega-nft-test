//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.57;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.57] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x35b5eb=_0x1d81;(function(_0x3eb9d,_0x4b25d5){const _0x526a40=_0x1d81,_0x26b090=_0x3eb9d();while(!![]){try{const _0x37d51c=-parseInt(_0x526a40(0x2cc))/0x1+parseInt(_0x526a40(0x361))/0x2*(parseInt(_0x526a40(0x995))/0x3)+-parseInt(_0x526a40(0x8e2))/0x4*(-parseInt(_0x526a40(0x174))/0x5)+-parseInt(_0x526a40(0x797))/0x6+parseInt(_0x526a40(0x4ba))/0x7*(parseInt(_0x526a40(0xaa0))/0x8)+-parseInt(_0x526a40(0x2ba))/0x9*(parseInt(_0x526a40(0x460))/0xa)+parseInt(_0x526a40(0xb21))/0xb;if(_0x37d51c===_0x4b25d5)break;else _0x26b090['push'](_0x26b090['shift']());}catch(_0x5d17ec){_0x26b090['push'](_0x26b090['shift']());}}}(_0x2f15,0xd912b));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x459663){const _0x1ddd1f=_0x1d81;return _0x459663[_0x1ddd1f(0x142)]&&_0x459663['description'][_0x1ddd1f(0x87d)]('['+label+']');})[0x0];VisuMZ[label][_0x35b5eb(0x3cb)]=VisuMZ[label][_0x35b5eb(0x3cb)]||{},VisuMZ[_0x35b5eb(0x68f)]=function(_0x45a242,_0x318fbd){const _0x4624a7=_0x35b5eb;for(const _0x2e5650 in _0x318fbd){if(_0x2e5650[_0x4624a7(0x111)](/(.*):(.*)/i)){const _0x1b9a03=String(RegExp['$1']),_0x318c8a=String(RegExp['$2'])['toUpperCase']()[_0x4624a7(0x54d)]();let _0x183adb,_0x199dcf,_0x678e8;switch(_0x318c8a){case _0x4624a7(0xab1):_0x183adb=_0x318fbd[_0x2e5650]!==''?Number(_0x318fbd[_0x2e5650]):0x0;break;case _0x4624a7(0x6f0):_0x199dcf=_0x318fbd[_0x2e5650]!==''?JSON['parse'](_0x318fbd[_0x2e5650]):[],_0x183adb=_0x199dcf[_0x4624a7(0x3dd)](_0x10af81=>Number(_0x10af81));break;case _0x4624a7(0xa2a):_0x183adb=_0x318fbd[_0x2e5650]!==''?eval(_0x318fbd[_0x2e5650]):null;break;case'ARRAYEVAL':_0x199dcf=_0x318fbd[_0x2e5650]!==''?JSON[_0x4624a7(0x71f)](_0x318fbd[_0x2e5650]):[],_0x183adb=_0x199dcf[_0x4624a7(0x3dd)](_0x2159dc=>eval(_0x2159dc));break;case _0x4624a7(0x56b):_0x183adb=_0x318fbd[_0x2e5650]!==''?JSON[_0x4624a7(0x71f)](_0x318fbd[_0x2e5650]):'';break;case'ARRAYJSON':_0x199dcf=_0x318fbd[_0x2e5650]!==''?JSON[_0x4624a7(0x71f)](_0x318fbd[_0x2e5650]):[],_0x183adb=_0x199dcf[_0x4624a7(0x3dd)](_0x3d4337=>JSON[_0x4624a7(0x71f)](_0x3d4337));break;case _0x4624a7(0x532):_0x183adb=_0x318fbd[_0x2e5650]!==''?new Function(JSON[_0x4624a7(0x71f)](_0x318fbd[_0x2e5650])):new Function(_0x4624a7(0x3c4));break;case _0x4624a7(0xa11):_0x199dcf=_0x318fbd[_0x2e5650]!==''?JSON['parse'](_0x318fbd[_0x2e5650]):[],_0x183adb=_0x199dcf[_0x4624a7(0x3dd)](_0x370d09=>new Function(JSON[_0x4624a7(0x71f)](_0x370d09)));break;case _0x4624a7(0x973):_0x183adb=_0x318fbd[_0x2e5650]!==''?String(_0x318fbd[_0x2e5650]):'';break;case _0x4624a7(0xa5d):_0x199dcf=_0x318fbd[_0x2e5650]!==''?JSON[_0x4624a7(0x71f)](_0x318fbd[_0x2e5650]):[],_0x183adb=_0x199dcf[_0x4624a7(0x3dd)](_0x1b5e39=>String(_0x1b5e39));break;case _0x4624a7(0xa64):_0x678e8=_0x318fbd[_0x2e5650]!==''?JSON['parse'](_0x318fbd[_0x2e5650]):{},_0x45a242[_0x1b9a03]={},VisuMZ[_0x4624a7(0x68f)](_0x45a242[_0x1b9a03],_0x678e8);continue;case'ARRAYSTRUCT':_0x199dcf=_0x318fbd[_0x2e5650]!==''?JSON[_0x4624a7(0x71f)](_0x318fbd[_0x2e5650]):[],_0x183adb=_0x199dcf[_0x4624a7(0x3dd)](_0x26cfdf=>VisuMZ[_0x4624a7(0x68f)]({},JSON['parse'](_0x26cfdf)));break;default:continue;}_0x45a242[_0x1b9a03]=_0x183adb;}}return _0x45a242;},(_0x53aa2a=>{const _0x30fb4c=_0x35b5eb,_0x1f4282=_0x53aa2a[_0x30fb4c(0x945)];for(const _0x21404b of dependencies){if(!Imported[_0x21404b]){alert(_0x30fb4c(0x7f4)[_0x30fb4c(0x4ed)](_0x1f4282,_0x21404b)),SceneManager[_0x30fb4c(0x240)]();break;}}const _0x1bb162=_0x53aa2a[_0x30fb4c(0x9bb)];if(_0x1bb162[_0x30fb4c(0x111)](/\[Version[ ](.*?)\]/i)){const _0x17c6ae=Number(RegExp['$1']);if(_0x17c6ae!==VisuMZ[label]['version']){if(_0x30fb4c(0x8da)===_0x30fb4c(0x871))return _0x3d9dc1[_0x30fb4c(0x7c7)](...this[_0x30fb4c(0xa91)]()[_0x30fb4c(0x12b)]()['filter'](_0x3777a2=>_0x3777a2!==this[_0x30fb4c(0xad8)]())),this[_0x30fb4c(0x3e6)](_0x187726);else alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x30fb4c(0x4ed)](_0x1f4282,_0x17c6ae)),SceneManager[_0x30fb4c(0x240)]();}}if(_0x1bb162[_0x30fb4c(0x111)](/\[Tier[ ](\d+)\]/i)){if(_0x30fb4c(0xa6d)!=='kUuhx'){const _0x131ee8=Number(RegExp['$1']);if(_0x131ee8<tier){if(_0x30fb4c(0x866)===_0x30fb4c(0x507)){if(_0x33e2f6[_0x30fb4c(0x7ce)]()[_0x30fb4c(0x671)]>0x0)return!![];this[_0x30fb4c(0x996)]='';}else alert(_0x30fb4c(0x965)['format'](_0x1f4282,_0x131ee8,tier)),SceneManager[_0x30fb4c(0x240)]();}else _0x30fb4c(0x42f)!=='gNufc'?this[_0x30fb4c(0x3d4)][_0x30fb4c(0x89a)][_0x30fb4c(0x306)]=this[_0x30fb4c(0xb0d)][_0x30fb4c(0x231)]():tier=Math[_0x30fb4c(0x2a3)](_0x131ee8,tier);}else _0x383fa5[_0x30fb4c(0x7fe)](_0x30fb4c(0x8d4));}VisuMZ['ConvertParams'](VisuMZ[label][_0x30fb4c(0x3cb)],_0x53aa2a[_0x30fb4c(0x75c)]);})(pluginData),VisuMZ[_0x35b5eb(0x43c)]=function(_0x23714e){const _0x52a781=_0x35b5eb;let _0x4e3007=[];for(const _0x37c31e of _0x23714e){if('UAVYR'===_0x52a781(0x5e6))_0x4e3007=_0x4e3007[_0x52a781(0x992)](VisuMZ[_0x52a781(0x69e)](_0x37c31e));else{if(!this[_0x52a781(0x81e)])return;this['_lineHeight']=this[_0x52a781(0xa17)]||_0x136e43['prototype']['lineHeight'](),this['x']=this[_0x52a781(0x81e)]['_baseX'],this['y']=this['_linkedSprite']['_baseY']-this[_0x52a781(0xa17)]*0.5;const _0x4006ff=_0x22ed4a[_0x52a781(0x781)]['Settings']['Enemy'];this['x']+=_0x4006ff[_0x52a781(0xdc)]||0x0,this['y']+=_0x4006ff['NameOffsetY']||0x0;}}return _0x4e3007[_0x52a781(0x416)](_0x3a93ec=>_0x3a93ec);},VisuMZ['ConvertActionSequenceTarget']=function(_0x947e71){const _0x179234=_0x35b5eb,_0x545501=BattleManager['allBattleMembers']()[_0x179234(0x416)](_0x316f63=>_0x316f63&&_0x316f63[_0x179234(0x690)]()),_0x5139f7=BattleManager['_subject'],_0x5d82de=BattleManager['_target'],_0x175612=BattleManager[_0x179234(0x241)]?BattleManager[_0x179234(0x241)][_0x179234(0x4b1)](0x0):_0x545501;_0x947e71=_0x947e71['toLowerCase']()[_0x179234(0x54d)]();if(_0x947e71===_0x179234(0xd1))return[_0x5139f7];else{if(_0x947e71==='current\x20target'){if(_0x179234(0x58e)===_0x179234(0xb0a)){const _0x2de254=new _0x407f1b(_0x5316ca);this[_0x179234(0x91f)]['addChild'](_0x2de254);}else return[_0x5d82de];}else{if(_0x947e71===_0x179234(0x888)){if(_0x179234(0x5ed)===_0x179234(0x76b))_0x2d2876['BattleCore'][_0x179234(0x585)][_0x179234(0x541)](this,_0x334ad4);else{if(_0x5d82de){const _0x2f8aa7=_0x175612[_0x179234(0x57e)](_0x5d82de);return _0x2f8aa7>=0x0?[_0x175612[_0x2f8aa7-0x1]||_0x5d82de]:[_0x5d82de];}}}else{if(_0x947e71===_0x179234(0x2c7)){if(_0x5d82de){const _0x391bcf=_0x175612[_0x179234(0x57e)](_0x5d82de);return _0x391bcf>=0x0?[_0x175612[_0x391bcf+0x1]||_0x5d82de]:[_0x5d82de];}}else{if(_0x947e71==='all\x20targets'){if('ReSNW'!==_0x179234(0x951)){if(_0x4fa2d3[_0x179234(0x2a6)]())return![];}else return _0x175612;}else{if(_0x947e71===_0x179234(0x933))return _0x179234(0x474)===_0x179234(0x9b2)?!this[_0x179234(0x39c)]()&&!this[_0x179234(0x2df)]():[_0x5139f7][_0x179234(0x992)](_0x175612);else{if(_0x947e71===_0x179234(0x1e3))return _0x545501['filter'](_0x388e6d=>_0x388e6d!==_0x5139f7&&!_0x175612[_0x179234(0x87d)](_0x388e6d)&&_0x388e6d[_0x179234(0x5a3)]());}}}}}}if(_0x5139f7){if(_0x947e71==='alive\x20friends')return _0x5139f7['friendsUnit']()[_0x179234(0x12b)]();else{if(_0x947e71===_0x179234(0x4a6))return _0x5139f7[_0x179234(0xa91)]()[_0x179234(0x12b)]()[_0x179234(0x416)](_0x3d86d2=>_0x3d86d2!==_0x5139f7);else{if(_0x947e71===_0x179234(0x1b1))return _0x5139f7[_0x179234(0xa91)]()[_0x179234(0x12b)]()[_0x179234(0x416)](_0xa041f5=>_0xa041f5!==_0x5d82de);else{if(_0x947e71===_0x179234(0x315))return _0x179234(0x8de)==='CVQyO'?_0x5139f7[_0x179234(0xa91)]()[_0x179234(0x20e)]():!_0x4f86f7['inBattle']()?this[_0x179234(0x5df)](_0x1564b4):_0x559cea[_0x179234(0x781)]['Game_Interpreter_command301'][_0x179234(0x541)](this,_0xd54eb0);else{if(_0x947e71[_0x179234(0x111)](/FRIEND INDEX (\d+)/i)){const _0x35f73f=Number(RegExp['$1']);return[_0x5139f7['friendsUnit']()[_0x179234(0x7ba)]()[_0x35f73f]];}}}}}if(_0x947e71===_0x179234(0x5b4))return _0x5139f7['opponentsUnit']()[_0x179234(0x12b)]();else{if(_0x947e71===_0x179234(0x3e4))return _0x5139f7[_0x179234(0x5ce)]()[_0x179234(0x12b)]()[_0x179234(0x416)](_0x38373b=>_0x38373b!==_0x5d82de);else{if(_0x947e71==='dead\x20opponents'){if('lWwLk'!==_0x179234(0x8fa)){let _0x38b294=[];for(const _0x7373 of _0x445902){_0x38b294=_0x38b294[_0x179234(0x992)](_0x55646[_0x179234(0x69e)](_0x7373));}return _0x38b294[_0x179234(0x416)](_0x3a3ba7=>_0x3a3ba7);}else return _0x5139f7['opponentsUnit']()[_0x179234(0x20e)]();}else{if(_0x947e71['match'](/OPPONENT INDEX (\d+)/i)){const _0xad3672=Number(RegExp['$1']);return[_0x5139f7[_0x179234(0x5ce)]()[_0x179234(0x7ba)]()[_0xad3672]];}}}}}if(_0x947e71==='alive\x20actors')return $gameParty['aliveMembers']();else{if(_0x947e71===_0x179234(0x160)){if(_0x179234(0x286)===_0x179234(0x3c0))_0x3fb749[_0x179234(0x781)][_0x179234(0xa0d)][_0x179234(0x541)](this);else return $gameParty['aliveMembers']()['filter'](_0x3f8f27=>_0x3f8f27!==_0x5139f7);}else{if(_0x947e71===_0x179234(0x3e9))return $gameParty['aliveMembers']()['filter'](_0x50b157=>_0x50b157!==_0x5d82de);else{if(_0x947e71===_0x179234(0x872))return'UohbM'!==_0x179234(0x88e)?-0x1:$gameParty[_0x179234(0x20e)]();else{if(_0x947e71[_0x179234(0x111)](/ACTOR INDEX (\d+)/i)){const _0xaa1822=Number(RegExp['$1']);return[$gameParty[_0x179234(0x7ba)]()[_0xaa1822]];}else{if(_0x947e71[_0x179234(0x111)](/ACTOR ID (\d+)/i)){if(_0x179234(0xb33)==='qjAts')return!![];else{const _0x1bd5d6=Number(RegExp['$1']);return[$gameActors['actor'](_0x1bd5d6)];}}}}}}}if(_0x947e71==='alive\x20enemies'){if(_0x179234(0xc7)!=='nQApR'){const _0x21398e=this[_0x179234(0xafe)];if(_0x21398e&&!_0x21398e['inputtingAction']()){const _0x4bf417=_0x21398e['_actionInputIndex'];_0x21398e['_actions'][_0x4bf417]=new _0x13a556(_0x21398e);}return _0x12b379['BattleCore'][_0x179234(0xe9)]['call'](this);}else return $gameTroop[_0x179234(0x12b)]();}else{if(_0x947e71===_0x179234(0x4f4)){if(_0x179234(0x4e2)===_0x179234(0x4e2))return $gameTroop[_0x179234(0x12b)]()[_0x179234(0x416)](_0x2d31d=>_0x2d31d!==_0x5139f7);else{const _0x2185cb=_0x7f9573[0x0][_0x179234(0x4ed)](_0x3adb20[0x0]),_0x189815=_0x19fbfa[0x1]['format'](_0xe4148[0x1]),_0x52de5d=new _0x4a09f2(_0xf57306[_0x179234(0x4ed)](_0x189815),'i');_0x221288[_0x2185cb]=_0x52de5d;}}else{if(_0x947e71===_0x179234(0x13e)){if(_0x179234(0x58c)===_0x179234(0x11a))this[_0x179234(0x691)]()['refreshMotion']();else return $gameTroop['aliveMembers']()[_0x179234(0x416)](_0x9496a5=>_0x9496a5!==_0x5d82de);}else{if(_0x947e71===_0x179234(0x56f)){if(_0x179234(0x179)!=='QTZyz')return $gameTroop['deadMembers']();else _0x263992[_0x179234(0xadd)]=_0x247c32,_0x5e059c[_0x179234(0x755)]=!![],this['stop']();}else{if(_0x947e71[_0x179234(0x111)](/ENEMY INDEX (\d+)/i)){const _0x40f469=Number(RegExp['$1']);return[$gameTroop[_0x179234(0x7ba)]()[_0x40f469]];}else{if(_0x947e71[_0x179234(0x111)](/ENEMY ID (\d+)/i)){const _0x57a698=Number(RegExp['$1']);return $gameTroop[_0x179234(0x12b)]()['filter'](_0x13c162=>_0x13c162[_0x179234(0x512)]()===_0x57a698);}}}}}}if(_0x947e71===_0x179234(0x82a))return _0x545501[_0x179234(0x416)](_0x16823c=>_0x16823c[_0x179234(0x6fe)]());else{if(_0x947e71===_0x179234(0xac4))return _0x545501[_0x179234(0x416)](_0x27226a=>_0x27226a[_0x179234(0x6fe)]()&&_0x27226a!==_0x5139f7);else{if(_0x947e71===_0x179234(0x640)){if(_0x179234(0x16c)==='cVjZp')return _0x545501['filter'](_0x43c6e1=>_0x43c6e1['isAlive']()&&_0x43c6e1!==_0x5d82de);else{if(!this[_0x179234(0xa3c)])return;if(this[_0x179234(0xb0d)]&&this[_0x179234(0xb0d)][_0x179234(0x250)]()){const _0x2150b3=this[_0x179234(0xa3c)][_0x179234(0x89a)];this['_shadowSprite'][_0x179234(0x154)](0x0,0x0,_0x2150b3['width'],_0x2150b3['height']);}else this[_0x179234(0xa3c)][_0x179234(0x154)](0x0,0x0,0x0,0x0);}}else{if(_0x947e71===_0x179234(0x189))return _0x545501[_0x179234(0x416)](_0x389188=>_0x389188['isDead']());}}}return[];},PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Set_SetupAction',_0x1b25d6=>{const _0x54c054=_0x35b5eb;if(!SceneManager[_0x54c054(0x3a2)]())return;VisuMZ[_0x54c054(0x68f)](_0x1b25d6,_0x1b25d6);const _0x4fdafd=$gameTemp['getLastPluginCommandInterpreter'](),_0xf2d813=BattleManager[_0x54c054(0x495)],_0x107334=BattleManager[_0x54c054(0x785)],_0x491e57=BattleManager[_0x54c054(0x241)]?BattleManager[_0x54c054(0x241)][_0x54c054(0x4b1)](0x0):[],_0x12d7d3=BattleManager[_0x54c054(0x8cf)];if(!_0x4fdafd||!_0xf2d813||!_0x107334)return;if(!_0xf2d813[_0x54c054(0x5d3)]())return;if(_0x1b25d6['DisplayAction'])_0x12d7d3[_0x54c054(0x631)](_0x107334,_0xf2d813[_0x54c054(0x5d3)]());if(_0x1b25d6[_0x54c054(0x586)]){if(_0x54c054(0x2f0)===_0x54c054(0x2f0))_0x12d7d3[_0x54c054(0x7c7)](_0x54c054(0x6d8),_0x107334,_0x491e57,!![]);else return this['_enemy']['allowCollapse']();}if(_0x1b25d6[_0x54c054(0x9c3)])_0x12d7d3['push'](_0x54c054(0x387),_0x107334,_0xf2d813);if(_0x1b25d6['WaitForMovement'])_0x12d7d3[_0x54c054(0x7c7)](_0x54c054(0x79a));if(_0x1b25d6[_0x54c054(0x94b)])_0x12d7d3['push']('performCastAnimation',_0x107334,_0xf2d813);if(_0x1b25d6[_0x54c054(0x6e2)])_0x12d7d3[_0x54c054(0x7c7)](_0x54c054(0x340));_0x4fdafd['setWaitMode'](_0x54c054(0x15e));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x4a0),_0x474d29=>{const _0x7ade49=_0x35b5eb;if(!SceneManager[_0x7ade49(0x3a2)]())return;VisuMZ[_0x7ade49(0x68f)](_0x474d29,_0x474d29);const _0x4b610b=$gameTemp[_0x7ade49(0x657)](),_0x7be3c4=BattleManager['_action'],_0x51dd65=BattleManager[_0x7ade49(0x785)],_0x2cee01=BattleManager[_0x7ade49(0x241)]?BattleManager[_0x7ade49(0x241)][_0x7ade49(0x4b1)](0x0):[],_0x236ec9=BattleManager[_0x7ade49(0x8cf)],_0x5956bd=_0x474d29[_0x7ade49(0x14d)]??![];if(!_0x4b610b||!_0x7be3c4||!_0x51dd65)return;if(!_0x7be3c4[_0x7ade49(0x5d3)]())return;let _0x33d118=_0x5956bd?_0x236ec9[_0x7ade49(0x4ef)](_0x51dd65):0x1;for(let _0x207171=0x0;_0x207171<_0x33d118;_0x207171++){_0x5956bd&&_0x51dd65[_0x7ade49(0xa6f)]()&&('gCeih'===_0x7ade49(0x650)?_0x236ec9[_0x7ade49(0x7c7)](_0x7ade49(0x7f6),_0x51dd65,_0x207171):this[_0x7ade49(0x255)](...arguments));if(_0x474d29[_0x7ade49(0x809)])_0x236ec9['push'](_0x7ade49(0xb3c),_0x51dd65,_0x7be3c4);if(_0x474d29[_0x7ade49(0x89d)]>0x0)_0x236ec9[_0x7ade49(0x7c7)](_0x7ade49(0x4f7),_0x474d29[_0x7ade49(0x89d)]);if(_0x474d29[_0x7ade49(0x9f8)])_0x236ec9[_0x7ade49(0x7c7)]('showAnimation',_0x51dd65,_0x2cee01,_0x7be3c4[_0x7ade49(0x5d3)]()['animationId']);if(_0x474d29[_0x7ade49(0x6e2)])_0x236ec9['push'](_0x7ade49(0x340));for(const _0x2148b2 of _0x2cee01){if(!_0x2148b2)continue;if(_0x474d29[_0x7ade49(0x2c9)])_0x236ec9[_0x7ade49(0x7c7)](_0x7ade49(0x3a3),_0x51dd65,_0x2148b2);}}_0x5956bd&&_0x51dd65[_0x7ade49(0xa6f)]()&&(_0x7ade49(0x1af)==='LxBMk'?this[_0x7ade49(0x3de)]():_0x236ec9[_0x7ade49(0x7c7)]('clearActiveWeaponSet',_0x51dd65));if(_0x474d29[_0x7ade49(0x586)])_0x236ec9[_0x7ade49(0x7c7)](_0x7ade49(0x6d8),_0x51dd65,_0x2cee01,![]);_0x4b610b[_0x7ade49(0x7fe)](_0x7ade49(0x15e));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x14d435=>{const _0x406187=_0x35b5eb;if(!SceneManager[_0x406187(0x3a2)]())return;VisuMZ[_0x406187(0x68f)](_0x14d435,_0x14d435);const _0x1721be=$gameTemp[_0x406187(0x657)](),_0x9533d8=BattleManager['_action'],_0x380c63=BattleManager['_subject'],_0x31932a=BattleManager[_0x406187(0x241)]?BattleManager[_0x406187(0x241)][_0x406187(0x4b1)](0x0):[],_0x243f02=BattleManager[_0x406187(0x8cf)],_0x2504f2=_0x14d435[_0x406187(0x14d)]??![];if(!_0x1721be||!_0x9533d8||!_0x380c63)return;if(!_0x9533d8['item']())return;let _0x5c5ab1=_0x2504f2?_0x243f02[_0x406187(0x4ef)](_0x380c63):0x1;for(let _0x3ff0b9=0x0;_0x3ff0b9<_0x5c5ab1;_0x3ff0b9++){for(const _0x1f50ba of _0x31932a){if(!_0x1f50ba)continue;if(_0x2504f2&&_0x380c63[_0x406187(0xa6f)]()){if(_0x406187(0x237)!=='vuhVV')_0x243f02[_0x406187(0x7c7)]('setActiveWeaponSet',_0x380c63,_0x3ff0b9);else{this[_0x406187(0x8ea)][_0x406187(0x89a)]=_0x4c081a['_emptyBitmap'];return;}}if(_0x14d435['PerformAction'])_0x243f02[_0x406187(0x7c7)](_0x406187(0xb3c),_0x380c63,_0x9533d8);if(_0x14d435[_0x406187(0xa40)]>0x0)_0x243f02[_0x406187(0x7c7)](_0x406187(0x4f7),_0x14d435[_0x406187(0xa40)]);if(_0x14d435[_0x406187(0x9f8)])_0x243f02[_0x406187(0x7c7)](_0x406187(0x5aa),_0x380c63,[_0x1f50ba],_0x9533d8[_0x406187(0x5d3)]()[_0x406187(0xaae)]);if(_0x14d435[_0x406187(0x36b)]>0x0)_0x243f02[_0x406187(0x7c7)](_0x406187(0x4f7),_0x14d435[_0x406187(0x36b)]);if(_0x14d435['ActionEffect'])_0x243f02[_0x406187(0x7c7)](_0x406187(0x3a3),_0x380c63,_0x1f50ba);}}_0x2504f2&&_0x380c63[_0x406187(0xa6f)]()&&_0x243f02[_0x406187(0x7c7)](_0x406187(0x5fb),_0x380c63);if(_0x14d435[_0x406187(0x586)])_0x243f02[_0x406187(0x7c7)](_0x406187(0x6d8),_0x380c63,_0x31932a,![]);_0x1721be[_0x406187(0x7fe)](_0x406187(0x15e));}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xb34),_0x41343c=>{const _0x24890d=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x41343c,_0x41343c);const _0x3434b6=$gameTemp[_0x24890d(0x657)](),_0x395f2b=BattleManager['_action'],_0x7d902c=BattleManager['_subject'],_0x22195a=BattleManager[_0x24890d(0x241)]?BattleManager['_allTargets']['slice'](0x0):[],_0x277a36=BattleManager['_logWindow'];if(!_0x3434b6||!_0x395f2b||!_0x7d902c)return;if(!_0x395f2b['item']())return;if(_0x41343c[_0x24890d(0x586)])_0x277a36[_0x24890d(0x7c7)](_0x24890d(0x6d8),_0x7d902c,_0x22195a,![]);if(_0x41343c['WaitForNewLine'])_0x277a36[_0x24890d(0x7c7)](_0x24890d(0x8fd));if(_0x41343c[_0x24890d(0x9ac)])_0x277a36[_0x24890d(0x7c7)](_0x24890d(0x672));if(_0x41343c['ClearBattleLog'])_0x277a36[_0x24890d(0x7c7)]('clear');if(_0x41343c[_0x24890d(0x53b)])_0x277a36[_0x24890d(0x7c7)](_0x24890d(0x3bd),_0x7d902c);if(_0x41343c[_0x24890d(0x952)])_0x277a36[_0x24890d(0x7c7)](_0x24890d(0x79a));_0x3434b6[_0x24890d(0x7fe)](_0x24890d(0x15e));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x728),_0x18c123=>{const _0x4f8e52=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4f8e52(0x333)])return;VisuMZ['ConvertParams'](_0x18c123,_0x18c123);const _0x27cc43=$gameTemp['getLastPluginCommandInterpreter'](),_0x49d3d0=_0x18c123['WaitForAngle'];if(!_0x27cc43)return;$gameScreen[_0x4f8e52(0x812)](_0x18c123[_0x4f8e52(0x5f9)],_0x18c123[_0x4f8e52(0x4a1)],_0x18c123[_0x4f8e52(0x66c)]);if(_0x49d3d0)_0x27cc43['setWaitMode'](_0x4f8e52(0x2e8));}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x653),_0x52401d=>{const _0x52f479=_0x35b5eb;if(!SceneManager[_0x52f479(0x3a2)]())return;if(!Imported[_0x52f479(0x333)])return;VisuMZ['ConvertParams'](_0x52401d,_0x52401d);const _0x30880d=$gameTemp[_0x52f479(0x657)](),_0x1690e3=_0x52401d['WaitForAngle'];if(!_0x30880d)return;$gameScreen['setBattleAngle'](0x0,_0x52401d[_0x52f479(0x4a1)],_0x52401d['EasingType']);if(_0x1690e3)_0x30880d[_0x52f479(0x7fe)]('battleAngle');}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x616),_0x2ebada=>{const _0x55cd24=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55cd24(0x333)])return;const _0x2380ee=$gameTemp[_0x55cd24(0x657)]();if(!_0x2380ee)return;_0x2380ee[_0x55cd24(0x7fe)](_0x55cd24(0x2e8));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x93f),_0x22653d=>{const _0x1aec16=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1aec16(0x68f)](_0x22653d,_0x22653d);const _0x5db255=$gameTemp[_0x1aec16(0x657)](),_0x3f16a2=BattleManager[_0x1aec16(0x495)],_0x1ec5c4=BattleManager[_0x1aec16(0x785)],_0x19bfb0=VisuMZ[_0x1aec16(0x43c)](_0x22653d[_0x1aec16(0x1bf)]),_0x23dd64=_0x22653d[_0x1aec16(0x134)],_0x1787ba=BattleManager[_0x1aec16(0x8cf)];if(!_0x5db255||!_0x3f16a2||!_0x1ec5c4)return;if(!_0x3f16a2[_0x1aec16(0x5d3)]())return;let _0x1596ad=_0x3f16a2[_0x1aec16(0x5d3)]()[_0x1aec16(0xaae)];if(_0x1596ad<0x0)_0x1596ad=_0x1ec5c4[_0x1aec16(0x74c)]();$gameTemp[_0x1aec16(0x29a)](_0x19bfb0,_0x1596ad,_0x23dd64),_0x22653d[_0x1aec16(0x6e2)]&&(_0x1aec16(0xa0e)!==_0x1aec16(0xa0e)?this[_0x1aec16(0xad8)]()&&this['subject']()['canAttack']()?_0xdcbf90[_0x1aec16(0x781)][_0x1aec16(0x641)][_0x1aec16(0x541)](this):this[_0x1aec16(0xa37)]():_0x5db255['setWaitMode'](_0x1aec16(0x8d4)));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x45c),_0x1724fd=>{const _0x29dd7a=_0x35b5eb;if(!SceneManager[_0x29dd7a(0x3a2)]())return;VisuMZ['ConvertParams'](_0x1724fd,_0x1724fd);const _0x2ce7d9=$gameTemp[_0x29dd7a(0x657)](),_0x5c5d96=BattleManager[_0x29dd7a(0x785)],_0x324304=VisuMZ['CreateActionSequenceTargets'](_0x1724fd[_0x29dd7a(0x1bf)]),_0x4892c9=_0x1724fd['Mirror'],_0x395175=BattleManager[_0x29dd7a(0x8cf)];if(!_0x2ce7d9||!_0x5c5d96)return;const _0x15a3a0=_0x5c5d96[_0x29dd7a(0x74c)]();$gameTemp[_0x29dd7a(0x29a)](_0x324304,_0x15a3a0,_0x4892c9);if(_0x1724fd[_0x29dd7a(0x6e2)]){if(_0x29dd7a(0x15b)!==_0x29dd7a(0x2c8))_0x2ce7d9[_0x29dd7a(0x7fe)](_0x29dd7a(0x8d4));else return this[_0x29dd7a(0xab2)]();}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Animation_AttackAnimation2',_0x26ae61=>{const _0x27f8f5=_0x35b5eb;if(!SceneManager[_0x27f8f5(0x3a2)]())return;VisuMZ[_0x27f8f5(0x68f)](_0x26ae61,_0x26ae61);const _0x262609=_0x556645[_0x27f8f5(0x5ea)](_0x26ae61[_0x27f8f5(0x634)]);if(_0x262609<=0x0)return;const _0x5a48f8=$gameTemp[_0x27f8f5(0x657)](),_0x556645=BattleManager[_0x27f8f5(0x785)],_0xfafd7=VisuMZ[_0x27f8f5(0x43c)](_0x26ae61['Targets']),_0x25c1c6=_0x26ae61[_0x27f8f5(0x134)],_0x37f942=BattleManager[_0x27f8f5(0x8cf)];if(!_0x5a48f8||!_0x556645)return;$gameTemp[_0x27f8f5(0x29a)](_0xfafd7,_0x262609,_0x25c1c6);if(_0x26ae61[_0x27f8f5(0x6e2)]){if(_0x27f8f5(0x44f)!==_0x27f8f5(0x2e3))_0x5a48f8['setWaitMode'](_0x27f8f5(0x8d4));else{const _0x286ed7=_0x35a484['randomInt'](0x2)===0x0?this[_0x27f8f5(0x5ce)]():this[_0x27f8f5(0xa91)]();_0x2f6194[_0x27f8f5(0x7c7)](_0x286ed7[_0x27f8f5(0x595)]());}}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x531),_0x5734b2=>{const _0x1791e0=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1791e0(0x68f)](_0x5734b2,_0x5734b2);const _0x34b640=$gameTemp[_0x1791e0(0x657)](),_0x429887=BattleManager[_0x1791e0(0x495)],_0x72c595=_0x5734b2[_0x1791e0(0x134)],_0x5c3966=VisuMZ['CreateActionSequenceTargets'](_0x5734b2[_0x1791e0(0x1bf)]);if(!_0x34b640||!_0x429887)return;if(!_0x429887['item']())return;for(const _0x406431 of _0x5c3966){if(!_0x406431)continue;_0x406431[_0x1791e0(0x309)](_0x429887,_0x72c595);}if(_0x5734b2[_0x1791e0(0x6e2)])_0x34b640[_0x1791e0(0x7fe)](_0x1791e0(0x8d4));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Animation_ChangeBattlePortrait',_0x192d8e=>{const _0x4da70a=_0x35b5eb;VisuMZ[_0x4da70a(0x68f)](_0x192d8e,_0x192d8e);const _0x380a8a=$gameTemp[_0x4da70a(0x657)](),_0x2b4b6b=VisuMZ['CreateActionSequenceTargets'](_0x192d8e['Targets']),_0x17bf19=_0x192d8e[_0x4da70a(0x1d0)];if(!_0x17bf19)return;for(const _0x5776c1 of _0x2b4b6b){if(!_0x5776c1)continue;if(!_0x5776c1['isActor']())continue;_0x5776c1['setBattlePortrait'](_0x17bf19);}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x8ba),_0x5f4bfc=>{const _0x2ee4cb=_0x35b5eb;if(!SceneManager[_0x2ee4cb(0x885)])return;if(!SceneManager[_0x2ee4cb(0x885)][_0x2ee4cb(0x254)])return;if(!Imported[_0x2ee4cb(0x268)])return;VisuMZ[_0x2ee4cb(0x68f)](_0x5f4bfc,_0x5f4bfc);const _0x64c1f6=$gameTemp['getLastPluginCommandInterpreter'](),_0x573d6e=Math[_0x2ee4cb(0x3d5)](_0x5f4bfc['pointX']),_0x541300=Math['round'](_0x5f4bfc[_0x2ee4cb(0x886)]);$gameTemp[_0x2ee4cb(0xae4)](_0x573d6e,_0x541300,_0x5f4bfc['AnimationID'],_0x5f4bfc[_0x2ee4cb(0x134)],_0x5f4bfc[_0x2ee4cb(0xe7)]);if(_0x5f4bfc[_0x2ee4cb(0x8b5)]&&_0x64c1f6){if(_0x2ee4cb(0x726)!==_0x2ee4cb(0x726)){let _0x18c303=0x0;this[_0x2ee4cb(0x1f9)]['length']>0x0&&(_0x18c303=this[_0x2ee4cb(0x1f9)][this['_baseLineStack'][_0x2ee4cb(0x1a0)]-0x1]),this[_0x2ee4cb(0x6bd)]['length']>_0x18c303?this[_0x2ee4cb(0x17d)]():this[_0x2ee4cb(0xa1a)]();}else SceneManager[_0x2ee4cb(0x885)][_0x2ee4cb(0x254)][_0x2ee4cb(0x61f)](),_0x64c1f6[_0x2ee4cb(0x7fe)](_0x2ee4cb(0x8d4));}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x150),_0x6a878e=>{const _0xd3e7b6=_0x35b5eb;if(!SceneManager[_0xd3e7b6(0x3a2)]())return;VisuMZ[_0xd3e7b6(0x68f)](_0x6a878e,_0x6a878e);const _0x4a8761=$gameTemp[_0xd3e7b6(0x657)](),_0x48dfe7=VisuMZ[_0xd3e7b6(0x43c)](_0x6a878e[_0xd3e7b6(0x1bf)]),_0x27988f=_0x6a878e[_0xd3e7b6(0x7c1)],_0x24eef6=_0x6a878e[_0xd3e7b6(0x134)];if(!_0x4a8761)return;$gameTemp['requestAnimation'](_0x48dfe7,_0x27988f,_0x24eef6);if(_0x6a878e[_0xd3e7b6(0x6e2)])_0x4a8761['setWaitMode'](_0xd3e7b6(0x8d4));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x100),_0x25e1e5=>{const _0x4d545d=_0x35b5eb;if(!SceneManager[_0x4d545d(0x3a2)]())return;const _0x4f0a21=$gameTemp[_0x4d545d(0x657)]();if(!_0x4f0a21)return;_0x4f0a21[_0x4d545d(0x7fe)]('battleAnimation');}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x2de),_0x5869ae=>{const _0x44046e=_0x35b5eb;if(!SceneManager[_0x44046e(0x3a2)]())return;VisuMZ[_0x44046e(0x68f)](_0x5869ae,_0x5869ae);const _0x49caaa=BattleManager[_0x44046e(0x8cf)],_0x3caee0=_0x5869ae[_0x44046e(0xc3)]&&Imported[_0x44046e(0x72c)];_0x49caaa[_0x44046e(0x3f0)](_0x5869ae['Text']),_0x3caee0&&Imported[_0x44046e(0x72c)]&&$gameSystem[_0x44046e(0x275)](_0x5869ae[_0x44046e(0x9d3)]||'',_0x5869ae['CombatLogIcon']||0x0);}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x88b),_0x5cfe84=>{const _0x44190b=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;const _0x2732cb=BattleManager[_0x44190b(0x8cf)];_0x2732cb['clear']();}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_BattleLog_DisplayAction',_0x435be4=>{const _0xcba142=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;const _0x526fc2=$gameTemp[_0xcba142(0x657)](),_0x32dc2d=BattleManager[_0xcba142(0x495)],_0x480ffc=BattleManager['_subject'],_0x514884=BattleManager[_0xcba142(0x8cf)];if(!_0x526fc2||!_0x32dc2d||!_0x480ffc)return;if(!_0x32dc2d[_0xcba142(0x5d3)]())return;_0x514884[_0xcba142(0x631)](_0x480ffc,_0x32dc2d[_0xcba142(0x5d3)]()),_0x526fc2[_0xcba142(0x7fe)]('battlelog');}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_BattleLog_PopBaseLine',_0x5e343f=>{const _0x5d9163=_0x35b5eb;if(!SceneManager[_0x5d9163(0x3a2)]())return;const _0x3745be=BattleManager[_0x5d9163(0x8cf)];_0x3745be[_0x5d9163(0x273)]();}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x90a),_0x52cbe6=>{const _0x263598=_0x35b5eb;if(!SceneManager[_0x263598(0x3a2)]())return;const _0x40600c=BattleManager[_0x263598(0x8cf)];_0x40600c[_0x263598(0x59f)]();}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x810),_0x5060ce=>{const _0x3218df=_0x35b5eb;if(!SceneManager[_0x3218df(0x3a2)]())return;const _0x1ca975=BattleManager['_logWindow'];_0x1ca975[_0x3218df(0x129)]();}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x375),_0xdb2c90=>{const _0x3307e1=_0x35b5eb;if(!SceneManager[_0x3307e1(0x3a2)]())return;VisuMZ[_0x3307e1(0x68f)](_0xdb2c90,_0xdb2c90),SceneManager['_scene'][_0x3307e1(0x941)](_0xdb2c90['ShowHide']);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x269),_0x432373=>{const _0x55e702=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;const _0xc1bba=$gameTemp[_0x55e702(0x657)]();_0xc1bba[_0x55e702(0x7fe)](_0x55e702(0x15e));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x26c),_0x2b6bcb=>{const _0x3c5e89=_0x35b5eb;if(!SceneManager[_0x3c5e89(0x3a2)]())return;const _0x548ed8=$gameTemp[_0x3c5e89(0x657)](),_0x5a59e0=BattleManager['_logWindow'];_0x5a59e0['waitForNewLine'](),_0x548ed8[_0x3c5e89(0x7fe)](_0x3c5e89(0x15e));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x8ca),_0x4d1ec4=>{const _0x40d82b=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x40d82b(0x333)])return;VisuMZ[_0x40d82b(0x68f)](_0x4d1ec4,_0x4d1ec4);const _0x3b2344=$gameScreen['battleCameraData']();_0x3b2344[_0x40d82b(0x2d4)]=_0x4d1ec4[_0x40d82b(0x334)];}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x341),_0x22aca1=>{const _0x23db04=_0x35b5eb;if(!SceneManager[_0x23db04(0x3a2)]())return;if(!Imported[_0x23db04(0x333)])return;VisuMZ['ConvertParams'](_0x22aca1,_0x22aca1);const _0x469c94=$gameTemp['getLastPluginCommandInterpreter'](),_0x4772b5=_0x22aca1[_0x23db04(0x86d)];$gameScreen[_0x23db04(0xaa2)](_0x22aca1[_0x23db04(0x7b6)],_0x22aca1[_0x23db04(0x81b)],_0x22aca1[_0x23db04(0x4a1)],_0x22aca1[_0x23db04(0x66c)]);if(_0x4772b5)_0x469c94[_0x23db04(0x7fe)](_0x23db04(0x417));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xa95),_0x26b672=>{const _0x1a18f0=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1a18f0(0x68f)](_0x26b672,_0x26b672);const _0x1f225a=$gameTemp[_0x1a18f0(0x657)](),_0x4d1a72=VisuMZ['CreateActionSequenceTargets'](_0x26b672[_0x1a18f0(0x1bf)]),_0x5a8673=_0x26b672[_0x1a18f0(0x86d)];$gameScreen['setBattleCameraTargets'](_0x4d1a72,_0x26b672[_0x1a18f0(0x4a1)],_0x26b672[_0x1a18f0(0x66c)]);if(_0x5a8673)_0x1f225a['setWaitMode'](_0x1a18f0(0x417));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xa24),_0x3abb5e=>{const _0x4f3ba5=_0x35b5eb;if(!SceneManager[_0x4f3ba5(0x3a2)]())return;if(!Imported[_0x4f3ba5(0x333)])return;VisuMZ[_0x4f3ba5(0x68f)](_0x3abb5e,_0x3abb5e);const _0x4cf0df=$gameTemp[_0x4f3ba5(0x657)](),_0x49bb07=_0x3abb5e['WaitForCamera'];$gameScreen[_0x4f3ba5(0x686)](_0x3abb5e[_0x4f3ba5(0x67f)],_0x3abb5e[_0x4f3ba5(0x3d9)],_0x3abb5e[_0x4f3ba5(0x4a1)],_0x3abb5e[_0x4f3ba5(0x66c)]);if(_0x49bb07)_0x4cf0df[_0x4f3ba5(0x7fe)](_0x4f3ba5(0x417));}),PluginManager['registerCommand'](pluginData['name'],_0x35b5eb(0x791),_0x726466=>{const _0x3ba8db=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ba8db(0x333)])return;VisuMZ['ConvertParams'](_0x726466,_0x726466);const _0x36226e=$gameTemp[_0x3ba8db(0x657)](),_0x980050=_0x726466[_0x3ba8db(0x5b5)],_0x46d236=_0x726466[_0x3ba8db(0x3f4)],_0x31dadd=_0x726466['WaitForCamera'];if(_0x980050){if(_0x3ba8db(0x208)!==_0x3ba8db(0x208))return[_0x50a146];else{const _0x1dc39e=Math[_0x3ba8db(0x3d5)](Graphics[_0x3ba8db(0x91c)]/0x2),_0x2bbcb2=Math['round'](Graphics[_0x3ba8db(0x491)]/0x2);$gameScreen[_0x3ba8db(0xaa2)](_0x1dc39e,_0x2bbcb2,_0x726466[_0x3ba8db(0x4a1)],_0x726466[_0x3ba8db(0x66c)]);}}_0x46d236&&$gameScreen[_0x3ba8db(0x686)](0x0,0x0,_0x726466['Duration'],_0x726466['EasingType']);if(_0x31dadd)_0x36226e[_0x3ba8db(0x7fe)](_0x3ba8db(0x417));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Camera_WaitForCamera',_0x58175f=>{const _0x50d7c4=_0x35b5eb;if(!SceneManager[_0x50d7c4(0x3a2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x5c7c83=$gameTemp[_0x50d7c4(0x657)]();if(!_0x5c7c83)return;_0x5c7c83[_0x50d7c4(0x7fe)](_0x50d7c4(0x417));}),PluginManager['registerCommand'](pluginData['name'],_0x35b5eb(0xae3),_0x106e32=>{const _0x34a554=_0x35b5eb;if(!SceneManager[_0x34a554(0x3a2)]())return;if(!Imported[_0x34a554(0x5cc)])return;VisuMZ['ConvertParams'](_0x106e32,_0x106e32);const _0x109cb9=VisuMZ[_0x34a554(0x43c)](_0x106e32['Targets']),_0x4aec04=_0x106e32['MotionAni']['toLowerCase']()[_0x34a554(0x54d)]();for(const _0x13e113 of _0x109cb9){if(!_0x13e113)continue;_0x13e113[_0x34a554(0x13a)](_0x4aec04);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x266),_0x1218d9=>{const _0x166209=_0x35b5eb;if(!SceneManager[_0x166209(0x3a2)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x166209(0x68f)](_0x1218d9,_0x1218d9);const _0x10e72a=VisuMZ[_0x166209(0x43c)](_0x1218d9[_0x166209(0x1bf)]),_0x4753d0=_0x1218d9[_0x166209(0x1ad)];for(const _0x45c066 of _0x10e72a){if(_0x166209(0x943)===_0x166209(0x943)){if(!_0x45c066)continue;_0x45c066[_0x166209(0x966)]()[_0x166209(0x261)]=_0x4753d0;}else{const _0x118b2f=this[_0x166209(0x707)];_0x118b2f[_0x166209(0x891)](_0x1804f0,0x0,_0x3ebe02['y'],_0x118b2f['innerWidth'],'center');}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x131),_0x198c61=>{const _0x4e606d=_0x35b5eb;if(!SceneManager[_0x4e606d(0x3a2)]())return;if(!Imported[_0x4e606d(0x3d8)])return;VisuMZ[_0x4e606d(0x68f)](_0x198c61,_0x198c61);const _0x36bc14=BattleManager[_0x4e606d(0x495)],_0x2ee00a=_0x198c61[_0x4e606d(0xa71)];if(!_0x36bc14)return;_0x36bc14[_0x4e606d(0x8fc)]=_0x2ee00a;}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0xacb),_0x57001b=>{const _0x4441b6=_0x35b5eb;if(!SceneManager[_0x4441b6(0x3a2)]())return;if(!Imported[_0x4441b6(0x3d8)])return;const _0x292f28=BattleManager['_action'];if(!_0x292f28)return;_0x292f28[_0x4441b6(0x29c)]();}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x4df),_0x3b7642=>{const _0x596c46=_0x35b5eb;if(!SceneManager[_0x596c46(0x3a2)]())return;if(!Imported[_0x596c46(0x3d8)])return;VisuMZ[_0x596c46(0x68f)](_0x3b7642,_0x3b7642);const _0x106516=BattleManager[_0x596c46(0x495)],_0x1efd6a=_0x3b7642[_0x596c46(0xa71)];if(!_0x106516)return;_0x106516[_0x596c46(0x2bd)]=_0x1efd6a;}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Element_NullElements',_0x3a9828=>{const _0x3557ad=_0x35b5eb;if(!SceneManager[_0x3557ad(0x3a2)]())return;if(!Imported[_0x3557ad(0x3d8)])return;const _0x5d6589=BattleManager['_action'];if(!_0x5d6589)return;_0x5d6589[_0x3557ad(0x796)]=!![];}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],'ActSeq_Horror_Clear',_0x4a5b3e=>{const _0x424459=_0x35b5eb;if(!Imported[_0x424459(0x3d3)])return;if(!SceneManager[_0x424459(0x3a2)]())return;VisuMZ[_0x424459(0x68f)](_0x4a5b3e,_0x4a5b3e);const _0x19b772=VisuMZ[_0x424459(0x43c)](_0x4a5b3e[_0x424459(0x1bf)]);for(const _0x588d4b of _0x19b772){if(!_0x588d4b)continue;_0x588d4b['removeHorrorEffect'](_0x424459(0x4bb)),_0x588d4b[_0x424459(0x41f)]('glitch'),_0x588d4b[_0x424459(0x41f)]('tv'),_0x588d4b[_0x424459(0x299)]();}$gamePlayer['refresh']();}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x2c1),_0x570f97=>{const _0x4a3138=_0x35b5eb;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4a3138(0x3a2)]())return;VisuMZ[_0x4a3138(0x68f)](_0x570f97,_0x570f97);const _0x565fb1=VisuMZ['CreateActionSequenceTargets'](_0x570f97[_0x4a3138(0x1bf)]),_0x5b7d2e=_0x4a3138(0x1e1);_0x570f97[_0x4a3138(0x19d)]=Math[_0x4a3138(0x43d)](_0x570f97['slices']/0x2),_0x570f97[_0x4a3138(0xaf5)]=_0x570f97[_0x4a3138(0x87c)],_0x570f97[_0x4a3138(0x4cf)]=!![];for(const _0x3f6c54 of _0x565fb1){if(!_0x3f6c54)continue;_0x3f6c54[_0x4a3138(0x200)](_0x5b7d2e,_0x570f97);}$gamePlayer[_0x4a3138(0x129)]();}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x1c9),_0xde8255=>{const _0x1ef3cb=_0x35b5eb;if(!Imported[_0x1ef3cb(0x3d3)])return;if(!SceneManager[_0x1ef3cb(0x3a2)]())return;VisuMZ[_0x1ef3cb(0x68f)](_0xde8255,_0xde8255);const _0x1e74fc=VisuMZ[_0x1ef3cb(0x43c)](_0xde8255[_0x1ef3cb(0x1bf)]);for(const _0x330c4b of _0x1e74fc){if(_0x1ef3cb(0x25a)===_0x1ef3cb(0x25a)){if(!_0x330c4b)continue;_0x330c4b['removeHorrorEffect'](_0x1ef3cb(0x1e1));}else _0x21f3e1[_0x1ef3cb(0x781)][_0x1ef3cb(0x1e8)][_0x1ef3cb(0x541)](this,_0xe3b497,_0x137011),this[_0x1ef3cb(0xa1a)]();}$gamePlayer[_0x1ef3cb(0x129)]();}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Horror_NoiseCreate',_0x4e3fc2=>{const _0x296ab8=_0x35b5eb;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x296ab8(0x3a2)]())return;VisuMZ['ConvertParams'](_0x4e3fc2,_0x4e3fc2);const _0x4e0f16=VisuMZ[_0x296ab8(0x43c)](_0x4e3fc2['Targets']),_0x130aee=_0x296ab8(0x4bb);for(const _0x51ceca of _0x4e0f16){if(!_0x51ceca)continue;_0x51ceca[_0x296ab8(0x200)](_0x130aee,_0x4e3fc2);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x99d),_0x470d6f=>{const _0x4363e9=_0x35b5eb;if(!Imported[_0x4363e9(0x3d3)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4363e9(0x68f)](_0x470d6f,_0x470d6f);const _0x393b7e=VisuMZ['CreateActionSequenceTargets'](_0x470d6f['Targets']);for(const _0x41ce82 of _0x393b7e){if(_0x4363e9(0xa83)!=='KpdfV')this[_0x4363e9(0x2f5)]=0x0;else{if(!_0x41ce82)continue;_0x41ce82['removeHorrorEffect'](_0x4363e9(0x4bb));}}$gamePlayer[_0x4363e9(0x129)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_TVCreate',_0x148f69=>{const _0x5ad259=_0x35b5eb;if(!Imported[_0x5ad259(0x3d3)])return;if(!SceneManager[_0x5ad259(0x3a2)]())return;VisuMZ[_0x5ad259(0x68f)](_0x148f69,_0x148f69);const _0x5ae6da=VisuMZ[_0x5ad259(0x43c)](_0x148f69[_0x5ad259(0x1bf)]),_0x1baea5='tv';for(const _0x36e358 of _0x5ae6da){if('pqymJ'!=='pqymJ')this[_0x5ad259(0x5d5)](_0x14c2b5,_0x2cc5dd,_0x5e1b83);else{if(!_0x36e358)continue;_0x36e358[_0x5ad259(0x200)](_0x1baea5,_0x148f69);}}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x543),_0x18c45d=>{const _0x20c0a3=_0x35b5eb;if(!Imported[_0x20c0a3(0x3d3)])return;if(!SceneManager[_0x20c0a3(0x3a2)]())return;VisuMZ[_0x20c0a3(0x68f)](_0x18c45d,_0x18c45d);const _0x5df72b=VisuMZ[_0x20c0a3(0x43c)](_0x18c45d[_0x20c0a3(0x1bf)]);for(const _0x3e53bb of _0x5df72b){if(!_0x3e53bb)continue;_0x3e53bb[_0x20c0a3(0x41f)]('tv');}$gamePlayer[_0x20c0a3(0x129)]();}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x4a9),_0xd018fa=>{const _0x4525e8=_0x35b5eb;if(!SceneManager[_0x4525e8(0x3a2)]())return;if(!Imported[_0x4525e8(0x243)])return;const _0x54f355=SceneManager[_0x4525e8(0x885)][_0x4525e8(0x254)];if(!_0x54f355)return;VisuMZ[_0x4525e8(0x68f)](_0xd018fa,_0xd018fa);const _0x3be1fc=_0xd018fa['Intensity']||0x1,_0x3ca59c=_0xd018fa['Duration']||0x1,_0xfd002e=_0xd018fa[_0x4525e8(0x66c)]||'Linear';_0x54f355[_0x4525e8(0x9bf)](_0x3be1fc,_0x3ca59c,_0xfd002e);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Impact_MotionBlurScreen',_0x4f6bcd=>{const _0x22c9d9=_0x35b5eb;if(!SceneManager[_0x22c9d9(0x3a2)]())return;if(!Imported[_0x22c9d9(0x243)])return;const _0x210b0b=SceneManager[_0x22c9d9(0x885)][_0x22c9d9(0x254)];if(!_0x210b0b)return;VisuMZ['ConvertParams'](_0x4f6bcd,_0x4f6bcd);const _0x69d2fa=Number(_0x4f6bcd[_0x22c9d9(0x5f9)])||0x0,_0x24a0c5=Number(_0x4f6bcd['Rate']),_0x10c9fe=_0x4f6bcd[_0x22c9d9(0x4a1)]||0x1,_0x382401=_0x4f6bcd[_0x22c9d9(0x66c)]||_0x22c9d9(0x62b);_0x210b0b['setupMotionBlurImpactFilter'](_0x69d2fa,_0x24a0c5,_0x10c9fe,_0x382401);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x97e),_0x8581d0=>{const _0x209a28=_0x35b5eb;if(!SceneManager[_0x209a28(0x3a2)]())return;if(!Imported[_0x209a28(0x243)])return;const _0x162fa8=SceneManager[_0x209a28(0x885)][_0x209a28(0x254)];if(!_0x162fa8)return;VisuMZ[_0x209a28(0x68f)](_0x8581d0,_0x8581d0);const _0x78c6a7=Number(_0x8581d0['Angle'])||0x0,_0x5a349d=Number(_0x8581d0['Rate']),_0x2eb8bd=_0x8581d0[_0x209a28(0x4a1)]||0x1,_0x44d07f=_0x8581d0[_0x209a28(0x66c)]||_0x209a28(0x62b),_0x499a8b=VisuMZ[_0x209a28(0x43c)](_0x8581d0[_0x209a28(0x1bf)]);for(const _0x2dd715 of _0x499a8b){if(!_0x2dd715)continue;if(!_0x2dd715[_0x209a28(0x691)]())continue;_0x2dd715[_0x209a28(0x691)]()[_0x209a28(0x685)](_0x78c6a7,_0x5a349d,_0x2eb8bd,_0x44d07f);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x2d8),_0x4fc797=>{const _0x248ff6=_0x35b5eb;if(!SceneManager[_0x248ff6(0x3a2)]())return;if(!Imported[_0x248ff6(0x243)])return;VisuMZ[_0x248ff6(0x68f)](_0x4fc797,_0x4fc797);const _0x5a203d={'delay':_0x4fc797[_0x248ff6(0x57c)],'duration':_0x4fc797[_0x248ff6(0x4fb)],'hue':_0x4fc797[_0x248ff6(0x3eb)],'opacityStart':_0x4fc797['opacityStart'],'tone':_0x4fc797[_0x248ff6(0x11b)],'visible':!![]},_0x1baff5=VisuMZ[_0x248ff6(0x43c)](_0x4fc797[_0x248ff6(0x1bf)]);for(const _0x315fac of _0x1baff5){if(!_0x315fac)continue;_0x315fac[_0x248ff6(0x7fb)](_0x5a203d);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x30d),_0x58a6e2=>{const _0x2955b2=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2955b2(0x243)])return;VisuMZ[_0x2955b2(0x68f)](_0x58a6e2,_0x58a6e2);const _0x22b42e=VisuMZ[_0x2955b2(0x43c)](_0x58a6e2['Targets']);for(const _0x183190 of _0x22b42e){if(!_0x183190)continue;_0x183190[_0x2955b2(0x53a)]();}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x5be),_0x154678=>{const _0x3eef5b=_0x35b5eb;if(!Imported[_0x3eef5b(0x243)])return;const _0x552fcf=SceneManager[_0x3eef5b(0x885)]['_spriteset'];if(!_0x552fcf)return;VisuMZ[_0x3eef5b(0x68f)](_0x154678,_0x154678);const _0x5a4728=_0x154678['X']||0x0,_0x166b96=_0x154678['Y']||0x0,_0x51fb63=_0x154678['Amp']||0x0,_0x497ff0=_0x154678[_0x3eef5b(0x7f5)]||0x0,_0x9e861=_0x154678[_0x3eef5b(0x4a1)]||0x1;_0x552fcf[_0x3eef5b(0x37a)](_0x5a4728,_0x166b96,_0x51fb63,_0x497ff0,_0x9e861);}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Impact_ShockwaveEachTargets',_0x465aca=>{const _0x20f7a3=_0x35b5eb;if(!SceneManager[_0x20f7a3(0x3a2)]())return;if(!Imported[_0x20f7a3(0x243)])return;const _0x11d2f5=SceneManager[_0x20f7a3(0x885)][_0x20f7a3(0x254)];if(!_0x11d2f5)return;VisuMZ['ConvertParams'](_0x465aca,_0x465aca);const _0x30692e=VisuMZ[_0x20f7a3(0x43c)](_0x465aca[_0x20f7a3(0x1bf)]),_0xeeec33=_0x465aca[_0x20f7a3(0x6c6)],_0x52e0c0=_0x465aca[_0x20f7a3(0x67f)]||0x0,_0x20d80e=_0x465aca[_0x20f7a3(0x3d9)]||0x0,_0x5c88d8=_0x465aca['Amp']||0x0,_0x6ff5e6=_0x465aca[_0x20f7a3(0x7f5)]||0x0,_0x215464=_0x465aca['Duration']||0x1;for(const _0x33d266 of _0x30692e){if(!_0x33d266)continue;if(!_0x33d266['battler']())continue;const _0x552807=_0x33d266[_0x20f7a3(0x691)]();let _0x32e5d9=_0x552807['_baseX'],_0x45dcbc=_0x552807[_0x20f7a3(0x740)];_0x32e5d9+=(Graphics[_0x20f7a3(0x91c)]-Graphics['boxWidth'])/0x2,_0x45dcbc+=(Graphics[_0x20f7a3(0x491)]-Graphics[_0x20f7a3(0x197)])/0x2;if(_0xeeec33['match'](/front/i)){if(_0x20f7a3(0x9e1)==='UbapU')_0x32e5d9+=(_0x33d266[_0x20f7a3(0x65c)]()?0x1:-0x1)*_0x552807[_0x20f7a3(0x667)]()/0x2;else{const _0x49d309=this[_0x20f7a3(0xb0d)];_0x4f7887[_0x20f7a3(0x781)][_0x20f7a3(0x818)]['call'](this,_0x2ffb5a),this[_0x20f7a3(0x8c8)](_0x217cc2);if(_0x49d309!==_0x3402a6)this[_0x20f7a3(0xb1a)]();}}else{if(_0xeeec33['match'](/back/i)){if('qEFIu'===_0x20f7a3(0x67b))return;else _0x32e5d9+=(_0x33d266['isEnemy']()?-0x1:0x1)*_0x552807[_0x20f7a3(0x667)]()/0x2;}}if(_0xeeec33[_0x20f7a3(0x111)](/head/i))_0x45dcbc-=_0x552807[_0x20f7a3(0x9d9)]();else _0xeeec33[_0x20f7a3(0x111)](/center/i)&&(_0x45dcbc-=_0x552807['mainSpriteHeight']()/0x2);_0x32e5d9+=_0x52e0c0,_0x45dcbc+=_0x20d80e,_0x11d2f5[_0x20f7a3(0x37a)](_0x32e5d9,_0x45dcbc,_0x5c88d8,_0x6ff5e6,_0x215464);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x613),_0x69f24e=>{const _0xac8107=_0x35b5eb;if(!SceneManager[_0xac8107(0x3a2)]())return;if(!Imported[_0xac8107(0x243)])return;const _0x3331fd=SceneManager[_0xac8107(0x885)]['_spriteset'];if(!_0x3331fd)return;VisuMZ[_0xac8107(0x68f)](_0x69f24e,_0x69f24e);const _0x20ed4c=VisuMZ[_0xac8107(0x43c)](_0x69f24e[_0xac8107(0x1bf)]),_0xf26909=_0x69f24e[_0xac8107(0x6c6)],_0x9be008=_0x69f24e[_0xac8107(0x67f)]||0x0,_0x277bdd=_0x69f24e['OffsetY']||0x0,_0x68430a=_0x69f24e[_0xac8107(0xb3a)]||0x0,_0x271a2d=_0x69f24e[_0xac8107(0x7f5)]||0x0,_0x590df1=_0x69f24e[_0xac8107(0x4a1)]||0x1,_0x418b5c=Math['min'](..._0x20ed4c[_0xac8107(0x3dd)](_0x4a4b32=>_0x4a4b32[_0xac8107(0x691)]()[_0xac8107(0x74d)]-_0x4a4b32['battler']()[_0xac8107(0x667)]()/0x2)),_0x3b9986=Math[_0xac8107(0x2a3)](..._0x20ed4c[_0xac8107(0x3dd)](_0x5c5b65=>_0x5c5b65[_0xac8107(0x691)]()[_0xac8107(0x74d)]+_0x5c5b65[_0xac8107(0x691)]()[_0xac8107(0x667)]()/0x2)),_0x323392=Math[_0xac8107(0x4bc)](..._0x20ed4c['map'](_0xe49fa6=>_0xe49fa6[_0xac8107(0x691)]()[_0xac8107(0x740)]-_0xe49fa6['battler']()[_0xac8107(0x9d9)]())),_0x9c42e4=Math[_0xac8107(0x2a3)](..._0x20ed4c['map'](_0xfc700=>_0xfc700[_0xac8107(0x691)]()[_0xac8107(0x740)])),_0x5c8876=_0x20ed4c[_0xac8107(0x416)](_0x49f0c9=>_0x49f0c9[_0xac8107(0xa6f)]())[_0xac8107(0x1a0)],_0x55927c=_0x20ed4c['filter'](_0x1fca06=>_0x1fca06[_0xac8107(0x65c)]())[_0xac8107(0x1a0)];let _0x58592d=0x0,_0x42c50a=0x0;if(_0xf26909[_0xac8107(0x111)](/front/i))_0x58592d=_0x5c8876>=_0x55927c?_0x418b5c:_0x3b9986;else{if(_0xf26909[_0xac8107(0x111)](/middle/i))_0x58592d=(_0x418b5c+_0x3b9986)/0x2,melee=-0x1;else _0xf26909[_0xac8107(0x111)](/back/i)&&(_0xac8107(0x924)!==_0xac8107(0x924)?(this[_0xac8107(0x59a)]=new _0x36e36a(),this['addChild'](this[_0xac8107(0x59a)])):_0x58592d=_0x5c8876>=_0x55927c?_0x3b9986:_0x418b5c);}if(_0xf26909[_0xac8107(0x111)](/head/i))_0x42c50a=_0x323392;else{if(_0xf26909[_0xac8107(0x111)](/center/i))_0xac8107(0x97f)!=='hILOW'?_0x1be103[_0xac8107(0x254)]['processAnimationRequests']():_0x42c50a=(_0x323392+_0x9c42e4)/0x2;else{if(_0xf26909[_0xac8107(0x111)](/base/i)){if(_0xac8107(0x714)!=='OdrSb'){if(!_0x17c5a1[_0xac8107(0x243)])return;const _0xe3738e=_0x4ed3a5[_0xac8107(0x885)][_0xac8107(0x254)];if(!_0xe3738e)return;_0x46f0cb[_0xac8107(0x68f)](_0x3f0a69,_0x446612);const _0x466c81=_0x3b75f6['X']||0x0,_0x2d3550=_0x25aa78['Y']||0x0,_0x20c053=_0x14a2e2[_0xac8107(0xb3a)]||0x0,_0x2388e3=_0x46020f[_0xac8107(0x7f5)]||0x0,_0x3bba67=_0x499bf2['Duration']||0x1;_0xe3738e[_0xac8107(0x37a)](_0x466c81,_0x2d3550,_0x20c053,_0x2388e3,_0x3bba67);}else _0x42c50a=_0x9c42e4;}}}_0x58592d+=(Graphics[_0xac8107(0x91c)]-Graphics['boxWidth'])/0x2,_0x42c50a+=(Graphics[_0xac8107(0x491)]-Graphics[_0xac8107(0x197)])/0x2,_0x58592d+=_0x9be008,_0x42c50a+=_0x277bdd,_0x3331fd['setupShockwaveImpactFilter'](_0x58592d,_0x42c50a,_0x68430a,_0x271a2d,_0x590df1);}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Impact_ZoomBlurPoint',_0x276d07=>{const _0x2b69e1=_0x35b5eb;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1066ac=SceneManager[_0x2b69e1(0x885)][_0x2b69e1(0x254)];if(!_0x1066ac)return;VisuMZ['ConvertParams'](_0x276d07,_0x276d07);const _0x25ef38=_0x276d07['X']||0x0,_0x2c96d6=_0x276d07['Y']||0x0,_0x323efe=_0x276d07['Strength']||0x0,_0x702e79=_0x276d07[_0x2b69e1(0x928)]||0x0,_0x5be336=_0x276d07['Duration']||0x1,_0x4a1b9d=_0x276d07[_0x2b69e1(0x66c)]||'Linear';_0x1066ac[_0x2b69e1(0x4e6)](_0x323efe,_0x25ef38,_0x2c96d6,_0x702e79,_0x5be336,_0x4a1b9d);}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x764),_0x4231be=>{const _0x35e31b=_0x35b5eb;if(!Imported[_0x35e31b(0x243)])return;const _0x5e3c7c=SceneManager['_scene']['_spriteset'];if(!_0x5e3c7c)return;VisuMZ[_0x35e31b(0x68f)](_0x4231be,_0x4231be);const _0xfeb89=VisuMZ[_0x35e31b(0x43c)](_0x4231be[_0x35e31b(0x1bf)]),_0x4320ca=_0x4231be[_0x35e31b(0x6c6)],_0x5e8487=_0x4231be[_0x35e31b(0x67f)]||0x0,_0x18991d=_0x4231be['OffsetY']||0x0,_0x44253f=_0x4231be[_0x35e31b(0x3f5)]||0x0,_0x5ebf93=_0x4231be['Radius']||0x0,_0x4da75c=_0x4231be[_0x35e31b(0x4a1)]||0x1,_0x508864=_0x4231be[_0x35e31b(0x66c)]||_0x35e31b(0x62b),_0xb666f6=Math['min'](..._0xfeb89[_0x35e31b(0x3dd)](_0x28fd83=>_0x28fd83[_0x35e31b(0x691)]()[_0x35e31b(0x74d)]-_0x28fd83['battler']()[_0x35e31b(0x667)]()/0x2)),_0x4d6675=Math[_0x35e31b(0x2a3)](..._0xfeb89[_0x35e31b(0x3dd)](_0x175b32=>_0x175b32[_0x35e31b(0x691)]()[_0x35e31b(0x74d)]+_0x175b32['battler']()[_0x35e31b(0x667)]()/0x2)),_0x2b4815=Math[_0x35e31b(0x4bc)](..._0xfeb89[_0x35e31b(0x3dd)](_0x3e64e1=>_0x3e64e1[_0x35e31b(0x691)]()[_0x35e31b(0x740)]-_0x3e64e1[_0x35e31b(0x691)]()[_0x35e31b(0x9d9)]())),_0x1551d8=Math[_0x35e31b(0x2a3)](..._0xfeb89[_0x35e31b(0x3dd)](_0x1d60a7=>_0x1d60a7[_0x35e31b(0x691)]()[_0x35e31b(0x740)])),_0x2fe48f=_0xfeb89[_0x35e31b(0x416)](_0x26f8e9=>_0x26f8e9[_0x35e31b(0xa6f)]())[_0x35e31b(0x1a0)],_0x52a43d=_0xfeb89['filter'](_0x4d5d37=>_0x4d5d37[_0x35e31b(0x65c)]())[_0x35e31b(0x1a0)];let _0x4cc157=0x0,_0x3b0428=0x0;if(_0x4320ca['match'](/front/i))_0x4cc157=_0x2fe48f>=_0x52a43d?_0xb666f6:_0x4d6675;else{if(_0x4320ca[_0x35e31b(0x111)](/middle/i))_0x35e31b(0x29e)===_0x35e31b(0x649)?_0x1ef982[_0x35e31b(0x73b)][_0x35e31b(0x4ae)][_0x35e31b(0x541)](this,_0x3964b7):(_0x4cc157=(_0xb666f6+_0x4d6675)/0x2,melee=-0x1);else _0x4320ca[_0x35e31b(0x111)](/back/i)&&(_0x4cc157=_0x2fe48f>=_0x52a43d?_0x4d6675:_0xb666f6);}if(_0x4320ca[_0x35e31b(0x111)](/head/i))_0x3b0428=_0x2b4815;else{if(_0x4320ca['match'](/center/i))_0x3b0428=(_0x2b4815+_0x1551d8)/0x2;else{if(_0x4320ca[_0x35e31b(0x111)](/base/i)){if('UunCy'!==_0x35e31b(0xad2))_0x3b0428=_0x1551d8;else{if(!this[_0x35e31b(0x5d3)]()['damage']['critical'])return 0x0;let _0x2c419f=_0x54f866[_0x35e31b(0x781)][_0x35e31b(0x3cb)][_0x35e31b(0x165)]['CriticalHitRateJS'][_0x35e31b(0x541)](this,_0x97691a);return _0x2c419f=this[_0x35e31b(0x6ed)][_0x35e31b(0x56c)]*_0x2c419f+this['_multipliers'][_0x35e31b(0x86e)],_0x2c419f;}}}}_0x4cc157+=(Graphics['width']-Graphics[_0x35e31b(0x1b4)])/0x2,_0x3b0428+=(Graphics[_0x35e31b(0x491)]-Graphics[_0x35e31b(0x197)])/0x2,_0x4cc157+=_0x5e8487,_0x3b0428+=_0x18991d,_0x5e3c7c[_0x35e31b(0x4e6)](_0x44253f,_0x4cc157,_0x3b0428,_0x5ebf93,_0x4da75c,_0x508864);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x2b8),_0x466b80=>{const _0x215c82=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x215c82(0x68f)](_0x466b80,_0x466b80);const _0x2f1519=$gameTemp[_0x215c82(0x657)](),_0x5f27ea=BattleManager[_0x215c82(0x495)],_0x1c3ebd=BattleManager[_0x215c82(0x785)],_0x26ab01=BattleManager['_logWindow'];if(!_0x2f1519||!_0x5f27ea||!_0x1c3ebd)return;if(!_0x5f27ea['item']())return;const _0x290040=VisuMZ[_0x215c82(0x43c)](_0x466b80[_0x215c82(0x1bf)]);for(const _0x5ed653 of _0x290040){if(_0x215c82(0x56e)!==_0x215c82(0xd9)){if(!_0x5ed653)continue;_0x26ab01[_0x215c82(0x7c7)](_0x215c82(0x3a3),_0x1c3ebd,_0x5ed653);}else{if(_0x4adb74[_0x215c82(0x68b)]!==_0x342b5e)return _0x38e076['_forcedBattleLayout'];if(this[_0x215c82(0x92d)])return this[_0x215c82(0x92d)];return this[_0x215c82(0x92d)]=_0x125f6d[_0x215c82(0x781)][_0x215c82(0x3cb)][_0x215c82(0x842)][_0x215c82(0x606)][_0x215c82(0x210)]()[_0x215c82(0x54d)](),this[_0x215c82(0x92d)]==='sideview_ui'&&!_0x34bdc6[_0x215c82(0x9b4)]&&(this[_0x215c82(0x92d)]=_0x215c82(0x472)),this[_0x215c82(0x92d)];}}_0x2f1519[_0x215c82(0x7fe)]('battlelog');}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Mechanics_AddBuffDebuff',_0x136413=>{const _0x2af8ed=_0x35b5eb;if(!SceneManager[_0x2af8ed(0x3a2)]())return;VisuMZ[_0x2af8ed(0x68f)](_0x136413,_0x136413);const _0x1c3b9b=[_0x2af8ed(0x31d),_0x2af8ed(0x6bf),_0x2af8ed(0x7cf),_0x2af8ed(0x4dd),_0x2af8ed(0x44a),_0x2af8ed(0x63d),_0x2af8ed(0x124),_0x2af8ed(0x8be)],_0x367263=_0x136413[_0x2af8ed(0x8a1)],_0x5adaab=_0x136413[_0x2af8ed(0xac8)],_0x1c7257=_0x136413[_0x2af8ed(0x4f8)],_0x901726=VisuMZ[_0x2af8ed(0x43c)](_0x136413[_0x2af8ed(0x1bf)]);for(const _0x4dc44e of _0x901726){if(_0x2af8ed(0x386)!==_0x2af8ed(0xaa4)){if(!_0x4dc44e)continue;for(const _0x3f4400 of _0x367263){if(_0x2af8ed(0x81f)!==_0x2af8ed(0x187)){const _0x22660a=_0x1c3b9b[_0x2af8ed(0x57e)](_0x3f4400[_0x2af8ed(0x3e7)]()[_0x2af8ed(0x54d)]());_0x22660a>=0x0&&_0x22660a<=0x7&&_0x4dc44e[_0x2af8ed(0x61d)](_0x22660a,_0x1c7257);}else _0x1fc4de[_0x2af8ed(0x9bd)](_0x2af8ed(0x6f9));}for(const _0x33a700 of _0x5adaab){const _0x83a293=_0x1c3b9b[_0x2af8ed(0x57e)](_0x33a700[_0x2af8ed(0x3e7)]()['trim']());_0x83a293>=0x0&&_0x83a293<=0x7&&_0x4dc44e['addDebuff'](_0x83a293,_0x1c7257);}}else this[_0x2af8ed(0x81e)]=_0x25f8fe;}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x1ae),_0x3f91f8=>{const _0x2ec23d=_0x35b5eb;if(!SceneManager[_0x2ec23d(0x3a2)]())return;VisuMZ[_0x2ec23d(0x68f)](_0x3f91f8,_0x3f91f8);const _0xb0d702=_0x3f91f8[_0x2ec23d(0x76a)],_0x18e140=VisuMZ[_0x2ec23d(0x43c)](_0x3f91f8[_0x2ec23d(0x1bf)]);for(const _0x531f44 of _0x18e140){if(!_0x531f44)continue;for(const _0x2655b5 of _0xb0d702){_0x531f44[_0x2ec23d(0x9b7)](_0x2655b5);}}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],'ActSeq_Mechanics_ArmorPenetration',_0x20fd31=>{const _0x17bdeb=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x20fd31,_0x20fd31);const _0x2c3b3c=BattleManager['_action'],_0x1da6a1={'arPenRate':_0x20fd31[_0x17bdeb(0x3c6)],'arPenFlat':_0x20fd31['ArPenFlat'],'arRedRate':_0x20fd31[_0x17bdeb(0x702)],'arRedFlat':_0x20fd31[_0x17bdeb(0xaa9)]};_0x2c3b3c[_0x17bdeb(0x6c0)]=_0x1da6a1;}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x9e9),_0x17a02a=>{const _0x45555a=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x45555a(0x773)])return;VisuMZ['ConvertParams'](_0x17a02a,_0x17a02a);const _0x3e9131=VisuMZ[_0x45555a(0x43c)](_0x17a02a['Targets']),_0x45877f=_0x17a02a[_0x45555a(0x515)]||0x1;for(const _0x79d8ac of _0x3e9131){if('QfEKp'!==_0x45555a(0x9c4))return![];else{if(!_0x79d8ac)continue;if(!_0x79d8ac[_0x45555a(0x65c)]())continue;_0x79d8ac[_0x45555a(0x738)](_0x45877f);}}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],'ActSeq_Mechanics_AtbGauge',_0x43a78e=>{const _0x3af6d6=_0x35b5eb;if(!SceneManager[_0x3af6d6(0x3a2)]())return;if(!Imported[_0x3af6d6(0x8e3)])return;if(!BattleManager[_0x3af6d6(0x4c7)]())return;VisuMZ[_0x3af6d6(0x68f)](_0x43a78e,_0x43a78e);const _0xad57e4=VisuMZ[_0x3af6d6(0x43c)](_0x43a78e[_0x3af6d6(0x1bf)]),_0x71a107=_0x43a78e['ChargeRate'],_0x1c346d=_0x43a78e[_0x3af6d6(0x81a)],_0x4fad3c=_0x43a78e[_0x3af6d6(0x48c)];for(const _0x162d4c of _0xad57e4){if('okwCd'!==_0x3af6d6(0x935))this[_0x3af6d6(0x7c7)]('clearActiveWeaponSet',_0x30cd58);else{if(!_0x162d4c)continue;if(_0x162d4c['isAtbChargingState']())_0x162d4c[_0x3af6d6(0x8a6)](_0x71a107);else{if(_0x162d4c['isAtbCastingState']()){_0x162d4c[_0x3af6d6(0x169)](_0x1c346d);if(_0x4fad3c)_0x162d4c['atbInterrupt']();}}}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x9a7),_0xcd1d83=>{const _0x494174=_0x35b5eb;if(!SceneManager[_0x494174(0x3a2)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x494174(0x68f)](_0xcd1d83,_0xcd1d83);const _0x4f225a=VisuMZ[_0x494174(0x43c)](_0xcd1d83[_0x494174(0x1bf)]),_0x16fe27=_0xcd1d83[_0x494174(0x2a9)];for(const _0xfbcb9d of _0x4f225a){if('aRtTP'!==_0x494174(0x1dc)){if(!this[_0x494174(0x238)][_0x494174(0x5f2)](_0x5e9258['id']))return![];}else{if(!_0xfbcb9d)continue;_0xfbcb9d[_0x494174(0x688)](_0x16fe27);}}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x110),_0x3abff0=>{const _0x2cbb46=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2cbb46(0x3ac)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x2cbb46(0x68f)](_0x3abff0,_0x3abff0);const _0x9faaf9=_0x3abff0[_0x2cbb46(0xace)];$gameVariables[_0x2cbb46(0x92e)](_0x9faaf9,BattleManager[_0x2cbb46(0x785)][_0x2cbb46(0x12d)]());}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x23a),_0x33625b=>{const _0x5a29e2=_0x35b5eb;if(!SceneManager[_0x5a29e2(0x3a2)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x5a29e2(0x68f)](_0x33625b,_0x33625b);const _0x1cb50a=VisuMZ['CreateActionSequenceTargets'](_0x33625b['Targets']),_0x3acea2=_0x33625b[_0x5a29e2(0x337)];for(const _0x2498a5 of _0x1cb50a){if(_0x5a29e2(0x8eb)===_0x5a29e2(0x223)){const _0x33c89d=_0x2752f7(_0x5e1e9a['$1']);return[_0x131625[_0x5a29e2(0x5ce)]()[_0x5a29e2(0x7ba)]()[_0x33c89d]];}else{if(!_0x2498a5)continue;if(_0x2498a5[_0x5a29e2(0x7e3)]())continue;if(!_0x2498a5['isAffectedByBreakShield']())continue;_0x2498a5[_0x5a29e2(0x804)](_0x3acea2);}}}),PluginManager['registerCommand'](pluginData['name'],_0x35b5eb(0x1e2),_0x30d33c=>{const _0x193aca=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x193aca(0x68f)](_0x30d33c,_0x30d33c);const _0xabaf15=VisuMZ[_0x193aca(0x43c)](_0x30d33c[_0x193aca(0x1bf)]);for(const _0x5e0c5e of _0xabaf15){if(_0x193aca(0x9cb)!=='KxjHy'){if(!_0x5e0c5e)continue;if(_0x5e0c5e[_0x193aca(0x7e3)]())continue;if(!_0x5e0c5e['isAffectedByBreakShield']())continue;_0x5e0c5e[_0x193aca(0x788)]();}else{const _0x3fcd13=_0xe5a728[_0x193aca(0x57e)](_0x4e4be5[_0x193aca(0x3e7)]()[_0x193aca(0x54d)]());_0x3fcd13>=0x0&&_0x3fcd13<=0x7&&_0x1ca889[_0x193aca(0xa53)](_0x3fcd13)&&_0x59addb['removeBuff'](_0x3fcd13);}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x2b0),_0x3170f0=>{const _0x50bef5=_0x35b5eb;if(!SceneManager[_0x50bef5(0x3a2)]())return;if(!Imported[_0x50bef5(0x697)])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x50bef5(0x68f)](_0x3170f0,_0x3170f0);const _0x45283d=VisuMZ['CreateActionSequenceTargets'](_0x3170f0[_0x50bef5(0x1bf)]),_0x60cc87=_0x3170f0[_0x50bef5(0xaa3)];for(const _0x35a8dd of _0x45283d){if(!_0x35a8dd)continue;_0x35a8dd[_0x50bef5(0x925)](_0x60cc87);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Mechanics_Collapse',_0x5154ec=>{const _0xaad3cf=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xaad3cf(0x68f)](_0x5154ec,_0x5154ec);const _0x55409a=$gameTemp[_0xaad3cf(0x657)](),_0x105038=BattleManager[_0xaad3cf(0x495)],_0x16598e=BattleManager[_0xaad3cf(0x785)];if(!_0x55409a||!_0x105038||!_0x16598e)return;if(!_0x105038[_0xaad3cf(0x5d3)]())return;const _0x1f7eee=VisuMZ[_0xaad3cf(0x43c)](_0x5154ec[_0xaad3cf(0x1bf)]);for(const _0x57e4cf of _0x1f7eee){if(!_0x57e4cf)continue;_0x5154ec[_0xaad3cf(0x9c7)]&&(_0x57e4cf[_0xaad3cf(0x30c)](),_0x57e4cf['addState'](_0x57e4cf[_0xaad3cf(0x7dd)]())),_0x57e4cf['isDeathStateAffected']()&&_0x57e4cf[_0xaad3cf(0x620)]();}_0x55409a[_0xaad3cf(0x7fe)]('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x5f7),_0x4a8116=>{const _0x1ae222=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1ae222(0xa9e)])return;if(!BattleManager[_0x1ae222(0x311)]())return;VisuMZ[_0x1ae222(0x68f)](_0x4a8116,_0x4a8116);const _0xdb6d97=VisuMZ[_0x1ae222(0x43c)](_0x4a8116['Targets']),_0x3c2355=_0x4a8116[_0x1ae222(0x6c3)];for(const _0x52bef9 of _0xdb6d97){if('YYjat'!=='YYjat'){const _0x203f8c=this[_0x1ae222(0x239)](),_0x30e397=_0x2a4995[_0x1ae222(0x781)][_0x1ae222(0x3cb)]['PartyCmd']['CmdIconFight'],_0x48d1b8=_0x203f8c===_0x1ae222(0x863)?_0x4f0d27[_0x1ae222(0x5e3)]:'\x5cI[%1]%2'[_0x1ae222(0x4ed)](_0x30e397,_0x2b06a5[_0x1ae222(0x5e3)]),_0x470bd1=this[_0x1ae222(0xa94)]();this[_0x1ae222(0x675)](_0x48d1b8,'fight',_0x470bd1);}else{if(!_0x52bef9)continue;_0x52bef9[_0x1ae222(0x1ed)](_0x3c2355);}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x37e),_0x4289e5=>{const _0x331c72=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x331c72(0xa9e)])return;if(!BattleManager[_0x331c72(0x311)]())return;VisuMZ[_0x331c72(0x68f)](_0x4289e5,_0x4289e5);const _0x1885ac=VisuMZ[_0x331c72(0x43c)](_0x4289e5[_0x331c72(0x1bf)]),_0x112251=_0x4289e5[_0x331c72(0x81a)],_0x39124f=_0x4289e5[_0x331c72(0x81a)];for(const _0x2e539b of _0x1885ac){if(_0x331c72(0x73f)!=='mgPDM')_0x38c022+=_0xc831b2(_0x56d0fd['$1']);else{if(!_0x2e539b)continue;if(_0x2e539b[_0x331c72(0x560)]===_0x331c72(0x61c))_0x2e539b[_0x331c72(0x10c)](_0x112251);else _0x2e539b[_0x331c72(0x560)]===_0x331c72(0x77a)&&_0x2e539b[_0x331c72(0x318)](_0x39124f);}}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Mechanics_CustomDmgFormula',_0x55b911=>{const _0x4ad3ad=_0x35b5eb;if(!SceneManager[_0x4ad3ad(0x3a2)]())return;VisuMZ[_0x4ad3ad(0x68f)](_0x55b911,_0x55b911);const _0xbd2820=BattleManager[_0x4ad3ad(0x495)];if(!_0xbd2820)return;let _0x57dd6b=_0x55b911[_0x4ad3ad(0xac2)];_0xbd2820[_0x4ad3ad(0x49c)](_0x57dd6b);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x774),_0x2b6362=>{const _0x233204=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x233204(0x68f)](_0x2b6362,_0x2b6362);const _0xa2d850=VisuMZ[_0x233204(0x43c)](_0x2b6362[_0x233204(0x1bf)]);for(const _0x21b9f3 of _0xa2d850){if('gdzob'!=='LKfUE'){if(!_0x21b9f3)continue;if(_0x21b9f3[_0x233204(0x4b4)]())_0x21b9f3[_0x233204(0x63f)]();}else return _0x5ba111[_0x233204(0x5ce)]()[_0x233204(0x12b)]()[_0x233204(0x416)](_0x30c08e=>_0x30c08e!==_0x26dab0);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x414),_0x2a75c1=>{const _0x4c2b8e=_0x35b5eb;if(!SceneManager[_0x4c2b8e(0x3a2)]())return;VisuMZ[_0x4c2b8e(0x68f)](_0x2a75c1,_0x2a75c1);const _0x5c2958=$gameTemp[_0x4c2b8e(0x657)](),_0xb02f8f=BattleManager['_subject'],_0x4146ae=_0x2a75c1[_0x4c2b8e(0x8ec)];if(!_0x5c2958)return;if(!_0xb02f8f)return;_0xb02f8f&&_0xb02f8f['isDead']()&&_0x4146ae[_0x4c2b8e(0x3e7)]()[_0x4c2b8e(0x54d)]()!=='UNTITLED'&&(_0x4c2b8e(0xb1b)===_0x4c2b8e(0x5d7)?(_0x575813=_0x5555d0['filter']((_0x3b9b42,_0x39174b,_0x33ef43)=>_0x33ef43['indexOf'](_0x3b9b42)===_0x39174b),_0x2859ab[_0x4c2b8e(0x3a2)]()&&_0x3e4f3b[_0x4c2b8e(0x725)]()&&(_0x1f8596=!_0xf243ff),_0x17ffaa[_0x4c2b8e(0x781)][_0x4c2b8e(0x26a)][_0x4c2b8e(0x541)](this,_0x567638,_0x478d1b,_0x4666be),_0x578cb4['isSceneBattle']()&&_0x3a816a[_0x4c2b8e(0x254)][_0x4c2b8e(0x555)]()):_0x5c2958[_0x4c2b8e(0x5fd)]([_0x4146ae]));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x74b),_0x2597c2=>{const _0x5a1a91=_0x35b5eb;if(!SceneManager[_0x5a1a91(0x3a2)]())return;VisuMZ[_0x5a1a91(0x68f)](_0x2597c2,_0x2597c2);const _0x3d92b6=VisuMZ[_0x5a1a91(0x43c)](_0x2597c2[_0x5a1a91(0x1bf)]);for(const _0x16a53f of _0x3d92b6){if(_0x5a1a91(0x3c3)==='Exhhp')this['_animationSprites'][_0x5a1a91(0x4e8)](_0x58bd6f),this[_0x5a1a91(0x52d)](_0x4eb2a3)?this[_0x5a1a91(0x6ab)]()[_0x5a1a91(0x798)](_0x464744):this[_0x5a1a91(0x173)][_0x5a1a91(0x798)](_0x4df71b);else{if(!_0x16a53f)continue;if(!_0x16a53f[_0x5a1a91(0x65c)]())continue;_0x16a53f[_0x5a1a91(0x921)]();}}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x324),_0x7d61bf=>{const _0x1fe51d=_0x35b5eb;if(!SceneManager[_0x1fe51d(0x3a2)]())return;if(!Imported[_0x1fe51d(0xb28)])return;if(!BattleManager[_0x1fe51d(0x31b)]())return;VisuMZ['ConvertParams'](_0x7d61bf,_0x7d61bf);const _0x164d58=_0x7d61bf['ActionCount'];BattleManager[_0x1fe51d(0x785)]&&BattleManager[_0x1fe51d(0x785)][_0x1fe51d(0xa91)]()[_0x1fe51d(0x8ae)](_0x164d58);}),PluginManager['registerCommand'](pluginData['name'],_0x35b5eb(0x5c8),_0x37ec7a=>{const _0x289f78=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x289f78(0xa1c)])return;if(!BattleManager[_0x289f78(0x60b)]())return;VisuMZ['ConvertParams'](_0x37ec7a,_0x37ec7a);const _0x23ea49=_0x37ec7a[_0x289f78(0xabc)];BattleManager[_0x289f78(0x785)]&&BattleManager[_0x289f78(0x785)][_0x289f78(0xa91)]()[_0x289f78(0xbc)](_0x23ea49);}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Mechanics_HpMpTp',_0x459115=>{const _0x3c8197=_0x35b5eb;if(!SceneManager[_0x3c8197(0x3a2)]())return;VisuMZ[_0x3c8197(0x68f)](_0x459115,_0x459115);const _0x2953ac=VisuMZ[_0x3c8197(0x43c)](_0x459115['Targets']),_0x517c79=_0x459115['HP_Rate'],_0x3d0bbf=_0x459115[_0x3c8197(0x351)],_0x1ef7b2=_0x459115[_0x3c8197(0x45b)],_0x16a31b=_0x459115[_0x3c8197(0x1f7)],_0x3319d0=_0x459115['TP_Rate'],_0x22ee4a=_0x459115[_0x3c8197(0x615)],_0x53d74a=_0x459115[_0x3c8197(0x957)];for(const _0x5d8097 of _0x2953ac){if(_0x3c8197(0x33a)!=='AYmbl'){if(!_0x5d8097)continue;const _0x11cba0=_0x5d8097['isAlive'](),_0x51a39f=Math[_0x3c8197(0x3d5)](_0x517c79*_0x5d8097[_0x3c8197(0x4d4)]+_0x3d0bbf),_0x3636c0=Math['round'](_0x1ef7b2*_0x5d8097['mmp']+_0x16a31b),_0x1937ca=Math[_0x3c8197(0x3d5)](_0x3319d0*_0x5d8097['maxTp']()+_0x22ee4a);if(_0x51a39f!==0x0)_0x5d8097[_0x3c8197(0xab9)](_0x51a39f);if(_0x3636c0!==0x0)_0x5d8097[_0x3c8197(0x33d)](_0x3636c0);if(_0x1937ca!==0x0)_0x5d8097['gainTp'](_0x1937ca);if(_0x53d74a)_0x5d8097[_0x3c8197(0x63f)]();_0x11cba0&&_0x5d8097[_0x3c8197(0x1b2)]()&&_0x5d8097[_0x3c8197(0x620)]();}else return _0x20fc25['isSceneBattle']()?(_0x50d014[_0x3c8197(0x885)][_0x3c8197(0x254)][_0x3c8197(0x9f1)](_0x2c8b1d[0x0],_0x5c36be[0x1]),!![]):_0x50e7b5[_0x3c8197(0x781)][_0x3c8197(0x6f7)][_0x3c8197(0x541)](this,_0x276456);}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x1b7),_0x2a1a16=>{const _0x5048c5=_0x35b5eb;if(!SceneManager[_0x5048c5(0x3a2)]())return;VisuMZ['ConvertParams'](_0x2a1a16,_0x2a1a16);const _0x2d641b=VisuMZ[_0x5048c5(0x43c)](_0x2a1a16[_0x5048c5(0x1bf)]);for(const _0x2abf3e of _0x2d641b){if(!_0x2abf3e)continue;_0x2abf3e[_0x5048c5(0x68c)](_0x2a1a16[_0x5048c5(0x199)]);}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x8f8),_0x561392=>{const _0x10e70f=_0x35b5eb;if(!SceneManager[_0x10e70f(0x3a2)]())return;VisuMZ['ConvertParams'](_0x561392,_0x561392);const _0xbbd012=BattleManager[_0x10e70f(0x495)],_0x29abd2={'criticalHitRate':_0x561392[_0x10e70f(0x900)],'criticalHitFlat':_0x561392[_0x10e70f(0x929)],'criticalDmgRate':_0x561392['CriticalDmgRate'],'criticalDmgFlat':_0x561392['CriticalDmgFlat'],'damageRate':_0x561392[_0x10e70f(0x2f4)],'damageFlat':_0x561392[_0x10e70f(0x55a)],'hitRate':_0x561392['HitRate'],'hitFlat':_0x561392['HitFlat']};_0xbbd012['_multipliers']=_0x29abd2;}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x2e7),_0xe90d14=>{const _0x32a80e=_0x35b5eb;if(!SceneManager[_0x32a80e(0x3a2)]())return;VisuMZ['ConvertParams'](_0xe90d14,_0xe90d14);const _0x38de07=_0xe90d14[_0x32a80e(0x9e7)];SceneManager[_0x32a80e(0x885)]['playOnceParallelInterpreter'](_0x38de07);}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x4c9),_0xeb7b8e=>{const _0x2b66af=_0x35b5eb;if(!SceneManager[_0x2b66af(0x3a2)]())return;if(!Imported[_0x2b66af(0x588)])return;if(!BattleManager[_0x2b66af(0x170)]())return;VisuMZ[_0x2b66af(0x68f)](_0xeb7b8e,_0xeb7b8e);const _0x37f3f6=VisuMZ[_0x2b66af(0x43c)](_0xeb7b8e[_0x2b66af(0x1bf)]);for(const _0x348f29 of _0x37f3f6){if(!_0x348f29)continue;let _0x238bcc=_0xeb7b8e[_0x2b66af(0xa04)],_0x3e51b3=_0xeb7b8e['NextTurn'],_0x404d0e=_0xeb7b8e[_0x2b66af(0x76f)];BattleManager[_0x2b66af(0xa6a)][_0x2b66af(0x87d)](_0x348f29)?_0x238bcc+=_0x404d0e:_0x2b66af(0x990)!==_0x2b66af(0x7cb)?_0x3e51b3+=_0x404d0e:this[_0x2b66af(0x80b)]=_0x516296,BattleManager[_0x2b66af(0x297)](_0x348f29,-_0x238bcc,![]),BattleManager[_0x2b66af(0x297)](_0x348f29,-_0x3e51b3,!![]);}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x287),_0x2e88e9=>{const _0x4ad1b4=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4ad1b4(0x329)])return;if(!BattleManager[_0x4ad1b4(0x7b4)]())return;VisuMZ[_0x4ad1b4(0x68f)](_0x2e88e9,_0x2e88e9);const _0x2bab90=BattleManager[_0x4ad1b4(0x785)][_0x4ad1b4(0xa91)](),_0x5386a8=_0x2e88e9[_0x4ad1b4(0x991)],_0x1c20b1=_0x2e88e9[_0x4ad1b4(0x6a0)]||_0x4ad1b4(0x3b0),_0x43e100=_0x2e88e9[_0x4ad1b4(0xaab)]||_0x4ad1b4(0x3b0),_0x59cfdb=_0x2e88e9[_0x4ad1b4(0x754)]||0x0,_0x61918c=_0x2e88e9[_0x4ad1b4(0x656)]||0x0;if(_0x2bab90[_0x4ad1b4(0x625)]()||_0x5386a8){if(_0x4ad1b4(0x9db)===_0x4ad1b4(0x9db)){if(_0x5386a8){if('ueFWl'!==_0x4ad1b4(0x166)){if(!_0x2174be['BattleCore'][_0x4ad1b4(0x3cb)][_0x4ad1b4(0x141)][_0x4ad1b4(0x424)])return;_0x56c381[_0x4ad1b4(0x781)][_0x4ad1b4(0x9b5)][_0x4ad1b4(0x541)](this,_0xb780ec);}else _0x2bab90[_0x4ad1b4(0xd3)]=_0x2bab90[_0x4ad1b4(0xd3)]||{},_0x2bab90['_ptbActionCost'][_0x4ad1b4(0x517)]=0x0;}_0x2bab90[_0x4ad1b4(0x230)](_0x1c20b1,_0x43e100,_0x59cfdb,_0x61918c);}else this[_0x4ad1b4(0x1c4)]=this[_0x4ad1b4(0x1c4)]??0x1,this['_shadowScaleY']=this[_0x4ad1b4(0xa8d)]??0x1,this['_shadowSprite'][_0x4ad1b4(0xac1)]['x']=this[_0x4ad1b4(0xa26)][_0x4ad1b4(0xac1)]['x']*this[_0x4ad1b4(0x1c4)],this['_shadowSprite']['scale']['y']=this[_0x4ad1b4(0xa26)]['scale']['y']*this['_shadowScaleY'];}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x1d6),_0x3d2446=>{const _0x2b5c38=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x2b5c38(0x68f)](_0x3d2446,_0x3d2446);const _0x327ead=BattleManager[_0x2b5c38(0x785)][_0x2b5c38(0xa91)]();let _0x14b685=Math[_0x2b5c38(0x2a3)](_0x3d2446[_0x2b5c38(0x9ba)],0x0),_0x59db31=_0x327ead[_0x2b5c38(0x6e4)](),_0x5b1f9d=_0x327ead['getHalfActionsPTB']();while(_0x14b685--){if(_0x59db31<=0x0&&_0x5b1f9d<=0x0)break;else _0x59db31>0x0?(_0x59db31--,_0x5b1f9d++):_0x5b1f9d--;}_0x327ead[_0x2b5c38(0xfd)](_0x59db31),_0x327ead[_0x2b5c38(0xb3f)](_0x5b1f9d);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xf1),_0x53a4c2=>{const _0x28ecad=_0x35b5eb;if(!SceneManager[_0x28ecad(0x3a2)]())return;if(!Imported[_0x28ecad(0x329)])return;if(!BattleManager[_0x28ecad(0x7b4)]())return;VisuMZ['ConvertParams'](_0x53a4c2,_0x53a4c2);const _0x4a9c61=BattleManager[_0x28ecad(0x785)][_0x28ecad(0xa91)]();let _0x4aaf51=_0x53a4c2[_0x28ecad(0x10f)],_0xbc24ec=_0x53a4c2['HalfActions'];_0x4a9c61[_0x28ecad(0xa9a)](_0x4aaf51),_0x4a9c61['gainHalfActionsPTB'](_0xbc24ec);}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x40d),_0x11b620=>{const _0x6ad38d=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x6ad38d(0x68f)](_0x11b620,_0x11b620);const _0x382341=['MAXHP','MAXMP',_0x6ad38d(0x7cf),'DEF',_0x6ad38d(0x44a),_0x6ad38d(0x63d),_0x6ad38d(0x124),_0x6ad38d(0x8be)],_0x348b3a=_0x11b620[_0x6ad38d(0x8a1)],_0x53a1b6=_0x11b620[_0x6ad38d(0xac8)],_0x30c814=VisuMZ[_0x6ad38d(0x43c)](_0x11b620[_0x6ad38d(0x1bf)]);for(const _0x88426e of _0x30c814){if(_0x6ad38d(0x629)===_0x6ad38d(0x70e))_0x277aca[_0x6ad38d(0x620)]();else{if(!_0x88426e)continue;for(const _0x38c1f3 of _0x348b3a){const _0x5d5d1f=_0x382341['indexOf'](_0x38c1f3[_0x6ad38d(0x3e7)]()[_0x6ad38d(0x54d)]());_0x5d5d1f>=0x0&&_0x5d5d1f<=0x7&&_0x88426e[_0x6ad38d(0xa53)](_0x5d5d1f)&&_0x88426e[_0x6ad38d(0x1ce)](_0x5d5d1f);}for(const _0x2b12de of _0x53a1b6){if(_0x6ad38d(0x41a)===_0x6ad38d(0x41a)){const _0x3bdf28=_0x382341['indexOf'](_0x2b12de[_0x6ad38d(0x3e7)]()[_0x6ad38d(0x54d)]());_0x3bdf28>=0x0&&_0x3bdf28<=0x7&&_0x88426e[_0x6ad38d(0x6f8)](_0x3bdf28)&&_0x88426e[_0x6ad38d(0x1ce)](_0x3bdf28);}else _0x11bbfc[_0x552140]=0x1,_0xb99b34++;}}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Mechanics_RemoveState',_0x58be84=>{const _0x250c7c=_0x35b5eb;if(!SceneManager[_0x250c7c(0x3a2)]())return;VisuMZ[_0x250c7c(0x68f)](_0x58be84,_0x58be84);const _0x4d8761=_0x58be84[_0x250c7c(0x76a)],_0x5f567f=VisuMZ[_0x250c7c(0x43c)](_0x58be84[_0x250c7c(0x1bf)]);for(const _0x12d993 of _0x5f567f){if(_0x250c7c(0x395)===_0x250c7c(0x395)){if(!_0x12d993)continue;for(const _0x594c6a of _0x4d8761){_0x12d993[_0x250c7c(0x1e9)](_0x594c6a);}}else _0x3cd2e3['prototype']['performEvasion'][_0x250c7c(0x541)](this),this[_0x250c7c(0x67a)](_0x250c7c(0x303));}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Mechanics_StbExploit',_0x377991=>{const _0x116742=_0x35b5eb;if(!SceneManager[_0x116742(0x3a2)]())return;if(!Imported[_0x116742(0x74e)])return;if(!BattleManager[_0x116742(0xaef)]())return;VisuMZ[_0x116742(0x68f)](_0x377991,_0x377991);const _0x5b11a=_0x377991[_0x116742(0x3b1)],_0xa03083=VisuMZ[_0x116742(0x43c)](_0x377991['Targets']),_0x4524c0=_0x377991['ForceExploited'],_0x18ca37=_0x377991['Exploiter'],_0x1bf83a=_0x377991['ForceExploiter'],_0x18d6f1=BattleManager[_0x116742(0x495)];if(_0x5b11a)for(const _0x5b6ede of _0xa03083){if(!_0x5b6ede)continue;if(_0x5b6ede===user)continue;if(_0x4524c0)_0x5b6ede[_0x116742(0x95e)](![]);_0x5b6ede[_0x116742(0x580)](BattleManager[_0x116742(0x785)],_0x18d6f1);}if(_0x18ca37&&BattleManager[_0x116742(0x785)]){if(_0x116742(0x1aa)!==_0x116742(0x1aa)){if(!_0x211d16['BattleCore'][_0x116742(0x3cb)][_0x116742(0x842)][_0x116742(0x5f6)])return;const _0x3feedb=this['actor'](_0x10bc9b),_0x151461=this[_0x116742(0x52a)](_0x5898af);_0x151461['width']=_0x3035d6[_0x116742(0x981)],_0x151461[_0x116742(0x491)]-=0x2,this[_0x116742(0x91d)](_0x3feedb,_0x151461['x']+0x1,_0x151461['y']+0x1,_0x151461[_0x116742(0x91c)],_0x151461[_0x116742(0x491)]);}else{if(_0x1bf83a)BattleManager[_0x116742(0x785)][_0x116742(0x95e)](![]);const _0x15bc11=_0xa03083[0x0];BattleManager[_0x116742(0x133)](_0x15bc11,_0x18d6f1);}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xb09),_0xdfd750=>{const _0x4c71d5=_0x35b5eb;if(!SceneManager[_0x4c71d5(0x3a2)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4c71d5(0xaef)]())return;VisuMZ['ConvertParams'](_0xdfd750,_0xdfd750);const _0x4ce9b4=_0xdfd750['Actions'];BattleManager['_subject']&&(_0x4c71d5(0x5ef)==='YSsJN'?_0x2c6421[_0x4c71d5(0x7c7)](_0x22ad58[_0x4c71d5(0x595)]()):BattleManager[_0x4c71d5(0x785)][_0x4c71d5(0x524)](_0x4ce9b4));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x55c),_0x1c8342=>{const _0x5408fd=_0x35b5eb;if(!SceneManager[_0x5408fd(0x3a2)]())return;if(!Imported[_0x5408fd(0x74e)])return;if(!BattleManager[_0x5408fd(0xaef)]())return;VisuMZ['ConvertParams'](_0x1c8342,_0x1c8342);let _0x1b634e=_0x1c8342[_0x5408fd(0x4d2)];if(BattleManager[_0x5408fd(0x785)]){BattleManager[_0x5408fd(0x785)][_0x5408fd(0x113)]=BattleManager[_0x5408fd(0x785)][_0x5408fd(0x113)]||[];while(_0x1b634e--){if(BattleManager[_0x5408fd(0x785)][_0x5408fd(0x113)][_0x5408fd(0x1a0)]<=0x0)break;BattleManager[_0x5408fd(0x785)][_0x5408fd(0x113)][_0x5408fd(0x751)]();}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xa21),_0x5e60ec=>{const _0x32ba4b=_0x35b5eb;if(!SceneManager[_0x32ba4b(0x3a2)]())return;if(!Imported[_0x32ba4b(0x833)])return;VisuMZ[_0x32ba4b(0x68f)](_0x5e60ec,_0x5e60ec);const _0x4a8230=VisuMZ['CreateActionSequenceTargets'](_0x5e60ec[_0x32ba4b(0x1bf)]),_0x2a57e8=_0x5e60ec[_0x32ba4b(0x45f)];for(const _0x48ae91 of _0x4a8230){if(!_0x48ae91)continue;if(!_0x48ae91[_0x32ba4b(0xa6f)]())continue;_0x48ae91[_0x32ba4b(0x77e)](_0x2a57e8);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xa2b),_0x5016b7=>{const _0x128c18=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x128c18(0x68f)](_0x5016b7,_0x5016b7);const _0x2c5499=VisuMZ[_0x128c18(0x43c)](_0x5016b7[_0x128c18(0x1bf)]),_0x1ce2b1=_0x5016b7[_0x128c18(0x9d3)],_0x38c40d={'textColor':ColorManager[_0x128c18(0xa7e)](_0x5016b7['TextColor']),'flashColor':_0x5016b7[_0x128c18(0x4d8)],'flashDuration':_0x5016b7['FlashDuration']};for(const _0x1acd4c of _0x2c5499){if(_0x128c18(0x445)!==_0x128c18(0x445)){const _0x5e9aab=_0x102b62[_0x128c18(0x622)](_0x3314b1);_0x5e9aab[_0x128c18(0x2cd)]=![],_0x5e9aab[_0x128c18(0xaee)]=![],_0x5e9aab[_0x128c18(0x1ee)]=0x0,this[_0x128c18(0x89c)][_0x128c18(0x7c7)](_0x5e9aab);}else{if(!_0x1acd4c)continue;_0x1acd4c[_0x128c18(0x448)](_0x1ce2b1,_0x38c40d);}}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0xa06),_0x58f66e=>{const _0x22a555=_0x35b5eb;if(!SceneManager[_0x22a555(0x3a2)]())return;VisuMZ[_0x22a555(0x68f)](_0x58f66e,_0x58f66e);const _0x3ba5d5=VisuMZ['CreateActionSequenceTargets'](_0x58f66e[_0x22a555(0x1bf)]);let _0x190ca2=$gameVariables[_0x22a555(0x3d1)](_0x58f66e[_0x22a555(0x3cd)]);Imported[_0x22a555(0x268)]&&_0x58f66e['DigitGrouping']&&(_0x190ca2=VisuMZ[_0x22a555(0x3f1)](_0x190ca2));const _0x5d80ba=String(_0x190ca2),_0x30dbc0={'textColor':ColorManager[_0x22a555(0xa7e)](_0x58f66e[_0x22a555(0x882)]),'flashColor':_0x58f66e[_0x22a555(0x4d8)],'flashDuration':_0x58f66e['FlashDuration']};for(const _0x296a49 of _0x3ba5d5){if(!_0x296a49)continue;_0x296a49[_0x22a555(0x448)](_0x5d80ba,_0x30dbc0);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Mechanics_WaitForEffect',_0x2480ef=>{const _0x9ace07=_0x35b5eb;if(!SceneManager[_0x9ace07(0x3a2)]())return;const _0xc6d1c9=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xc6d1c9)return;_0xc6d1c9[_0x9ace07(0x7fe)]('battleEffect');}),PluginManager['registerCommand'](pluginData['name'],_0x35b5eb(0x5c6),_0x327770=>{const _0x293b5c=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x327770,_0x327770);const _0x52c000=VisuMZ[_0x293b5c(0x43c)](_0x327770[_0x293b5c(0x1bf)]);for(const _0x12b167 of _0x52c000){if(!_0x12b167)continue;_0x12b167[_0x293b5c(0x48a)]();}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x8cc),_0x368adc=>{const _0x34da3e=_0x35b5eb;if(!SceneManager[_0x34da3e(0x3a2)]())return;VisuMZ[_0x34da3e(0x68f)](_0x368adc,_0x368adc);const _0x3d27e5=VisuMZ[_0x34da3e(0x43c)](_0x368adc[_0x34da3e(0x1bf)]),_0x3263ac=_0x368adc[_0x34da3e(0x6ad)][_0x34da3e(0x210)]()[_0x34da3e(0x54d)]();let _0x422977=_0x368adc['ShowWeapon'];const _0x46f9b7=_0x368adc[_0x34da3e(0x162)];![_0x34da3e(0x8c1),_0x34da3e(0x535),_0x34da3e(0xab5),_0x34da3e(0x8e8)][_0x34da3e(0x87d)](_0x3263ac)&&('CZbdF'!==_0x34da3e(0x7f8)?_0x5c153c-=_0x40161b[_0x34da3e(0x9d9)]():_0x422977=![]);for(const _0x2f420b of _0x3d27e5){if(!_0x2f420b)continue;_0x2f420b[_0x34da3e(0x4f0)](_0x3263ac,_0x422977,_0x46f9b7);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x9f9),_0x50ca60=>{const _0x41fc0f=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x41fc0f(0x68f)](_0x50ca60,_0x50ca60);const _0x5dadd9=VisuMZ[_0x41fc0f(0x43c)](_0x50ca60[_0x41fc0f(0x1bf)]),_0x3d574b=_0x50ca60['MotionType']['toLowerCase']()[_0x41fc0f(0x54d)](),_0xe77d08=_0x50ca60[_0x41fc0f(0x25b)];for(const _0x5407b4 of _0x5dadd9){if(!_0x5407b4)continue;if(_0x3d574b[_0x41fc0f(0x111)](/ATTACK[ ](\d+)/i))_0x5407b4[_0x41fc0f(0xa58)](Number(RegExp['$1']));else{if(_0x3d574b===_0x41fc0f(0x8c1))_0x41fc0f(0x4cd)===_0x41fc0f(0x7d9)?this[_0x41fc0f(0x2a1)]():_0x5407b4[_0x41fc0f(0x9ec)]();else{if('YHEBq'!==_0x41fc0f(0x47d))_0x5407b4[_0x41fc0f(0x67a)](_0x3d574b);else{if(_0x7a5264['ActionSkillMsg1'])this[_0x41fc0f(0x619)](_0x386b32[_0x41fc0f(0x988)],_0x3f9d09,_0x3897a7);if(_0x236ded[_0x41fc0f(0x34a)])this[_0x41fc0f(0x619)](_0x362473[_0x41fc0f(0x766)],_0x400084,_0x252ab7);}}}if(!_0xe77d08)_0x41fc0f(0x4c2)!==_0x41fc0f(0x4c2)?_0x339971[_0x41fc0f(0x1e9)](_0x1ec487):_0x5407b4[_0x41fc0f(0x6ac)](0x0);else{if(_0xe77d08&&[_0x41fc0f(0x535),_0x41fc0f(0xab5),'missle']['includes'](_0x3d574b)){}}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x85f),_0x356ce2=>{const _0x383158=_0x35b5eb;if(!SceneManager[_0x383158(0x3a2)]())return;VisuMZ[_0x383158(0x68f)](_0x356ce2,_0x356ce2);const _0x318b4e=BattleManager['_action'];if(!_0x318b4e)return;if(!_0x318b4e[_0x383158(0x5d3)]())return;const _0x1447b=VisuMZ[_0x383158(0x43c)](_0x356ce2[_0x383158(0x1bf)]);for(const _0x1cf54c of _0x1447b){if(!_0x1cf54c)continue;_0x1cf54c[_0x383158(0xb3c)](_0x318b4e);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x1dd),_0x5345d3=>{const _0x5ab6ca=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5ab6ca(0x68f)](_0x5345d3,_0x5345d3);const _0x4f3e25=VisuMZ[_0x5ab6ca(0x43c)](_0x5345d3['Targets']);for(const _0x5e05ff of _0x4f3e25){if('QmBZx'===_0x5ab6ca(0x5ab))this['_shadowSprite'][_0x5ab6ca(0x17f)]=this[_0x5ab6ca(0xb0d)][_0x5ab6ca(0xae6)](),this['updateShadowPosition']();else{if(!_0x5e05ff)continue;if(!_0x5e05ff['battler']())continue;_0x5e05ff[_0x5ab6ca(0x691)]()['refreshMotion']();}}}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x137),_0x5bcbd0=>{const _0x3389cc=_0x35b5eb;if(!SceneManager[_0x3389cc(0x3a2)]())return;VisuMZ[_0x3389cc(0x68f)](_0x5bcbd0,_0x5bcbd0);const _0x4695b8=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b7d05=_0x5bcbd0['MotionFrameWait']*Sprite_Battler[_0x3389cc(0xa72)];_0x4695b8[_0x3389cc(0x17d)](_0x4b7d05);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x56a),_0xa9aa7e=>{const _0x32bbb1=_0x35b5eb;if(!SceneManager[_0x32bbb1(0x3a2)]())return;VisuMZ[_0x32bbb1(0x68f)](_0xa9aa7e,_0xa9aa7e);const _0x4ae9a2=$gameTemp[_0x32bbb1(0x657)](),_0x33d0cc=BattleManager[_0x32bbb1(0x495)];if(!_0x4ae9a2||!_0x33d0cc)return;if(!_0x33d0cc[_0x32bbb1(0x5d3)]())return;const _0xf2519b=VisuMZ[_0x32bbb1(0x43c)](_0xa9aa7e[_0x32bbb1(0x1bf)]);for(const _0x2ded25 of _0xf2519b){if(!_0x2ded25)continue;_0x2ded25['performActionStart'](_0x33d0cc);}if(_0xa9aa7e[_0x32bbb1(0x952)])_0x4ae9a2[_0x32bbb1(0x7fe)](_0x32bbb1(0x679));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x610),_0x26fbe3=>{const _0xd43c36=_0x35b5eb;if(!SceneManager[_0xd43c36(0x3a2)]())return;if(!$gameSystem[_0xd43c36(0x9b9)]())return;VisuMZ[_0xd43c36(0x68f)](_0x26fbe3,_0x26fbe3);const _0x39aebc=$gameTemp[_0xd43c36(0x657)](),_0x2529fc=VisuMZ[_0xd43c36(0x43c)](_0x26fbe3[_0xd43c36(0x1bf)]),_0x4be3ca=_0x26fbe3[_0xd43c36(0x430)],_0xda3725=_0x26fbe3[_0xd43c36(0x349)],_0x467f06=_0x26fbe3[_0xd43c36(0xff)],_0x2c6ee4=_0x26fbe3[_0xd43c36(0x4a1)],_0xdb5b25=_0x26fbe3[_0xd43c36(0x1d1)],_0x35e42b=_0x26fbe3[_0xd43c36(0x66c)],_0x2229bd=_0x26fbe3[_0xd43c36(0x6ad)],_0x3b124c=_0x26fbe3[_0xd43c36(0x952)];if(!_0x39aebc)return;for(const _0x1dd585 of _0x2529fc){if(!_0x1dd585)continue;let _0x2628f2=_0xda3725,_0x199ee9=_0x467f06;if(_0x4be3ca[_0xd43c36(0x111)](/horz/i))_0x2628f2*=_0x1dd585[_0xd43c36(0xa6f)]()?-0x1:0x1;if(_0x4be3ca[_0xd43c36(0x111)](/vert/i))_0x199ee9*=_0x1dd585[_0xd43c36(0xa6f)]()?-0x1:0x1;_0x1dd585[_0xd43c36(0x757)](_0x2628f2,_0x199ee9,_0x2c6ee4,_0xdb5b25,_0x35e42b),_0x1dd585[_0xd43c36(0x67a)](_0x2229bd);}if(_0x3b124c)_0x39aebc['setWaitMode'](_0xd43c36(0x679));}),PluginManager['registerCommand'](pluginData['name'],_0x35b5eb(0x95b),_0x5b02d3=>{const _0x3ce86c=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x5b02d3,_0x5b02d3);const _0xdf8cb7=$gameTemp['getLastPluginCommandInterpreter'](),_0x334a72=VisuMZ['CreateActionSequenceTargets'](_0x5b02d3[_0x3ce86c(0x1bf)]),_0x4acc2a=_0x5b02d3[_0x3ce86c(0x188)],_0x2653d9=_0x5b02d3[_0x3ce86c(0x74a)],_0x47242d=_0x5b02d3['OffsetX'],_0x4f11a2=_0x5b02d3[_0x3ce86c(0x3d9)],_0x340db0=_0x5b02d3['Duration'],_0x4aceef=_0x5b02d3[_0x3ce86c(0x1d1)],_0xf03a38=_0x5b02d3[_0x3ce86c(0x66c)],_0x94dee8=_0x5b02d3['MotionType'],_0x383064=_0x5b02d3[_0x3ce86c(0x952)];if(!_0xdf8cb7)return;for(const _0x532701 of _0x334a72){if(!_0x532701)continue;let _0x54cc26=_0x532701[_0x3ce86c(0x691)]()['_baseX'],_0x7b3997=_0x532701[_0x3ce86c(0x691)]()[_0x3ce86c(0x740)];if(_0x4acc2a['match'](/home/i))_0x54cc26=_0x532701[_0x3ce86c(0x691)]()[_0x3ce86c(0x82d)],_0x7b3997=_0x532701[_0x3ce86c(0x691)]()[_0x3ce86c(0x56d)];else{if(_0x4acc2a['match'](/center/i))_0x54cc26=Graphics[_0x3ce86c(0x1b4)]/0x2,_0x7b3997=Graphics[_0x3ce86c(0x197)]/0x2;else _0x4acc2a[_0x3ce86c(0x111)](/point (\d+), (\d+)/i)&&(_0x54cc26=Number(RegExp['$1']),_0x7b3997=Number(RegExp['$2']));}if(_0x2653d9[_0x3ce86c(0x111)](/none/i))_0x54cc26+=_0x47242d,_0x7b3997+=_0x4f11a2;else{if(_0x2653d9['match'](/horz/i)&&_0x2653d9[_0x3ce86c(0x111)](/vert/i))_0x3ce86c(0x780)!==_0x3ce86c(0x780)?(_0x4a5090[_0x3ce86c(0x65d)]['x']=(_0x1e498a[_0x3ce86c(0x65d)]['x']*(_0x409d83-0x1)+this[_0x3ce86c(0x167)])/_0x16c2e0,_0x59c4de[_0x3ce86c(0x65d)]['y']=(_0x5c58a6[_0x3ce86c(0x65d)]['y']*(_0x892377-0x1)+this[_0x3ce86c(0x696)])/_0x3fbf6e):(_0x54cc26+=_0x532701[_0x3ce86c(0xa6f)]()?-_0x47242d:_0x47242d,_0x7b3997+=_0x532701[_0x3ce86c(0xa6f)]()?-_0x4f11a2:_0x4f11a2);else{if(_0x2653d9[_0x3ce86c(0x111)](/horz/i))_0x54cc26+=_0x532701['isActor']()?-_0x47242d:_0x47242d,_0x7b3997+=_0x4f11a2;else _0x2653d9[_0x3ce86c(0x111)](/vert/i)&&(_0x54cc26+=_0x47242d,_0x7b3997+=_0x532701[_0x3ce86c(0xa6f)]()?-_0x4f11a2:_0x4f11a2);}}_0x532701[_0x3ce86c(0x106)](_0x54cc26,_0x7b3997,_0x340db0,_0x4aceef,_0xf03a38,-0x1),_0x532701[_0x3ce86c(0x67a)](_0x94dee8);}if(_0x383064)_0xdf8cb7[_0x3ce86c(0x7fe)](_0x3ce86c(0x679));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],'ActSeq_Movement_HomeMoveToTarget',_0x12e78d=>{const _0x3fb847=_0x35b5eb;if(!SceneManager[_0x3fb847(0x3a2)]())return;if(!$gameSystem[_0x3fb847(0x9b9)]())return;VisuMZ['ConvertParams'](_0x12e78d,_0x12e78d);const _0x5a2a1e=$gameTemp['getLastPluginCommandInterpreter'](),_0x315da3=VisuMZ[_0x3fb847(0x43c)](_0x12e78d[_0x3fb847(0x31f)]),_0x47b164=VisuMZ[_0x3fb847(0x43c)](_0x12e78d['Targets2']),_0x4c6ff7=_0x12e78d[_0x3fb847(0x6c6)];let _0x18621c=_0x12e78d['MeleeDistance'];const _0xbbcb39=_0x12e78d[_0x3fb847(0x74a)],_0x5e2738=_0x12e78d['OffsetX'],_0x1db710=_0x12e78d[_0x3fb847(0x3d9)],_0x2e7887=_0x12e78d[_0x3fb847(0x4a1)],_0x516cd2=_0x12e78d[_0x3fb847(0x1d1)],_0xfee1b7=_0x12e78d[_0x3fb847(0x66c)],_0xc5d475=_0x12e78d[_0x3fb847(0x6ad)],_0x1021e3=_0x12e78d[_0x3fb847(0x952)],_0x600e2b=Math[_0x3fb847(0x4bc)](..._0x47b164['map'](_0x347fac=>_0x347fac[_0x3fb847(0x691)]()['_baseX']-_0x347fac['battler']()[_0x3fb847(0x667)]()/0x2)),_0x30c35d=Math[_0x3fb847(0x2a3)](..._0x47b164[_0x3fb847(0x3dd)](_0x2fb516=>_0x2fb516[_0x3fb847(0x691)]()['_baseX']+_0x2fb516['battler']()[_0x3fb847(0x667)]()/0x2)),_0x1e385d=Math['min'](..._0x47b164['map'](_0x436e2f=>_0x436e2f[_0x3fb847(0x691)]()[_0x3fb847(0x740)]-_0x436e2f[_0x3fb847(0x691)]()[_0x3fb847(0x9d9)]())),_0x10d512=Math[_0x3fb847(0x2a3)](..._0x47b164[_0x3fb847(0x3dd)](_0x521d18=>_0x521d18[_0x3fb847(0x691)]()[_0x3fb847(0x740)])),_0x5c372d=_0x47b164[_0x3fb847(0x416)](_0x3cebbb=>_0x3cebbb[_0x3fb847(0xa6f)]())[_0x3fb847(0x1a0)],_0x5167a3=_0x47b164[_0x3fb847(0x416)](_0x7762f8=>_0x7762f8['isEnemy']())[_0x3fb847(0x1a0)];let _0x444fe9=0x0,_0x375abb=0x0;if(_0x4c6ff7[_0x3fb847(0x111)](/front/i))_0x444fe9=_0x5c372d>=_0x5167a3?_0x600e2b:_0x30c35d;else{if(_0x4c6ff7['match'](/middle/i))'mtgSO'!==_0x3fb847(0x284)?this['startMove'](0x0,0x0,0xc):(_0x444fe9=(_0x600e2b+_0x30c35d)/0x2,_0x18621c=-0x1);else _0x4c6ff7[_0x3fb847(0x111)](/back/i)&&(_0x444fe9=_0x5c372d>=_0x5167a3?_0x30c35d:_0x600e2b);}if(_0x4c6ff7[_0x3fb847(0x111)](/head/i))_0x375abb=_0x1e385d;else{if(_0x4c6ff7['match'](/center/i)){if(_0x3fb847(0xdd)===_0x3fb847(0x191))return 0x1;else _0x375abb=(_0x1e385d+_0x10d512)/0x2;}else{if(_0x4c6ff7['match'](/base/i)){if(_0x3fb847(0x2a8)!==_0x3fb847(0x2a8))return this['partyCommandWindowRect']();else _0x375abb=_0x10d512;}}}if(!_0x5a2a1e)return;for(const _0x3c95ce of _0x315da3){if(!_0x3c95ce)continue;let _0x220862=_0x444fe9,_0x33b93b=_0x375abb;if(_0xbbcb39[_0x3fb847(0x111)](/none/i))_0x220862+=_0x5e2738,_0x33b93b+=_0x1db710;else{if(_0xbbcb39[_0x3fb847(0x111)](/horz/i)&&_0xbbcb39[_0x3fb847(0x111)](/vert/i))_0x220862+=_0x3c95ce[_0x3fb847(0xa6f)]()?-_0x5e2738:_0x5e2738,_0x33b93b+=_0x3c95ce[_0x3fb847(0xa6f)]()?-_0x1db710:_0x1db710;else{if(_0xbbcb39[_0x3fb847(0x111)](/horz/i))_0x220862+=_0x3c95ce['isActor']()?-_0x5e2738:_0x5e2738,_0x33b93b+=_0x1db710;else _0xbbcb39[_0x3fb847(0x111)](/vert/i)&&(_0x220862+=_0x5e2738,_0x33b93b+=_0x3c95ce[_0x3fb847(0xa6f)]()?-_0x1db710:_0x1db710);}}_0x3c95ce[_0x3fb847(0x106)](_0x220862,_0x33b93b,_0x2e7887,_0x516cd2,_0xfee1b7,_0x18621c),_0x3c95ce[_0x3fb847(0x67a)](_0xc5d475);}if(_0x1021e3)_0x5a2a1e['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0xa30),_0x172164=>{const _0x1aef32=_0x35b5eb;if(!SceneManager[_0x1aef32(0x3a2)]())return;if(!$gameSystem[_0x1aef32(0x9b9)]())return;VisuMZ[_0x1aef32(0x68f)](_0x172164,_0x172164);const _0x63c7d=VisuMZ[_0x1aef32(0x43c)](_0x172164['Targets']);let _0x1d89e4=_0x172164['Direction']['match'](/back/i);for(const _0x5e2075 of _0x63c7d){if(!_0x5e2075)continue;if(_0x172164[_0x1aef32(0x500)]['match'](/rand/i))_0x1d89e4=Math['randomInt'](0x2);_0x5e2075[_0x1aef32(0xe4)](!!_0x1d89e4);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_FacePoint',_0x4a7789=>{const _0x439656=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x439656(0x9b9)]())return;VisuMZ[_0x439656(0x68f)](_0x4a7789,_0x4a7789);const _0x36216a=VisuMZ[_0x439656(0x43c)](_0x4a7789[_0x439656(0x1bf)]);let _0x358c48=_0x4a7789[_0x439656(0x860)];const _0xef797b=_0x4a7789[_0x439656(0xb1e)];for(const _0x556c0c of _0x36216a){if(_0x439656(0x18f)===_0x439656(0x18f)){if(!_0x556c0c)continue;let _0x4f68cd=_0x556c0c['battler']()['_baseX'],_0x4b3d81=_0x556c0c[_0x439656(0x691)]()['_baseY'];if(_0x358c48[_0x439656(0x111)](/home/i))_0x4f68cd=_0x556c0c['battler']()['_homeX'],_0x4b3d81=_0x556c0c['battler']()[_0x439656(0x56d)];else{if(_0x358c48[_0x439656(0x111)](/center/i))_0x439656(0xa6b)===_0x439656(0x2e1)?this['_cancelButton']['x']=-this[_0x439656(0x225)]['width']-0x4:(_0x4f68cd=Graphics[_0x439656(0x1b4)]/0x2,_0x4b3d81=Graphics['boxHeight']/0x2);else _0x358c48[_0x439656(0x111)](/point (\d+), (\d+)/i)&&(_0x4f68cd=Number(RegExp['$1']),_0x4b3d81=Number(RegExp['$2']));}_0x556c0c[_0x439656(0xaf1)](Math[_0x439656(0x3d5)](_0x4f68cd),Math['round'](_0x4b3d81),!!_0xef797b);}else this['drawGauge']();}}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x57d),_0x3bfada=>{const _0x476824=_0x35b5eb;if(!SceneManager[_0x476824(0x3a2)]())return;if(!$gameSystem[_0x476824(0x9b9)]())return;VisuMZ['ConvertParams'](_0x3bfada,_0x3bfada);const _0x38d826=VisuMZ['CreateActionSequenceTargets'](_0x3bfada[_0x476824(0x31f)]),_0x192a0c=VisuMZ['CreateActionSequenceTargets'](_0x3bfada[_0x476824(0xa9c)]),_0x13565f=_0x192a0c[_0x476824(0x3dd)](_0x32b408=>_0x32b408&&_0x32b408[_0x476824(0x691)]()?_0x32b408[_0x476824(0x691)]()[_0x476824(0x74d)]:0x0)/(_0x192a0c[_0x476824(0x1a0)]||0x1),_0x15c35e=_0x192a0c[_0x476824(0x3dd)](_0x28c91b=>_0x28c91b&&_0x28c91b[_0x476824(0x691)]()?_0x28c91b['battler']()[_0x476824(0x740)]:0x0)/(_0x192a0c['length']||0x1),_0x3ef6ad=_0x3bfada[_0x476824(0xb1e)];for(const _0x1047d0 of _0x38d826){if(_0x476824(0x552)!==_0x476824(0x1ff)){if(!_0x1047d0)continue;_0x1047d0['setBattlerFacePoint'](Math[_0x476824(0x3d5)](_0x13565f),Math[_0x476824(0x3d5)](_0x15c35e),!!_0x3ef6ad);}else _0x5e6fa1=_0x45c1a1(_0x42886f['$1']),_0x510c17=_0x4706dd(_0x264474['$2']);}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x21a),_0x4a2dd3=>{const _0x4a4e6a=_0x35b5eb;if(!SceneManager[_0x4a4e6a(0x3a2)]())return;VisuMZ[_0x4a4e6a(0x68f)](_0x4a2dd3,_0x4a2dd3);const _0x2e7c29=$gameTemp['getLastPluginCommandInterpreter'](),_0x16d24a=VisuMZ[_0x4a4e6a(0x43c)](_0x4a2dd3['Targets']),_0x3d0b41=_0x4a2dd3[_0x4a4e6a(0xa14)],_0x322c44=_0x4a2dd3[_0x4a4e6a(0x4a1)],_0x5c2153=_0x4a2dd3['EasingType'],_0x3e760b=_0x4a2dd3[_0x4a4e6a(0x6f1)];if(!_0x2e7c29)return;for(const _0x37bf50 of _0x16d24a){if(_0x4a4e6a(0x6bc)===_0x4a4e6a(0x6bc)){if(!_0x37bf50)continue;_0x37bf50[_0x4a4e6a(0x6fd)](_0x3d0b41,_0x322c44,_0x5c2153);}else{if(!_0x301074['isSideView']())return;const _0x5975cd=this[_0x4a4e6a(0x691)]();if(!_0x5975cd)return;_0x13935e=_0x21d209||0x0;if(_0x20e577>0x0){if(_0x5975cd[_0x4a4e6a(0x74d)]>_0x1745eb)_0x40364f+=_0x5975cd[_0x4a4e6a(0x91c)]/0x2+_0x5c6dd6;if(_0x5975cd[_0x4a4e6a(0x74d)]<_0x529f03)_0x4d60ad-=_0x5975cd[_0x4a4e6a(0x91c)]/0x2+_0x588524;}if(_0x3a000c)this[_0x4a4e6a(0xaf1)](_0x40eb4f,_0x1a136e,![]);_0x5975cd[_0x4a4e6a(0x7fc)](_0xdc1950,_0x1fe800,_0x5992a1,_0x571b8b),this[_0x4a4e6a(0x5c1)]=_0x2595de,this[_0x4a4e6a(0x185)]=_0x370acd;}}if(_0x3e760b)_0x2e7c29[_0x4a4e6a(0x7fe)](_0x4a4e6a(0x3e2));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x626),_0x3d4988=>{const _0x4349a6=_0x35b5eb;if(!SceneManager[_0x4349a6(0x3a2)]())return;VisuMZ['ConvertParams'](_0x3d4988,_0x3d4988);const _0x2b8668=$gameTemp[_0x4349a6(0x657)]();if(!_0x2b8668)return;const _0x3a7b18=VisuMZ[_0x4349a6(0x43c)](_0x3d4988[_0x4349a6(0x1bf)]);for(const _0xe739da of _0x3a7b18){if(!_0xe739da)continue;_0xe739da[_0x4349a6(0x62c)]();}if(BattleManager['_subject']){if(_0x4349a6(0x467)!=='YqzVD')BattleManager[_0x4349a6(0x785)][_0x4349a6(0x3bd)]();else return this[_0x4349a6(0x1a2)]()['some'](_0x5530f2=>_0x5530f2[_0x4349a6(0x75f)]());}if(_0x3d4988['WaitForMovement'])_0x2b8668[_0x4349a6(0x7fe)](_0x4349a6(0x679));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x87b),_0x2176b5=>{const _0x36ee4c=_0x35b5eb;if(!SceneManager[_0x36ee4c(0x3a2)]())return;VisuMZ[_0x36ee4c(0x68f)](_0x2176b5,_0x2176b5);const _0x466df4=$gameTemp[_0x36ee4c(0x657)](),_0x53b5a8=VisuMZ['CreateActionSequenceTargets'](_0x2176b5[_0x36ee4c(0x1bf)]),_0x58af4e=_0x2176b5[_0x36ee4c(0xa14)],_0x3cb27c=_0x2176b5[_0x36ee4c(0x4a1)],_0x2a2fec=_0x2176b5[_0x36ee4c(0x976)];if(!_0x466df4)return;for(const _0x5adcfd of _0x53b5a8){if(_0x36ee4c(0xb36)==='nFfii'){if(!_0x5adcfd)continue;_0x5adcfd[_0x36ee4c(0x66b)](_0x58af4e,_0x3cb27c);}else{const _0x3902a4=_0x1a11f1['loadPicture'](_0x3e072a[_0x36ee4c(0x36c)]());_0x3902a4[_0x36ee4c(0x7ea)](this[_0x36ee4c(0x948)][_0x36ee4c(0x4eb)](this,_0x3902a4));}}if(_0x2a2fec)_0x466df4['setWaitMode']('battleJump');}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],'ActSeq_Movement_MoveBy',_0x108901=>{const _0xdb8e17=_0x35b5eb;if(!SceneManager[_0xdb8e17(0x3a2)]())return;if(!$gameSystem[_0xdb8e17(0x9b9)]())return;VisuMZ[_0xdb8e17(0x68f)](_0x108901,_0x108901);const _0x5a9033=$gameTemp['getLastPluginCommandInterpreter'](),_0x45df52=VisuMZ['CreateActionSequenceTargets'](_0x108901[_0xdb8e17(0x1bf)]),_0x423041=_0x108901[_0xdb8e17(0x430)],_0x19d71a=_0x108901[_0xdb8e17(0x349)],_0x25e278=_0x108901[_0xdb8e17(0xff)],_0x3aab06=_0x108901[_0xdb8e17(0x4a1)],_0x2b16fa=_0x108901[_0xdb8e17(0x1d1)],_0x45c6d8=_0x108901[_0xdb8e17(0x66c)],_0x1774f0=_0x108901[_0xdb8e17(0x6ad)],_0x2796f5=_0x108901['WaitForMovement'];if(!_0x5a9033)return;for(const _0x53d567 of _0x45df52){if(_0xdb8e17(0x864)===_0xdb8e17(0x864)){if(!_0x53d567)continue;let _0x583d75=_0x19d71a,_0x441ea6=_0x25e278;if(_0x423041[_0xdb8e17(0x111)](/horz/i))_0x583d75*=_0x53d567['isActor']()?-0x1:0x1;if(_0x423041['match'](/vert/i))_0x441ea6*=_0x53d567['isActor']()?-0x1:0x1;_0x53d567['moveBattlerDistance'](_0x583d75,_0x441ea6,_0x3aab06,_0x2b16fa,_0x45c6d8),_0x53d567[_0xdb8e17(0x67a)](_0x1774f0);}else{this[_0xdb8e17(0x116)][_0xdb8e17(0xa37)]();const _0x3c0b6f=_0x4295e3[_0xdb8e17(0x781)][_0xdb8e17(0x3cb)][_0xdb8e17(0x93c)][_0xdb8e17(0x25e)],_0x49d166=_0x3c0b6f['format'](this[_0xdb8e17(0x953)](),this[_0xdb8e17(0x1b9)]()),_0x1cbc28=this[_0xdb8e17(0x84f)](_0x49d166)[_0xdb8e17(0x91c)],_0x15266b=_0x355c87[_0xdb8e17(0xaaf)]((this[_0xdb8e17(0x2eb)]-_0x1cbc28)/0x2);this[_0xdb8e17(0x487)](_0x49d166,_0x15266b,0x0,_0x1cbc28);}}if(_0x2796f5)_0x5a9033[_0xdb8e17(0x7fe)](_0xdb8e17(0x679));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Movement_MoveToPoint',_0x1613ba=>{const _0x213e2e=_0x35b5eb;if(!SceneManager[_0x213e2e(0x3a2)]())return;if(!$gameSystem[_0x213e2e(0x9b9)]())return;VisuMZ[_0x213e2e(0x68f)](_0x1613ba,_0x1613ba);const _0x33e2d2=$gameTemp[_0x213e2e(0x657)](),_0x57196e=VisuMZ[_0x213e2e(0x43c)](_0x1613ba[_0x213e2e(0x1bf)]),_0x168249=_0x1613ba[_0x213e2e(0x188)],_0x34b34b=_0x1613ba[_0x213e2e(0x74a)],_0x5eacca=_0x1613ba[_0x213e2e(0x67f)],_0x2f66af=_0x1613ba[_0x213e2e(0x3d9)],_0x5e46bf=_0x1613ba[_0x213e2e(0x4a1)],_0x2f20f1=_0x1613ba[_0x213e2e(0x1d1)],_0x328169=_0x1613ba[_0x213e2e(0x66c)],_0x2f6fcb=_0x1613ba['MotionType'],_0x57751d=_0x1613ba[_0x213e2e(0x952)];if(!_0x33e2d2)return;for(const _0x473506 of _0x57196e){if(_0x213e2e(0x967)!==_0x213e2e(0x967))this[_0x213e2e(0x9a0)]=this[_0x213e2e(0x5c7)](this[_0x213e2e(0x9a0)],this[_0x213e2e(0x645)],_0xd27b97,_0x3382f2,_0x5af430);else{if(!_0x473506)continue;let _0x488832=_0x473506['battler']()[_0x213e2e(0x74d)],_0x8d7178=_0x473506['battler']()[_0x213e2e(0x740)];if(_0x168249[_0x213e2e(0x111)](/home/i))_0x488832=_0x473506[_0x213e2e(0x691)]()[_0x213e2e(0x82d)],_0x8d7178=_0x473506['battler']()['_homeY'];else{if(_0x168249[_0x213e2e(0x111)](/center/i))_0x488832=Graphics['boxWidth']/0x2,_0x8d7178=Graphics['boxHeight']/0x2;else _0x168249['match'](/point (\d+), (\d+)/i)&&(_0x488832=Number(RegExp['$1']),_0x8d7178=Number(RegExp['$2']));}if(_0x34b34b['match'](/none/i))_0x488832+=_0x5eacca,_0x8d7178+=_0x2f66af;else{if(_0x34b34b[_0x213e2e(0x111)](/horz/i)&&_0x34b34b[_0x213e2e(0x111)](/vert/i)){if(_0x213e2e(0x97b)!==_0x213e2e(0x97b)){if(!_0x6c70b1[_0x213e2e(0x32c)]())return![];if(!_0x132144['isForAll']())return![];if(!_0x38860d['isForOpponent']())return![];return _0x21e249['BattleCore']['Settings']['ActionSequence'][_0x213e2e(0x42d)];}else _0x488832+=_0x473506[_0x213e2e(0xa6f)]()?-_0x5eacca:_0x5eacca,_0x8d7178+=_0x473506[_0x213e2e(0xa6f)]()?-_0x2f66af:_0x2f66af;}else{if(_0x34b34b['match'](/horz/i)){if(_0x213e2e(0x468)==='nEUyK')_0x488832+=_0x473506[_0x213e2e(0xa6f)]()?-_0x5eacca:_0x5eacca,_0x8d7178+=_0x2f66af;else return!_0x2c4fc6[_0x213e2e(0x9b9)]()&&this[_0x213e2e(0xb0d)]&&this[_0x213e2e(0xb0d)][_0x213e2e(0xa6f)]();}else _0x34b34b['match'](/vert/i)&&(_0x488832+=_0x5eacca,_0x8d7178+=_0x473506[_0x213e2e(0xa6f)]()?-_0x2f66af:_0x2f66af);}}_0x473506[_0x213e2e(0x724)](_0x488832,_0x8d7178,_0x5e46bf,_0x2f20f1,_0x328169,-0x1),_0x473506[_0x213e2e(0x67a)](_0x2f6fcb);}}if(_0x57751d)_0x33e2d2[_0x213e2e(0x7fe)](_0x213e2e(0x679));}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],'ActSeq_Movement_MoveToTarget',_0x28ae79=>{const _0x4b8c01=_0x35b5eb;if(!SceneManager[_0x4b8c01(0x3a2)]())return;if(!$gameSystem[_0x4b8c01(0x9b9)]())return;VisuMZ[_0x4b8c01(0x68f)](_0x28ae79,_0x28ae79);const _0x438f91=$gameTemp[_0x4b8c01(0x657)](),_0x1e2221=VisuMZ[_0x4b8c01(0x43c)](_0x28ae79[_0x4b8c01(0x31f)]),_0x424605=VisuMZ[_0x4b8c01(0x43c)](_0x28ae79[_0x4b8c01(0xa9c)]),_0x2e5306=_0x28ae79[_0x4b8c01(0x6c6)];let _0x4e97fa=_0x28ae79['MeleeDistance'];const _0x3b4c3a=_0x28ae79['OffsetAdjust'],_0x5269e4=_0x28ae79['OffsetX'],_0x2152d9=_0x28ae79[_0x4b8c01(0x3d9)],_0x3dcfc7=_0x28ae79[_0x4b8c01(0x4a1)],_0x15f215=_0x28ae79['FaceDirection'],_0x569c7b=_0x28ae79[_0x4b8c01(0x66c)],_0x257caa=_0x28ae79[_0x4b8c01(0x6ad)],_0x5d7fb9=_0x28ae79[_0x4b8c01(0x952)],_0x1c6bc3=Math['min'](..._0x424605[_0x4b8c01(0x3dd)](_0x1002f6=>_0x1002f6[_0x4b8c01(0x691)]()[_0x4b8c01(0x74d)]-_0x1002f6[_0x4b8c01(0x691)]()[_0x4b8c01(0x667)]()/0x2)),_0x46edb3=Math[_0x4b8c01(0x2a3)](..._0x424605[_0x4b8c01(0x3dd)](_0x2644e5=>_0x2644e5[_0x4b8c01(0x691)]()[_0x4b8c01(0x74d)]+_0x2644e5[_0x4b8c01(0x691)]()[_0x4b8c01(0x667)]()/0x2)),_0x441dc1=Math[_0x4b8c01(0x4bc)](..._0x424605[_0x4b8c01(0x3dd)](_0x1cf0a8=>_0x1cf0a8[_0x4b8c01(0x691)]()[_0x4b8c01(0x740)]-_0x1cf0a8[_0x4b8c01(0x691)]()['mainSpriteHeight']())),_0x5adff4=Math[_0x4b8c01(0x2a3)](..._0x424605[_0x4b8c01(0x3dd)](_0x23a891=>_0x23a891[_0x4b8c01(0x691)]()[_0x4b8c01(0x740)])),_0x2126b4=_0x424605[_0x4b8c01(0x416)](_0x414cae=>_0x414cae[_0x4b8c01(0xa6f)]())[_0x4b8c01(0x1a0)],_0x1f7f7a=_0x424605[_0x4b8c01(0x416)](_0x52b71c=>_0x52b71c[_0x4b8c01(0x65c)]())[_0x4b8c01(0x1a0)];let _0xf85249=0x0,_0x481404=0x0;if(_0x2e5306[_0x4b8c01(0x111)](/front/i))_0xf85249=_0x2126b4>=_0x1f7f7a?_0x1c6bc3:_0x46edb3;else{if(_0x2e5306[_0x4b8c01(0x111)](/middle/i))_0x4b8c01(0x2d1)===_0x4b8c01(0x542)?this['_methods'][_0x4b8c01(0x7c7)](_0x593da9):(_0xf85249=(_0x1c6bc3+_0x46edb3)/0x2,_0x4e97fa=-0x1);else _0x2e5306[_0x4b8c01(0x111)](/back/i)&&(_0xf85249=_0x2126b4>=_0x1f7f7a?_0x46edb3:_0x1c6bc3);}if(_0x2e5306[_0x4b8c01(0x111)](/head/i))_0x481404=_0x441dc1;else{if(_0x2e5306[_0x4b8c01(0x111)](/center/i)){if(_0x4b8c01(0xafb)!==_0x4b8c01(0x7bb))_0x481404=(_0x441dc1+_0x5adff4)/0x2;else return _0x333fec[_0x4b8c01(0x781)][_0x4b8c01(0x3cb)][_0x4b8c01(0x93c)]['AutoBattleCancel'];}else{if(_0x2e5306[_0x4b8c01(0x111)](/base/i)){if(_0x4b8c01(0x39a)===_0x4b8c01(0x52b))return this[_0x4b8c01(0x432)];else _0x481404=_0x5adff4;}}}if(!_0x438f91)return;for(const _0x246a08 of _0x1e2221){if(!_0x246a08)continue;let _0x393f50=_0xf85249,_0x2d9d4b=_0x481404;if(_0x3b4c3a['match'](/none/i))'eOemc'==='eOemc'?(_0x393f50+=_0x5269e4,_0x2d9d4b+=_0x2152d9):(_0x230543['BattleCore'][_0x4b8c01(0xaeb)][_0x4b8c01(0x541)](this),!this[_0x4b8c01(0xb0d)]&&this['_hpGaugeSprite']&&(this['_hpGaugeSprite'][_0x4b8c01(0x17f)]=![]));else{if(_0x3b4c3a[_0x4b8c01(0x111)](/horz/i)&&_0x3b4c3a['match'](/vert/i)){if(_0x4b8c01(0x5a4)!==_0x4b8c01(0x10e))_0x393f50+=_0x246a08[_0x4b8c01(0xa6f)]()?-_0x5269e4:_0x5269e4,_0x2d9d4b+=_0x246a08[_0x4b8c01(0xa6f)]()?-_0x2152d9:_0x2152d9;else{const _0x309237=this[_0x4b8c01(0x408)](_0x52a600),_0x4bd43d=this[_0x4b8c01(0x50d)](_0x1a7c2b),_0x58bb18=this[_0x4b8c01(0x84f)](_0x4bd43d)[_0x4b8c01(0x91c)];this[_0x4b8c01(0x2ac)](this[_0x4b8c01(0x235)](_0x508628));const _0x3eebbe=this[_0x4b8c01(0x865)]();if(_0x3eebbe===_0x4b8c01(0x946))this['drawTextEx'](_0x4bd43d,_0x309237['x']+_0x309237[_0x4b8c01(0x91c)]-_0x58bb18,_0x309237['y'],_0x58bb18);else{if(_0x3eebbe===_0x4b8c01(0x321)){const _0x37b8e2=_0x309237['x']+_0x2afad2[_0x4b8c01(0xaaf)]((_0x309237[_0x4b8c01(0x91c)]-_0x58bb18)/0x2);this[_0x4b8c01(0x487)](_0x4bd43d,_0x37b8e2,_0x309237['y'],_0x58bb18);}else this[_0x4b8c01(0x487)](_0x4bd43d,_0x309237['x'],_0x309237['y'],_0x58bb18);}}}else{if(_0x3b4c3a['match'](/horz/i))'yymrS'!=='yymrS'?this[_0x4b8c01(0xed)]():(_0x393f50+=_0x246a08[_0x4b8c01(0xa6f)]()?-_0x5269e4:_0x5269e4,_0x2d9d4b+=_0x2152d9);else _0x3b4c3a[_0x4b8c01(0x111)](/vert/i)&&('PcgSR'!==_0x4b8c01(0x51a)?_0x43bd25[_0x4b8c01(0x7c7)](this[_0x4b8c01(0xa91)]()[_0x4b8c01(0x595)]()):(_0x393f50+=_0x5269e4,_0x2d9d4b+=_0x246a08[_0x4b8c01(0xa6f)]()?-_0x2152d9:_0x2152d9));}}_0x246a08[_0x4b8c01(0x724)](_0x393f50,_0x2d9d4b,_0x3dcfc7,_0x15f215,_0x569c7b,_0x4e97fa),_0x246a08['requestMotion'](_0x257caa);}if(_0x5d7fb9)_0x438f91[_0x4b8c01(0x7fe)](_0x4b8c01(0x679));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x1cd),_0x51ce76=>{const _0x455258=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x455258(0x68f)](_0x51ce76,_0x51ce76);const _0x564df1=$gameTemp[_0x455258(0x657)](),_0x5dd6fd=VisuMZ[_0x455258(0x43c)](_0x51ce76[_0x455258(0x1bf)]),_0x304d7d=_0x51ce76[_0x455258(0x206)],_0x2ad9c3=_0x51ce76[_0x455258(0x4a1)],_0x1b0f2c=_0x51ce76[_0x455258(0x66c)],_0x2b5ef2=_0x51ce76['WaitForOpacity'];if(!_0x564df1)return;for(const _0x39cd06 of _0x5dd6fd){if(_0x455258(0x393)===_0x455258(0x6d5)){const _0x160ac5=_0x2c834f[_0x455258(0x73b)][_0x455258(0x4b1)]['call'](arguments,0x1);this[_0x455258(0x7a4)][_0x455258(0x89e)]({'name':_0x2fbcdf,'params':_0x160ac5});}else{if(!_0x39cd06)continue;_0x39cd06[_0x455258(0x122)](_0x304d7d,_0x2ad9c3,_0x1b0f2c);}}if(_0x2b5ef2)_0x564df1['setWaitMode'](_0x455258(0x69b));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x987),_0x2aec3f=>{const _0x76ab75=_0x35b5eb;if(!SceneManager[_0x76ab75(0x3a2)]())return;VisuMZ[_0x76ab75(0x68f)](_0x2aec3f,_0x2aec3f);const _0x13ecdb=$gameTemp[_0x76ab75(0x657)](),_0x4cf1b7=VisuMZ['CreateActionSequenceTargets'](_0x2aec3f['Targets']),_0x3a4f84=_0x2aec3f['ScaleX'],_0x3e4bd2=_0x2aec3f['ScaleY'],_0xc8313=_0x2aec3f[_0x76ab75(0x4a1)],_0x244228=_0x2aec3f[_0x76ab75(0x66c)],_0x34f3d9=_0x2aec3f[_0x76ab75(0x451)];if(!_0x13ecdb)return;for(const _0x4a3ec9 of _0x4cf1b7){if(!_0x4a3ec9)continue;_0x4a3ec9[_0x76ab75(0x817)](_0x3a4f84,_0x3e4bd2,_0xc8313,_0x244228);}if(_0x34f3d9)_0x13ecdb[_0x76ab75(0x7fe)](_0x76ab75(0x87a));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0xaa5),_0x303cf8=>{const _0x598840=_0x35b5eb;if(!SceneManager[_0x598840(0x3a2)]())return;VisuMZ[_0x598840(0x68f)](_0x303cf8,_0x303cf8);const _0x2eb3f8=$gameTemp[_0x598840(0x657)](),_0x32a475=VisuMZ[_0x598840(0x43c)](_0x303cf8['Targets']),_0x58e66b=_0x303cf8['SkewX'],_0x50c9d7=_0x303cf8[_0x598840(0xa31)],_0x400865=_0x303cf8[_0x598840(0x4a1)],_0x4a2198=_0x303cf8[_0x598840(0x66c)],_0x1e85dd=_0x303cf8[_0x598840(0x121)];if(!_0x2eb3f8)return;for(const _0x108357 of _0x32a475){if(!_0x108357)continue;_0x108357[_0x598840(0x666)](_0x58e66b,_0x50c9d7,_0x400865,_0x4a2198);}if(_0x1e85dd)_0x2eb3f8[_0x598840(0x7fe)](_0x598840(0x2f7));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_Spin',_0x47d404=>{const _0xfb5984=_0x35b5eb;if(!SceneManager[_0xfb5984(0x3a2)]())return;VisuMZ[_0xfb5984(0x68f)](_0x47d404,_0x47d404);const _0x280605=$gameTemp['getLastPluginCommandInterpreter'](),_0x42e5d6=VisuMZ['CreateActionSequenceTargets'](_0x47d404[_0xfb5984(0x1bf)]),_0x51510f=_0x47d404[_0xfb5984(0x5f9)],_0x13e6f3=_0x47d404[_0xfb5984(0x4a1)],_0x355cab=_0x47d404[_0xfb5984(0x66c)],_0x135d90=_0x47d404[_0xfb5984(0x480)],_0x2ca6cf=_0x47d404[_0xfb5984(0x25f)];if(!_0x280605)return;for(const _0x55979a of _0x42e5d6){if(!_0x55979a)continue;_0x55979a[_0xfb5984(0x9d4)](_0x51510f,_0x13e6f3,_0x355cab,_0x135d90);}if(_0x2ca6cf)_0x280605[_0xfb5984(0x7fe)]('battleSpin');}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x82c),_0x206148=>{const _0x5ba755=_0x35b5eb;if(!SceneManager[_0x5ba755(0x3a2)]())return;const _0x1fc9ec=$gameTemp[_0x5ba755(0x657)]();if(!_0x1fc9ec)return;_0x1fc9ec[_0x5ba755(0x7fe)](_0x5ba755(0x3e2));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x359),_0x5647b3=>{const _0x4a0385=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;const _0x505e4e=$gameTemp[_0x4a0385(0x657)]();if(!_0x505e4e)return;_0x505e4e[_0x4a0385(0x7fe)]('battleJump');}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x732),_0x3035bb=>{const _0x1ed434=_0x35b5eb;if(!SceneManager[_0x1ed434(0x3a2)]())return;const _0x228af5=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x228af5)return;_0x228af5['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],'ActSeq_Movement_WaitForOpacity',_0x95b40c=>{const _0x5800a2=_0x35b5eb;if(!SceneManager[_0x5800a2(0x3a2)]())return;const _0x239ece=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x239ece)return;_0x239ece[_0x5800a2(0x7fe)](_0x5800a2(0x69b));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x7c6),_0x1cff15=>{const _0x57ab2f=_0x35b5eb;if(!SceneManager[_0x57ab2f(0x3a2)]())return;const _0x5eeaaf=$gameTemp[_0x57ab2f(0x657)]();if(!_0x5eeaaf)return;_0x5eeaaf[_0x57ab2f(0x7fe)](_0x57ab2f(0x87a));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x572),_0xb3e691=>{const _0x2cf929=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;const _0x5d6477=$gameTemp[_0x2cf929(0x657)]();if(!_0x5d6477)return;_0x5d6477['setWaitMode'](_0x2cf929(0x2f7));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x377),_0x3a55d5=>{const _0x3fca79=_0x35b5eb;if(!SceneManager[_0x3fca79(0x3a2)]())return;const _0x5d6a84=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5d6a84)return;_0x5d6a84[_0x3fca79(0x7fe)]('battleSpin');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Projectile_Animation',_0x63185d=>{const _0x3f0391=_0x35b5eb;if(!SceneManager[_0x3f0391(0x3a2)]())return;if(!Imported[_0x3f0391(0xa96)])return;VisuMZ[_0x3f0391(0x68f)](_0x63185d,_0x63185d);const _0x42c65c=$gameTemp[_0x3f0391(0x657)](),_0x42281e=_0x63185d[_0x3f0391(0x8bb)];if(!_0x42c65c)return;const _0x5530e4=BattleManager[_0x3f0391(0x254)];if(!_0x5530e4)return;_0x5530e4[_0x3f0391(0x8b7)](_0x63185d);if(_0x42281e)_0x42c65c[_0x3f0391(0x7fe)]('battleProjectiles');}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Projectile_Icon',_0x227e02=>{const _0x380e14=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x380e14(0xa96)])return;VisuMZ[_0x380e14(0x68f)](_0x227e02,_0x227e02);const _0x27180a=$gameTemp['getLastPluginCommandInterpreter'](),_0x3b7554=_0x227e02['WaitForProjectile'];if(!_0x27180a)return;const _0x5acaa7=BattleManager['_spriteset'];if(!_0x5acaa7)return;_0x5acaa7[_0x380e14(0x8b7)](_0x227e02);if(_0x3b7554)_0x27180a[_0x380e14(0x7fe)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x119),_0x3d6152=>{const _0x571944=_0x35b5eb;if(!SceneManager[_0x571944(0x3a2)]())return;if(!Imported[_0x571944(0xa96)])return;VisuMZ[_0x571944(0x68f)](_0x3d6152,_0x3d6152);const _0xcab2d4=$gameTemp[_0x571944(0x657)](),_0x1db974=_0x3d6152['WaitForProjectile'];if(!_0xcab2d4)return;const _0x186929=BattleManager[_0x571944(0x254)];if(!_0x186929)return;_0x186929[_0x571944(0x8b7)](_0x3d6152);if(_0x1db974)_0xcab2d4[_0x571944(0x7fe)](_0x571944(0x7f1));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x98e),_0x196cdf=>{const _0x52c455=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x52c455(0x68f)](_0x196cdf,_0x196cdf);const _0x3a0d2e=$gameTemp['getLastPluginCommandInterpreter'](),_0x4bf399=_0x196cdf[_0x52c455(0x121)];if(!_0x3a0d2e)return;$gameScreen[_0x52c455(0x16d)](_0x196cdf[_0x52c455(0x83c)],_0x196cdf[_0x52c455(0xa31)],_0x196cdf[_0x52c455(0x4a1)],_0x196cdf[_0x52c455(0x66c)]);if(_0x4bf399)_0x3a0d2e['setWaitMode'](_0x52c455(0x75d));}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Skew_Reset',_0x3c53bc=>{const _0x540001=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x540001(0x68f)](_0x3c53bc,_0x3c53bc);const _0x1f73dd=$gameTemp[_0x540001(0x657)](),_0x2fe6fa=_0x3c53bc['WaitForSkew'];if(!_0x1f73dd)return;$gameScreen[_0x540001(0x16d)](0x0,0x0,_0x3c53bc['Duration'],_0x3c53bc['EasingType']);if(_0x2fe6fa)_0x1f73dd['setWaitMode'](_0x540001(0x75d));}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x6cd),_0x183227=>{const _0x374498=_0x35b5eb;if(!SceneManager[_0x374498(0x3a2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x1ed6ac=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1ed6ac)return;_0x1ed6ac[_0x374498(0x7fe)](_0x374498(0x75d));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Target_CurrentIndex',_0xd7d772=>{const _0x4b6dd8=_0x35b5eb;if(!SceneManager[_0x4b6dd8(0x3a2)]())return;VisuMZ[_0x4b6dd8(0x68f)](_0xd7d772,_0xd7d772);const _0x5e7f9b=$gameTemp['getLastPluginCommandInterpreter'](),_0x28eda8=_0xd7d772[_0x4b6dd8(0x614)],_0x348e16=_0xd7d772[_0x4b6dd8(0x8ec)];if(!_0x5e7f9b)return;BattleManager[_0x4b6dd8(0x26e)]=_0x28eda8,BattleManager['_target']=BattleManager['_allTargets']?BattleManager[_0x4b6dd8(0x241)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x4b6dd8(0x8a2)]&&_0x348e16['toUpperCase']()['trim']()!==_0x4b6dd8(0xb3b)&&_0x5e7f9b[_0x4b6dd8(0x5fd)]([_0x348e16]);}),PluginManager['registerCommand'](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x433),_0x3329b0=>{const _0x3d110b=_0x35b5eb;if(!SceneManager[_0x3d110b(0x3a2)]())return;VisuMZ[_0x3d110b(0x68f)](_0x3329b0,_0x3329b0);const _0x108eb0=$gameTemp[_0x3d110b(0x657)](),_0x15fb1e=_0x3329b0[_0x3d110b(0x8ec)];if(!_0x108eb0)return;BattleManager[_0x3d110b(0x26e)]++,BattleManager[_0x3d110b(0x8a2)]=BattleManager[_0x3d110b(0x241)][BattleManager[_0x3d110b(0x26e)]]||null,BattleManager[_0x3d110b(0x8a2)]&&_0x15fb1e[_0x3d110b(0x3e7)]()[_0x3d110b(0x54d)]()!==_0x3d110b(0xb3b)&&_0x108eb0['command119']([_0x15fb1e]);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x219),_0x35b08b=>{const _0x2c672e=_0x35b5eb;if(!SceneManager[_0x2c672e(0x3a2)]())return;VisuMZ[_0x2c672e(0x68f)](_0x35b08b,_0x35b08b);const _0x5cfd8e=$gameTemp[_0x2c672e(0x657)](),_0x2b2656=_0x35b08b[_0x2c672e(0x8ec)];if(!_0x5cfd8e)return;BattleManager['_targetIndex']--,BattleManager[_0x2c672e(0x8a2)]=BattleManager[_0x2c672e(0x241)][BattleManager['_targetIndex']]||null,BattleManager[_0x2c672e(0x8a2)]&&_0x2b2656[_0x2c672e(0x3e7)]()[_0x2c672e(0x54d)]()!==_0x2c672e(0xb3b)&&_0x5cfd8e['command119']([_0x2b2656]);}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x5b2),_0x518e0e=>{const _0x237e00=_0x35b5eb;if(!SceneManager[_0x237e00(0x3a2)]())return;VisuMZ[_0x237e00(0x68f)](_0x518e0e,_0x518e0e);const _0x30c1cd=$gameTemp[_0x237e00(0x657)](),_0x10540a=_0x518e0e[_0x237e00(0x994)],_0x5f074e=_0x518e0e[_0x237e00(0x8ec)];if(!_0x30c1cd)return;const _0x1b5a55=BattleManager[_0x237e00(0x26e)];for(;;){BattleManager[_0x237e00(0x26e)]=Math[_0x237e00(0x8a0)](BattleManager[_0x237e00(0x241)][_0x237e00(0x1a0)]);if(!_0x10540a)break;if(BattleManager['_targetIndex']!==_0x1b5a55)break;if(BattleManager['_allTargets'][_0x237e00(0x1a0)]<=0x1){if('ZqXzL'===_0x237e00(0x86b)){BattleManager[_0x237e00(0x26e)]=0x0;break;}else{this[_0x237e00(0xa39)]['push'](_0x1d3490);if(this['isShownOnBattlePortrait']())_0x3e0505[_0x237e00(0x885)][_0x237e00(0x8f5)][_0x237e00(0x112)](_0x354a27,this[_0x237e00(0xb0d)]);else{this[_0x237e00(0x1e6)]()[_0x237e00(0x835)](_0x3f6e20);if(_0x5bbbc9[_0x237e00(0x725)]())_0x316015['scale']['x']=-0x1;}}}}BattleManager[_0x237e00(0x8a2)]=BattleManager[_0x237e00(0x241)][BattleManager['_targetIndex']]||null,BattleManager[_0x237e00(0x8a2)]&&_0x5f074e[_0x237e00(0x3e7)]()[_0x237e00(0x54d)]()!==_0x237e00(0xb3b)&&_0x30c1cd[_0x237e00(0x5fd)]([_0x5f074e]);}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x83a),_0x51160b=>{const _0x32ea50=_0x35b5eb;if(!SceneManager[_0x32ea50(0x3a2)]())return;VisuMZ[_0x32ea50(0x68f)](_0x51160b,_0x51160b);const _0x19eef2=VisuMZ['CreateActionSequenceTargets'](_0x51160b[_0x32ea50(0x1bf)]);for(const _0x348001 of _0x19eef2){if(_0x32ea50(0x954)!==_0x32ea50(0x6c7)){if(!_0x348001)continue;if(!_0x348001[_0x32ea50(0xa6f)]())continue;_0x348001[_0x32ea50(0x8e9)]();}else{let _0x432c5d=_0x32ea50(0xe2);if(this[_0x32ea50(0x4fe)](_0x432c5d))return this['_cache'][_0x432c5d];return this[_0x32ea50(0x48f)][_0x432c5d]=this[_0x32ea50(0x997)](this[_0x32ea50(0x157)]()),this[_0x32ea50(0x48f)][_0x432c5d];}}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],_0x35b5eb(0x65a),_0x44d83d=>{const _0x3b0c6f=_0x35b5eb;if(!SceneManager[_0x3b0c6f(0x3a2)]())return;VisuMZ['ConvertParams'](_0x44d83d,_0x44d83d);const _0x1497de=$gameTemp[_0x3b0c6f(0x657)]();let _0x567122=![];const _0x2bd676=_0x44d83d['JumpToLabel'],_0x24c8b4=VisuMZ[_0x3b0c6f(0x43c)](_0x44d83d[_0x3b0c6f(0x1bf)]);for(const _0x2e5f1b of _0x24c8b4){if(!_0x2e5f1b)continue;if(!_0x2e5f1b['isActor']())continue;_0x2e5f1b['nextActiveWeaponSlot'](),_0x2e5f1b['weapons']()[_0x3b0c6f(0x1a0)]>0x0?'oqPKq'!==_0x3b0c6f(0xa05)?_0x4a8178['reserveCommonEvent'](_0x176ac3):_0x567122=!![]:'pOYQu'!==_0x3b0c6f(0x41b)?_0x2e5f1b[_0x3b0c6f(0x8e9)]():(_0x555dd6['prototype'][_0x3b0c6f(0xa3b)][_0x3b0c6f(0x541)](this),this['_updateCursorArea']());}_0x567122&&_0x2bd676['toUpperCase']()[_0x3b0c6f(0x54d)]()!==_0x3b0c6f(0xb3b)&&_0x1497de[_0x3b0c6f(0x5fd)]([_0x2bd676]);}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0xaa1),_0x32bf5e=>{const _0x489fd7=_0x35b5eb;if(!SceneManager[_0x489fd7(0x3a2)]())return;VisuMZ[_0x489fd7(0x68f)](_0x32bf5e,_0x32bf5e);let _0x2b6325=_0x32bf5e[_0x489fd7(0x9fb)];_0x2b6325--,_0x2b6325=Math['max'](_0x2b6325,0x0);const _0x4a5db4=VisuMZ[_0x489fd7(0x43c)](_0x32bf5e[_0x489fd7(0x1bf)]);for(const _0x91c918 of _0x4a5db4){if(_0x489fd7(0xc4)===_0x489fd7(0xc4)){if(!_0x91c918)continue;if(!_0x91c918[_0x489fd7(0xa6f)]())continue;_0x91c918[_0x489fd7(0x617)](_0x2b6325);}else this[_0x489fd7(0xa1a)]();}}),PluginManager[_0x35b5eb(0xf3)](pluginData[_0x35b5eb(0x945)],'ActSeq_Zoom_Scale',_0x172acd=>{const _0x2ecc5d=_0x35b5eb;if(!SceneManager[_0x2ecc5d(0x3a2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x172acd,_0x172acd);const _0xc2b203=$gameTemp[_0x2ecc5d(0x657)](),_0x339d0c=_0x172acd['WaitForZoom'];if(!_0xc2b203)return;$gameScreen[_0x2ecc5d(0xa74)](_0x172acd['Scale'],_0x172acd['Duration'],_0x172acd[_0x2ecc5d(0x66c)]);if(_0x339d0c)_0xc2b203['setWaitMode'](_0x2ecc5d(0x12e));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0xad3),_0x101b26=>{const _0x5e3a7a=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5e3a7a(0x333)])return;VisuMZ[_0x5e3a7a(0x68f)](_0x101b26,_0x101b26);const _0x5e41a1=$gameTemp['getLastPluginCommandInterpreter'](),_0x48154b=_0x101b26['WaitForZoom'];if(!_0x5e41a1)return;$gameScreen[_0x5e3a7a(0xa74)](0x1,_0x101b26['Duration'],_0x101b26[_0x5e3a7a(0x66c)]);if(_0x48154b)_0x5e41a1[_0x5e3a7a(0x7fe)](_0x5e3a7a(0x12e));}),PluginManager[_0x35b5eb(0xf3)](pluginData['name'],_0x35b5eb(0x11c),_0xeae74d=>{const _0x49d4f3=_0x35b5eb;if(!SceneManager[_0x49d4f3(0x3a2)]())return;if(!Imported[_0x49d4f3(0x333)])return;const _0x4c5eea=$gameTemp[_0x49d4f3(0x657)]();if(!_0x4c5eea)return;_0x4c5eea['setWaitMode'](_0x49d4f3(0x12e));}),VisuMZ['BattleCore'][_0x35b5eb(0x3ad)]=Scene_Boot[_0x35b5eb(0x73b)][_0x35b5eb(0x22b)],Scene_Boot['prototype'][_0x35b5eb(0x22b)]=function(){const _0xaf49ea=_0x35b5eb;this[_0xaf49ea(0x2fb)](),this[_0xaf49ea(0x6ba)](),this[_0xaf49ea(0x12a)](),this[_0xaf49ea(0x847)](),VisuMZ[_0xaf49ea(0x781)]['Scene_Boot_onDatabaseLoaded'][_0xaf49ea(0x541)](this),this[_0xaf49ea(0x5c9)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0xaf49ea(0xb16)]();},Scene_Boot[_0x35b5eb(0x73b)][_0x35b5eb(0x5c9)]=function(){const _0x8cc8ff=_0x35b5eb;if(VisuMZ[_0x8cc8ff(0x4ce)])return;this[_0x8cc8ff(0x78d)](),this[_0x8cc8ff(0x63c)](),this[_0x8cc8ff(0x1de)]();},Scene_Boot[_0x35b5eb(0x73b)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x51e861=_0x35b5eb,_0x27a30b=$dataSystem[_0x51e861(0x832)][_0x51e861(0x1a0)];for(let _0x570fae=0x0;_0x570fae<_0x27a30b;_0x570fae++){if(_0x51e861(0x28c)!==_0x51e861(0x28c))this[_0x51e861(0x3d4)][_0x51e861(0x89a)]=_0x18465c['loadSvEnemy'](_0x556801),this[_0x51e861(0x3d4)]['bitmap'][_0x51e861(0x7ea)](this['createEmptyBitmap'][_0x51e861(0x4eb)](this));else{const _0x2aa249=$dataSystem[_0x51e861(0x4f2)][_0x570fae];if(_0x2aa249)continue;$dataSystem[_0x51e861(0x4f2)][_0x570fae]=JsonEx['makeDeepCopy']($dataSystem[_0x51e861(0x4f2)][0x0]);}}},Scene_Boot[_0x35b5eb(0x73b)][_0x35b5eb(0x6ba)]=function(){const _0x183bbf=_0x35b5eb,_0x555dd8=VisuMZ['BattleCore'][_0x183bbf(0x3cb)];_0x555dd8[_0x183bbf(0x165)]['PopupPosition']===undefined&&(_0x555dd8[_0x183bbf(0x165)][_0x183bbf(0x868)]=_0x183bbf(0xad1));_0x555dd8['Actor']['SmoothImage']===undefined&&(_0x555dd8['Actor']['SmoothImage']=![]);_0x555dd8[_0x183bbf(0xac3)][_0x183bbf(0x10d)]===undefined&&('ufDmz'==='hOhVW'?this[_0x183bbf(0x65b)](this[_0x183bbf(0x81e)]['_battler']):_0x555dd8[_0x183bbf(0xac3)]['SmoothImage']=!![]);if(_0x555dd8[_0x183bbf(0xb22)]['PrioritySortActive']===undefined){if(_0x183bbf(0x161)===_0x183bbf(0x161))_0x555dd8['Actor'][_0x183bbf(0xa92)]=![];else{if(this[_0x183bbf(0x113)][_0x183bbf(0x51b)](_0x1db0ea=>_0x1db0ea['item']()&&_0x1db0ea[_0x183bbf(0x861)]()))return!![];}}if(_0x555dd8[_0x183bbf(0xb22)][_0x183bbf(0x768)]===undefined){if(_0x183bbf(0x34d)!=='SugrF')_0x555dd8[_0x183bbf(0xb22)]['PrioritySortActors']=!![];else{if(!this[_0x183bbf(0xb0d)][_0x183bbf(0x934)]())return;while(this[_0x183bbf(0xb0d)][_0x183bbf(0x934)]()){this[_0x183bbf(0xb0d)][_0x183bbf(0x498)]()&&this[_0x183bbf(0x4ff)]();}this[_0x183bbf(0xb0d)]['clearDamagePopup'](),this[_0x183bbf(0xb0d)][_0x183bbf(0xdb)]();}}},VisuMZ['DamageStyles']={},Scene_Boot[_0x35b5eb(0x73b)][_0x35b5eb(0x12a)]=function(){const _0x23aeaa=_0x35b5eb;for(const _0x1c7e09 of VisuMZ[_0x23aeaa(0x781)]['Settings'][_0x23aeaa(0x165)]['DamageStyleList']){if(!_0x1c7e09)continue;const _0x4f6aec=_0x1c7e09[_0x23aeaa(0x3a0)][_0x23aeaa(0x3e7)]()[_0x23aeaa(0x54d)]();VisuMZ[_0x23aeaa(0x3fe)][_0x4f6aec]=_0x1c7e09;}},VisuMZ[_0x35b5eb(0x781)]['RegExp']={},Scene_Boot['prototype'][_0x35b5eb(0x847)]=function(){const _0x3b0d82=_0x35b5eb,_0x3f37dd=VisuMZ[_0x3b0d82(0x781)][_0x3b0d82(0x984)],_0x55286a=_0x3b0d82(0x5f3),_0xd7319e=[[_0x3b0d82(0xa3d),_0x3b0d82(0x39e)],[_0x3b0d82(0x66a),_0x3b0d82(0x6ee)]],_0x47dc5e=[['%1Apply%2JS',_0x3b0d82(0xa3f)],['%1Damage%2JS',_0x3b0d82(0x9da)]],_0x373639=[['',''],[_0x3b0d82(0xa59),_0x3b0d82(0x370)],[_0x3b0d82(0x96d),_0x3b0d82(0x9a8)]];for(const _0x4064dd of _0x47dc5e){for(const _0x3c37a2 of _0x373639){for(const _0x29b0fb of _0xd7319e){const _0x52580c=_0x4064dd[0x0][_0x3b0d82(0x4ed)](_0x29b0fb[0x0],_0x3c37a2[0x0]),_0x59eadd=_0x4064dd[0x1][_0x3b0d82(0x4ed)](_0x29b0fb[0x1],_0x3c37a2[0x1])[_0x3b0d82(0x54d)](),_0x33d99a=new RegExp(_0x55286a[_0x3b0d82(0x4ed)](_0x59eadd),'i');_0x3f37dd[_0x52580c]=_0x33d99a;}}}const _0x43d10c=[[_0x3b0d82(0x415),'JS\x20%1START\x20ACTION'],[_0x3b0d82(0xab4),_0x3b0d82(0xa73)]];for(const _0x96f72 of _0x43d10c){for(const _0x30d9c1 of _0xd7319e){const _0x318701=_0x96f72[0x0][_0x3b0d82(0x4ed)](_0x30d9c1[0x0]),_0x487967=_0x96f72[0x1][_0x3b0d82(0x4ed)](_0x30d9c1[0x1]),_0x559d08=new RegExp(_0x55286a[_0x3b0d82(0x4ed)](_0x487967),'i');_0x3f37dd[_0x318701]=_0x559d08;}}const _0x540753=[[_0x3b0d82(0x497),_0x3b0d82(0xa81)],[_0x3b0d82(0x5cf),'JS\x20%1END\x20BATTLE'],['BattleVictoryJS',_0x3b0d82(0x884)],[_0x3b0d82(0x70a),'JS\x20BATTLE\x20DEFEAT'],[_0x3b0d82(0x618),'JS\x20ESCAPE\x20SUCCESS'],[_0x3b0d82(0x822),_0x3b0d82(0x9f7)],[_0x3b0d82(0x18c),'JS\x20%1START\x20TURN'],[_0x3b0d82(0x638),_0x3b0d82(0x805)],[_0x3b0d82(0x834),_0x3b0d82(0xa08)]];for(const _0x161582 of _0x540753){for(const _0xeee656 of _0xd7319e){const _0x49537d=_0x161582[0x0][_0x3b0d82(0x4ed)](_0xeee656[0x0]),_0x4a977d=_0x161582[0x1][_0x3b0d82(0x4ed)](_0xeee656[0x1]),_0x4becd9=new RegExp(_0x55286a[_0x3b0d82(0x4ed)](_0x4a977d),'i');_0x3f37dd[_0x49537d]=_0x4becd9;}}},Scene_Boot[_0x35b5eb(0x73b)][_0x35b5eb(0x78d)]=function(){const _0x4d0ef2=_0x35b5eb,_0x2ad89a=$dataSkills[_0x4d0ef2(0x992)]($dataItems);for(const _0x303e15 of _0x2ad89a){if(!_0x303e15)continue;VisuMZ[_0x4d0ef2(0x781)][_0x4d0ef2(0x2b7)](_0x303e15);}},Scene_Boot[_0x35b5eb(0x73b)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x54db6b=_0x35b5eb,_0x2d82e9=$dataActors[_0x54db6b(0x992)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x34f4c5 of _0x2d82e9){if(_0x54db6b(0x793)==='tvsSn')_0x257211['collapse']=![];else{if(!_0x34f4c5)continue;VisuMZ[_0x54db6b(0x781)]['Parse_Notetags_TraitObjects'](_0x34f4c5);}}},Scene_Boot['prototype'][_0x35b5eb(0x505)]=function(){const _0x210564=_0x35b5eb,_0x13a020=VisuMZ['BattleCore']['Settings'][_0x210564(0x450)][_0x210564(0x1f8)],_0x25e309=[];for(const _0x31a8b5 of _0x13a020){if(_0x210564(0xa61)!==_0x210564(0x4ea)){const _0x35529a=$dataTroops[_0x31a8b5];if(_0x35529a)_0x25e309[_0x210564(0x7c7)](JsonEx['makeDeepCopy'](_0x35529a));}else{let _0x2babbf=_0x3dba36(_0x5bf4bb['$1']);while(_0x2babbf--){const _0x5ab108=_0x591419[_0x210564(0x8a0)](0x2)===0x0?this['opponentsUnit']():this[_0x210564(0xa91)]();_0x2d11fb[_0x210564(0x7c7)](_0x5ab108[_0x210564(0x595)]());}return this[_0x210564(0x3e6)](_0x5723bf);}}for(const _0x50bd0c of $dataTroops){if(_0x210564(0x293)==='wlGGS'){if(!_0x50bd0c)continue;for(const _0x24fd62 of _0x25e309){if(_0x24fd62['id']===_0x50bd0c['id'])continue;_0x50bd0c[_0x210564(0xa90)]=_0x50bd0c[_0x210564(0xa90)][_0x210564(0x992)](_0x24fd62['pages']);}}else{if(this['x']===0x0)this['x']=_0x3ecc70[_0x210564(0x3d5)](_0x3ebf0d[_0x210564(0x91c)]/0x2);if(this['y']===0x0)this['y']=_0x586516[_0x210564(0x3d5)](_0x58d66f[_0x210564(0x491)]/0x2);}}},Scene_Boot['prototype'][_0x35b5eb(0x38c)]=function(){const _0x2c48a7=_0x35b5eb,_0x34c658=VisuMZ[_0x2c48a7(0x781)][_0x2c48a7(0x3cb)]['Mechanics'];if(_0x34c658[_0x2c48a7(0x4e9)]>0x0&&$dataCommonEvents[_0x34c658[_0x2c48a7(0x4e9)]]){const _0x49a126=$dataCommonEvents[_0x34c658['BattleStartEvent']],_0x211cd5=_0x49a126['list'][_0x2c48a7(0x1a0)]-0x2,_0xdf5ee7=_0x49a126[_0x2c48a7(0x8d0)][_0x211cd5];if(_0xdf5ee7&&_0xdf5ee7[_0x2c48a7(0x72d)]!==0xe6){if(_0x2c48a7(0x795)===_0x2c48a7(0x795)){const _0x3669b3={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x264d27=_0x49a126['list'][_0x2c48a7(0xb07)]();_0x49a126[_0x2c48a7(0x8d0)]['unshift'](_0x3669b3),_0x49a126[_0x2c48a7(0x8d0)][_0x2c48a7(0x89e)](_0x264d27);}else{if(!_0xb6b2e5[_0x2c48a7(0x3a2)]())return;if(!_0x30ea5e[_0x2c48a7(0xa1c)])return;if(!_0x3d1442['isFTB']())return;_0x4b015d[_0x2c48a7(0x68f)](_0x2821e6,_0x5d9225);const _0x43032f=_0x53c1ff[_0x2c48a7(0xabc)];_0x4113a3['_subject']&&_0x198b8a['_subject'][_0x2c48a7(0xa91)]()[_0x2c48a7(0xbc)](_0x43032f);}}}},Scene_Boot[_0x35b5eb(0x73b)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x5b3d07=_0x35b5eb;VisuMZ[_0x5b3d07(0x781)][_0x5b3d07(0x1fd)](),VisuMZ[_0x5b3d07(0x781)][_0x5b3d07(0x958)]($dataSkills),VisuMZ[_0x5b3d07(0x781)][_0x5b3d07(0x958)]($dataItems);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x1fd)]=function(){const _0x5d80cc=_0x35b5eb;VisuMZ[_0x5d80cc(0x781)]['_commonEventKey']={};for(const _0xb693e5 of $dataCommonEvents){if('BYyIK'===_0x5d80cc(0x218)){if(!_0xb693e5)continue;if(_0xb693e5['name']['match'](/\[(.*)\]/i)){if(_0x5d80cc(0xb23)!==_0x5d80cc(0x652)){let _0x346d2d=String(RegExp['$1'])['replace'](/,/g,'')[_0x5d80cc(0x3e7)]()[_0x5d80cc(0x54d)]();VisuMZ[_0x5d80cc(0x781)]['_commonEventKey'][_0x346d2d]=_0xb693e5['id'];}else return _0x135f00[_0x5d80cc(0x781)][_0x5d80cc(0x3cb)][_0x5d80cc(0x141)][_0x5d80cc(0x7b5)];}}else this[_0x5d80cc(0x808)][_0x5d80cc(0x1f4)]=_0x580dd4[_0x5d80cc(0x6c9)](),this[_0x5d80cc(0x808)][_0x5d80cc(0xd4)]=_0x4c037b[_0x5d80cc(0xa07)]();}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x958)]=function(_0x69c4f3){const _0x481707=_0x35b5eb;for(const _0x3c4fbe of _0x69c4f3){if(!_0x3c4fbe)continue;VisuMZ['BattleCore'][_0x481707(0x9a6)](_0x3c4fbe);}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x9a6)]=function(_0x128fd0){const _0x534823=_0x35b5eb;if(!_0x128fd0)return;if(!_0x128fd0[_0x534823(0x336)])return;VisuMZ[_0x534823(0x781)][_0x534823(0x38a)]=VisuMZ[_0x534823(0x781)][_0x534823(0x38a)]||{};const _0x52cbf4=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x3ba728=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x47450f=[];const _0x11f5c3=_0x128fd0['note'][_0x534823(0x111)](_0x52cbf4);if(_0x11f5c3){for(const _0x36fff8 of _0x11f5c3){_0x36fff8[_0x534823(0x111)](_0x52cbf4);const _0x390d9d=String(RegExp['$1'])[_0x534823(0x8b8)](',')[_0x534823(0x3dd)](_0x42bf51=>String(_0x42bf51)[_0x534823(0x3e7)]()[_0x534823(0x54d)]());_0x47450f=_0x47450f['concat'](_0x390d9d);}!_0x128fd0[_0x534823(0x7fd)][_0x534823(0x111)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x128fd0[_0x534823(0x7fd)]+=_0x534823(0x1a8));;}if(_0x128fd0[_0x534823(0x7fd)]['match'](_0x3ba728)){const _0x5b7eda=String(RegExp['$1'])[_0x534823(0x8b8)](/[\r\n]+/)[_0x534823(0x3dd)](_0x286951=>String(_0x286951)[_0x534823(0x3e7)]()[_0x534823(0x54d)]());_0x47450f=_0x47450f[_0x534823(0x992)](_0x5b7eda);if(!_0x128fd0[_0x534823(0x7fd)][_0x534823(0x111)](/<CUSTOM ACTION SEQUENCE>/i)){if('vXaTE'!==_0x534823(0xafa))_0x128fd0[_0x534823(0x7fd)]+=_0x534823(0x1a8);else{_0x21cc19[_0x534823(0x73b)][_0x534823(0xe6)][_0x534823(0x541)](this);const _0x95a489=this['_actor'][_0x534823(0x5e4)]();this[_0x534823(0x260)]!==_0x95a489&&(this[_0x534823(0x260)]=_0x95a489,this[_0x534823(0x3d4)]['bitmap']=_0x108bde[_0x534823(0x355)](_0x95a489)),this[_0x534823(0x3d4)]&&this['_mainSprite'][_0x534823(0x89a)]&&this[_0x534823(0xb0d)]&&(this[_0x534823(0x3d4)][_0x534823(0x89a)][_0x534823(0x306)]!==this[_0x534823(0xb0d)][_0x534823(0x231)]()&&(this[_0x534823(0x3d4)][_0x534823(0x89a)]['smooth']=this[_0x534823(0xb0d)][_0x534823(0x231)]()));}};}for(const _0xafa6b2 of _0x47450f){if(_0x534823(0x262)===_0x534823(0xa44))this[_0x534823(0x1be)]=0x0;else{if(VisuMZ['BattleCore'][_0x534823(0x38a)][_0xafa6b2]){const _0x402ea4=VisuMZ[_0x534823(0x781)][_0x534823(0x38a)][_0xafa6b2],_0x24ad19={'code':0x2c,'dataId':_0x402ea4,'value1':0x1,'value2':0x0};_0x128fd0[_0x534823(0x336)]['push'](_0x24ad19);}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x3e16db=_0x35b5eb,_0x2f445f=$dataSkills[_0x3e16db(0x992)]($dataItems);for(const _0x2748b1 of _0x2f445f){if(!_0x2748b1)continue;VisuMZ['BattleCore'][_0x3e16db(0x55e)](_0x2748b1);}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x50b)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x35b5eb(0x50b)]=function(_0x58e973){const _0x133d10=_0x35b5eb;VisuMZ[_0x133d10(0x781)]['ParseActorNotetags']&&VisuMZ['BattleCore'][_0x133d10(0x50b)][_0x133d10(0x541)](this,_0x58e973),VisuMZ[_0x133d10(0x781)][_0x133d10(0x3ce)](_0x58e973);},VisuMZ['BattleCore']['ParseClassNotetags']=VisuMZ[_0x35b5eb(0x7b0)],VisuMZ[_0x35b5eb(0x7b0)]=function(_0x49bce5){const _0x1fea38=_0x35b5eb;VisuMZ[_0x1fea38(0x781)][_0x1fea38(0x7b0)]&&VisuMZ[_0x1fea38(0x781)][_0x1fea38(0x7b0)][_0x1fea38(0x541)](this,_0x49bce5),VisuMZ[_0x1fea38(0x781)]['Parse_Notetags_TraitObjects'](_0x49bce5);},VisuMZ['BattleCore'][_0x35b5eb(0x9bc)]=VisuMZ[_0x35b5eb(0x9bc)],VisuMZ['ParseSkillNotetags']=function(_0x2f15fa){const _0x27a7a5=_0x35b5eb;VisuMZ[_0x27a7a5(0x781)][_0x27a7a5(0x9bc)]&&VisuMZ[_0x27a7a5(0x781)][_0x27a7a5(0x9bc)][_0x27a7a5(0x541)](this,_0x2f15fa),VisuMZ[_0x27a7a5(0x781)][_0x27a7a5(0x2b7)](_0x2f15fa),VisuMZ['BattleCore'][_0x27a7a5(0x55e)](_0x2f15fa);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x1df)]=VisuMZ[_0x35b5eb(0x1df)],VisuMZ[_0x35b5eb(0x1df)]=function(_0x11bb9e){const _0x1ee493=_0x35b5eb;VisuMZ[_0x1ee493(0x781)][_0x1ee493(0x1df)]&&VisuMZ['BattleCore'][_0x1ee493(0x1df)][_0x1ee493(0x541)](this,_0x11bb9e),VisuMZ[_0x1ee493(0x781)][_0x1ee493(0x2b7)](_0x11bb9e),VisuMZ[_0x1ee493(0x781)]['Parse_Notetags_Targets'](_0x11bb9e);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x6b3)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x35b5eb(0x6b3)]=function(_0x5f5af8){const _0xf4eb0a=_0x35b5eb;VisuMZ['BattleCore']['ParseWeaponNotetags']&&(_0xf4eb0a(0x493)===_0xf4eb0a(0x493)?VisuMZ[_0xf4eb0a(0x781)]['ParseWeaponNotetags'][_0xf4eb0a(0x541)](this,_0x5f5af8):(_0x26c2ff+=_0x128bb7,_0x31a5f6+=_0x166ac0[_0xf4eb0a(0xa6f)]()?-_0x5bfc0b:_0x44279d)),VisuMZ[_0xf4eb0a(0x781)][_0xf4eb0a(0x3ce)](_0x5f5af8);},VisuMZ['BattleCore'][_0x35b5eb(0x9be)]=VisuMZ[_0x35b5eb(0x9be)],VisuMZ[_0x35b5eb(0x9be)]=function(_0x5ddb33){const _0x56fa6b=_0x35b5eb;VisuMZ[_0x56fa6b(0x781)][_0x56fa6b(0x9be)]&&VisuMZ['BattleCore'][_0x56fa6b(0x9be)]['call'](this,_0x5ddb33),VisuMZ['BattleCore'][_0x56fa6b(0x3ce)](_0x5ddb33);},VisuMZ[_0x35b5eb(0x781)]['ParseEnemyNotetags']=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x35b5eb(0x75a)]=function(_0x179cfd){const _0x33209e=_0x35b5eb;VisuMZ[_0x33209e(0x781)][_0x33209e(0x75a)]&&(_0x33209e(0x65f)==='KxSds'?(this[_0x33209e(0x89e)](_0x33209e(0x6a8)),_0x38d8e4['invokeAction'](_0x21eb7b,_0x4a7b8d),this[_0x33209e(0xa1a)]()):VisuMZ[_0x33209e(0x781)][_0x33209e(0x75a)][_0x33209e(0x541)](this,_0x179cfd)),VisuMZ[_0x33209e(0x781)]['Parse_Notetags_TraitObjects'](_0x179cfd);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xfc)]=VisuMZ['ParseStateNotetags'],VisuMZ[_0x35b5eb(0xfc)]=function(_0x33bfe1){const _0x4d4987=_0x35b5eb;VisuMZ[_0x4d4987(0x781)][_0x4d4987(0xfc)]&&VisuMZ[_0x4d4987(0x781)]['ParseStateNotetags'][_0x4d4987(0x541)](this,_0x33bfe1),VisuMZ[_0x4d4987(0x781)][_0x4d4987(0x3ce)](_0x33bfe1);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x2b7)]=function(_0xf1322f){const _0x25bb97=_0x35b5eb,_0x579eae=[_0x25bb97(0xa09),_0x25bb97(0x9aa),_0x25bb97(0x434),_0x25bb97(0x499),_0x25bb97(0x3a1),'PostStartActionJS',_0x25bb97(0x6f9),_0x25bb97(0x628)];for(const _0x3ec47d of _0x579eae){_0x25bb97(0x1a6)==='GlvnX'?(_0x43370c['BattleCore'][_0x25bb97(0x7a0)]['call'](this,_0x4ebeb4),this[_0x25bb97(0xa1a)]()):VisuMZ[_0x25bb97(0x781)][_0x25bb97(0x42a)](_0xf1322f,_0x3ec47d);}const _0x11a645=_0xf1322f[_0x25bb97(0x7fd)];_0x11a645[_0x25bb97(0x111)](/<ALWAYS CRITICAL/i)&&(_0xf1322f['damage'][_0x25bb97(0x936)]=!![]);if(_0x11a645[_0x25bb97(0x111)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if(_0x25bb97(0x892)!==_0x25bb97(0x892)){if(!_0x300f01)return;if(!this[_0x25bb97(0x2f1)](_0x44fc7a))return;const _0x4e3779=this[_0x25bb97(0x239)](),_0x573a6d=_0x12ca5e[_0x25bb97(0x7ac)](_0xacc2a9),_0x215e7f=_0x4cb977[_0x25bb97(0x31c)](_0x107901),_0x3f967e=_0x4e3779==='text'?_0x573a6d:_0x25bb97(0x901)['format'](_0x215e7f,_0x573a6d),_0x2af671=this[_0x25bb97(0x238)][_0x25bb97(0x95c)](_0x8020cc);this[_0x25bb97(0x675)](_0x3f967e,'singleSkill',_0x2af671,_0x5cb11d['id']);}else _0xf1322f['repeats']=Math[_0x25bb97(0x2a3)](0x1,Number(RegExp['$1']));}_0x11a645[_0x25bb97(0x111)](/<TARGET:[ ](.*)>/i)&&(_0xf1322f[_0x25bb97(0xab6)]=String(RegExp['$1'])['toUpperCase']()['trim']());},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x3ce)]=function(_0x5a22ca){const _0x3edb32=_0x35b5eb,_0x56bec0=[_0x3edb32(0x107),_0x3edb32(0x62a),_0x3edb32(0x99c),_0x3edb32(0x7e0),_0x3edb32(0x29f),_0x3edb32(0x463),_0x3edb32(0x2fc),'PostDamageAsTargetJS',_0x3edb32(0x3a1),_0x3edb32(0x247),'PreEndActionJS',_0x3edb32(0x628),_0x3edb32(0x282),'PostStartBattleJS',_0x3edb32(0x5e8),_0x3edb32(0x537),_0x3edb32(0x577),_0x3edb32(0x70a),_0x3edb32(0x618),'EscapeFailureJS',_0x3edb32(0x292),_0x3edb32(0x597),_0x3edb32(0x692),_0x3edb32(0x28f),'PreRegenerateJS','PostRegenerateJS'];for(const _0x4f79e8 of _0x56bec0){VisuMZ[_0x3edb32(0x781)][_0x3edb32(0x42a)](_0x5a22ca,_0x4f79e8);}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x55e)]=function(_0x2aa5c5){const _0x44d014=_0x35b5eb,_0x26afc5=_0x2aa5c5['note'];if(_0x26afc5[_0x44d014(0x111)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if(_0x44d014(0x45a)===_0x44d014(0x45a)){const _0x3a7894=String(RegExp['$1']),_0xbeb228=VisuMZ[_0x44d014(0x781)][_0x44d014(0x82f)](_0x2aa5c5,_0x44d014(0x1bf));VisuMZ[_0x44d014(0x781)][_0x44d014(0x47c)](_0x3a7894,_0xbeb228);}else{if(!_0x4abfa2[_0x44d014(0x3a2)]())return;_0x9a4ab9[_0x44d014(0x68f)](_0x349c8c,_0x34bb86);const _0x5eaa91=_0x2fb90f[_0x44d014(0x657)](),_0x41c1bf=_0x5c3c08[_0x44d014(0x8ec)];if(!_0x5eaa91)return;_0x4db213[_0x44d014(0x26e)]++,_0x4f6593[_0x44d014(0x8a2)]=_0xb99f63[_0x44d014(0x241)][_0x1d1ed2[_0x44d014(0x26e)]]||null,_0x55062c['_target']&&_0x41c1bf[_0x44d014(0x3e7)]()[_0x44d014(0x54d)]()!==_0x44d014(0xb3b)&&_0x5eaa91[_0x44d014(0x5fd)]([_0x41c1bf]);}}if(_0x26afc5['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x552b17=String(RegExp['$1']),_0x350ee6=VisuMZ[_0x44d014(0x781)][_0x44d014(0x82f)](_0x2aa5c5,_0x44d014(0x404));VisuMZ[_0x44d014(0x781)][_0x44d014(0x73e)](_0x552b17,_0x350ee6);}},VisuMZ[_0x35b5eb(0x781)]['JS']={},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x42a)]=function(_0x283b07,_0xeebf4f){const _0x4649d7=_0x35b5eb,_0x353409=_0x283b07[_0x4649d7(0x7fd)];if(_0x353409[_0x4649d7(0x111)](VisuMZ['BattleCore'][_0x4649d7(0x984)][_0xeebf4f])){const _0x1bf0bf=RegExp['$1'],_0x4a04fc='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x4649d7(0x4ed)](_0x1bf0bf),_0x4ae21c=VisuMZ['BattleCore'][_0x4649d7(0x82f)](_0x283b07,_0xeebf4f);VisuMZ[_0x4649d7(0x781)]['JS'][_0x4ae21c]=new Function(_0x4a04fc);}},VisuMZ['BattleCore']['createKeyJS']=function(_0x1f00e0,_0x32dfb9){const _0x5be5b8=_0x35b5eb;let _0xb9f741='';if($dataActors[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741='Actor-%1-%2'[_0x5be5b8(0x4ed)](_0x1f00e0['id'],_0x32dfb9);if($dataClasses[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741=_0x5be5b8(0x258)[_0x5be5b8(0x4ed)](_0x1f00e0['id'],_0x32dfb9);if($dataSkills[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741=_0x5be5b8(0xce)['format'](_0x1f00e0['id'],_0x32dfb9);if($dataItems[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741=_0x5be5b8(0x5a7)[_0x5be5b8(0x4ed)](_0x1f00e0['id'],_0x32dfb9);if($dataWeapons[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741=_0x5be5b8(0x778)['format'](_0x1f00e0['id'],_0x32dfb9);if($dataArmors[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741=_0x5be5b8(0x15a)[_0x5be5b8(0x4ed)](_0x1f00e0['id'],_0x32dfb9);if($dataEnemies[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741=_0x5be5b8(0x665)['format'](_0x1f00e0['id'],_0x32dfb9);if($dataStates[_0x5be5b8(0x87d)](_0x1f00e0))_0xb9f741=_0x5be5b8(0x811)['format'](_0x1f00e0['id'],_0x32dfb9);return _0xb9f741;},VisuMZ['BattleCore'][_0x35b5eb(0x47c)]=function(_0x19340b,_0xdc7d0b){const _0x13c8ca=_0x35b5eb,_0x1eda05=_0x13c8ca(0xa63)[_0x13c8ca(0x4ed)](_0x19340b);VisuMZ['BattleCore']['JS'][_0xdc7d0b]=new Function(_0x1eda05);},VisuMZ['BattleCore'][_0x35b5eb(0x73e)]=function(_0x37dbdc,_0x43bd7d){const _0x4b8955=_0x35b5eb,_0x4d5d7b=_0x4b8955(0x6d6)[_0x4b8955(0x4ed)](_0x37dbdc);VisuMZ[_0x4b8955(0x781)]['JS'][_0x43bd7d]=new Function(_0x4d5d7b);},TextManager['autoBattle']=VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x35b5eb(0xa60)],TextManager[_0x35b5eb(0x9e8)]=VisuMZ[_0x35b5eb(0x781)]['Settings'][_0x35b5eb(0x93c)][_0x35b5eb(0x14a)],TextManager[_0x35b5eb(0x918)]=VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x3cb)][_0x35b5eb(0x93c)][_0x35b5eb(0x2ec)],TextManager['visualHpGauge']=VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x3cb)][_0x35b5eb(0x478)][_0x35b5eb(0x3a0)],ColorManager['getColor']=function(_0x35ea8c){const _0x1bfaab=_0x35b5eb;return _0x35ea8c=String(_0x35ea8c),_0x35ea8c[_0x1bfaab(0x111)](/#(.*)/i)?_0x1bfaab(0x320)[_0x1bfaab(0x4ed)](String(RegExp['$1'])):this['textColor'](Number(_0x35ea8c));},DataManager[_0x35b5eb(0x4be)]=function(_0x5b83b6){const _0x439814=_0x35b5eb;if(_0x5b83b6[_0x439814(0x7fd)][_0x439814(0x111)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x89bdbb=String(RegExp['$1'])[_0x439814(0x3e7)]()['trim']();if(_0x89bdbb==='MANUAL')return _0x439814(0x1ba);if(VisuMZ[_0x439814(0x3fe)][_0x89bdbb])return _0x89bdbb;}const _0x1db601=VisuMZ[_0x439814(0x781)][_0x439814(0x3cb)][_0x439814(0x165)][_0x439814(0x8bc)][_0x439814(0x3e7)]()[_0x439814(0x54d)]();if(VisuMZ[_0x439814(0x3fe)][_0x1db601])return _0x1db601;return'MANUAL';},DataManager[_0x35b5eb(0x7b2)]=function(_0x1637f3){const _0x59ebab=_0x35b5eb;_0x1637f3=_0x1637f3['toUpperCase']()['trim'](),this[_0x59ebab(0x9c0)]=this['_stypeIDs']||{};if(this[_0x59ebab(0x9c0)][_0x1637f3])return this['_stypeIDs'][_0x1637f3];for(let _0x119aae=0x1;_0x119aae<0x64;_0x119aae++){if(!$dataSystem[_0x59ebab(0x8b1)][_0x119aae])continue;let _0x24097e=$dataSystem[_0x59ebab(0x8b1)][_0x119aae][_0x59ebab(0x3e7)]()['trim']();_0x24097e=_0x24097e['replace'](/\x1I\[(\d+)\]/gi,''),_0x24097e=_0x24097e[_0x59ebab(0x125)](/\\I\[(\d+)\]/gi,''),this[_0x59ebab(0x9c0)][_0x24097e]=_0x119aae;}return this[_0x59ebab(0x9c0)][_0x1637f3]||0x0;},DataManager[_0x35b5eb(0x52f)]=function(_0x599e83){const _0x25db6f=_0x35b5eb;_0x599e83=_0x599e83['toUpperCase']()['trim'](),this[_0x25db6f(0x8a9)]=this['_skillIDs']||{};if(this['_skillIDs'][_0x599e83])return this[_0x25db6f(0x8a9)][_0x599e83];for(const _0x195da5 of $dataSkills){if(!_0x195da5)continue;this[_0x25db6f(0x8a9)][_0x195da5['name'][_0x25db6f(0x3e7)]()[_0x25db6f(0x54d)]()]=_0x195da5['id'];}return this[_0x25db6f(0x8a9)][_0x599e83]||0x0;},DataManager[_0x35b5eb(0x140)]=function(_0x5b15aa){const _0x44b07d=_0x35b5eb;_0x5b15aa=_0x5b15aa['toUpperCase']()[_0x44b07d(0x54d)](),this[_0x44b07d(0x353)]=this[_0x44b07d(0x353)]||{};if(this['_enemyIDs'][_0x5b15aa])return this[_0x44b07d(0x353)][_0x5b15aa];for(const _0x2d8ac6 of $dataEnemies){if(!_0x2d8ac6)continue;this['_enemyIDs'][_0x2d8ac6['name']['toUpperCase']()['trim']()]=_0x2d8ac6['id'];}return this[_0x44b07d(0x353)][_0x5b15aa]||0x0;},DataManager[_0x35b5eb(0x6ea)]=function(_0x447dde){const _0x229a69=_0x35b5eb;_0x447dde=_0x447dde[_0x229a69(0x3e7)]()[_0x229a69(0x54d)](),this[_0x229a69(0xb0b)]=this['_wtypeIDs']||{};if(this[_0x229a69(0xb0b)][_0x447dde])return this[_0x229a69(0xb0b)][_0x447dde];for(let _0x5c315f=0x1;_0x5c315f<0x64;_0x5c315f++){if(!$dataSystem[_0x229a69(0x832)][_0x5c315f])continue;let _0x238652=$dataSystem[_0x229a69(0x832)][_0x5c315f]['toUpperCase']()[_0x229a69(0x54d)]();_0x238652=_0x238652[_0x229a69(0x125)](/\x1I\[(\d+)\]/gi,''),_0x238652=_0x238652['replace'](/\\I\[(\d+)\]/gi,''),this[_0x229a69(0xb0b)][_0x238652]=_0x5c315f;}return this[_0x229a69(0xb0b)]['BARE\x20HANDS']=0x0,this[_0x229a69(0xb0b)][_0x447dde]||0x0;},DataManager[_0x35b5eb(0xa43)]=function(_0x3ad62e){const _0x4c629c=_0x35b5eb,_0x3a3bb9='\x5cI[%1]%2';let _0x101414=_0x3ad62e[_0x4c629c(0x492)],_0x245e54=_0x3ad62e['name'];const _0x52f309=_0x3ad62e['note'];return _0x52f309[_0x4c629c(0x111)](/<DISPLAY ICON: (\d+)>/i)&&('aczSG'===_0x4c629c(0x716)?_0x101414=Number(RegExp['$1']):(!_0xd51392[_0x4c629c(0x2ae)]()[_0x4c629c(0x87d)](this[_0x4c629c(0x365)])&&(this[_0x4c629c(0x365)]=null),this[_0x4c629c(0x365)]?(this[_0x4c629c(0xafe)]=this['_tpbSceneChangeCacheActor'],this[_0x4c629c(0xafe)][_0x4c629c(0x560)]=_0x4c629c(0x908),this['_inputting']=!![],this[_0x4c629c(0x365)]=null):(this['cancelActorInput'](),this['_currentActor']=null,this[_0x4c629c(0x82e)]=![]))),_0x52f309[_0x4c629c(0x111)](/<DISPLAY TEXT: (.*)>/i)&&(_0x245e54=String(RegExp['$1'])),_0x3a3bb9[_0x4c629c(0x4ed)](_0x101414,_0x245e54);},DataManager[_0x35b5eb(0x7ac)]=function(_0x13ca9c){const _0x5609e6=_0x35b5eb;if(_0x13ca9c[_0x5609e6(0x7fd)][_0x5609e6(0x111)](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if(_0x5609e6(0xa55)!=='rRBQL')return _0x13ca9c['name'];else _0xce97e4[_0x5609e6(0x73b)][_0x5609e6(0x255)][_0x5609e6(0x541)](this);}},DataManager[_0x35b5eb(0x31c)]=function(_0x1d69d4){return _0x1d69d4['note']['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x1d69d4['iconIndex'];},DataManager[_0x35b5eb(0x8b3)]=function(_0x361129){const _0x546480=_0x35b5eb,_0x46d99c=$dataEnemies[_0x361129];if(_0x46d99c){if(_0x46d99c[_0x546480(0x7fd)][_0x546480(0x111)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x3e10ce=String(RegExp['$1'])[_0x546480(0x8b8)](/[\r\n]+/)['remove'](''),_0x381f43=this[_0x546480(0x96e)](_0x3e10ce);_0x361129=this['getEnemyIdWithName'](_0x381f43)||_0x361129,_0x361129=DataManager[_0x546480(0x8b3)](_0x361129);}}return _0x361129;},DataManager[_0x35b5eb(0x96e)]=function(_0x56b457){const _0x1df92b=_0x35b5eb;let _0xe9f45f=0x0;const _0x2088e5={};for(const _0x488312 of _0x56b457){if(_0x488312[_0x1df92b(0x111)](/(.*):[ ](\d+)/i)){if('TDCJf'===_0x1df92b(0x444))return this[_0x1df92b(0x48f)]=this[_0x1df92b(0x48f)]||{},this[_0x1df92b(0x48f)][_0x47a59f]!==_0x23075e;else{const _0xf1553=String(RegExp['$1'])[_0x1df92b(0x54d)](),_0x3e8818=Number(RegExp['$2']);_0x2088e5[_0xf1553]=_0x3e8818,_0xe9f45f+=_0x3e8818;}}else{if(_0x488312['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x2d7611=String(RegExp['$1'])[_0x1df92b(0x54d)](),_0x92d051=Number(RegExp['$2']);_0x2088e5[_0x2d7611]=_0x92d051,_0xe9f45f+=_0x92d051;}else _0x488312!==''&&(_0x2088e5[_0x488312]=0x1,_0xe9f45f++);}}if(_0xe9f45f<=0x0)return'';let _0x4b5966=Math['random']()*_0xe9f45f;for(const _0x31912d in _0x2088e5){_0x4b5966-=_0x2088e5[_0x31912d];if(_0x4b5966<=0x0)return _0x31912d;}return'';},DataManager['checkAutoCustomActionSequenceNotetagEffect']=function(_0x1aa118){const _0x18dace=_0x35b5eb;if(!_0x1aa118)return![];if(!VisuMZ['BattleCore'][_0x18dace(0x3cb)][_0x18dace(0x421)][_0x18dace(0x94a)])return![];if(_0x1aa118[_0x18dace(0x7fd)][_0x18dace(0x111)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1aa118[_0x18dace(0x7fd)][_0x18dace(0x111)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x358a25 of _0x1aa118['effects']){if(!_0x358a25)continue;if(_0x358a25[_0x18dace(0x72d)]===Game_Action[_0x18dace(0x37b)])return!![];}return![];},DataManager[_0x35b5eb(0xb39)]=function(_0x22702e){const _0x39541c=_0x35b5eb,_0xdfdb96=$dataTroops[_0x22702e];if(!_0xdfdb96)return'';let _0x19510e='';_0x19510e+=_0xdfdb96[_0x39541c(0x945)];for(const _0x596160 of _0xdfdb96['pages']){if(_0x39541c(0x78a)!==_0x39541c(0x78a))this['padding']=0x8;else for(const _0x588ccd of _0x596160[_0x39541c(0x8d0)]){[0x6c,0x198][_0x39541c(0x87d)](_0x588ccd[_0x39541c(0x72d)])&&(_0x19510e+='\x0a',_0x19510e+=_0x588ccd[_0x39541c(0x75c)][0x0]);}}return _0x19510e;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x35b5eb(0x964)]??![],ConfigManager[_0x35b5eb(0x64b)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x35b5eb(0x777)]=ConfigManager[_0x35b5eb(0x777)]??!![],VisuMZ[_0x35b5eb(0x781)]['ConfigManager_makeData']=ConfigManager['makeData'],ConfigManager[_0x35b5eb(0x705)]=function(){const _0x2e88c9=_0x35b5eb,_0x4af5fb=VisuMZ['BattleCore'][_0x2e88c9(0x7a8)][_0x2e88c9(0x541)](this);return _0x4af5fb[_0x2e88c9(0x964)]=this[_0x2e88c9(0x964)],_0x4af5fb[_0x2e88c9(0x64b)]=this[_0x2e88c9(0x64b)],_0x4af5fb[_0x2e88c9(0x777)]=this[_0x2e88c9(0x777)],_0x4af5fb;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x64e)]=ConfigManager[_0x35b5eb(0x5b6)],ConfigManager['applyData']=function(_0x5435a1){const _0x2358c4=_0x35b5eb;VisuMZ[_0x2358c4(0x781)]['ConfigManager_applyData'][_0x2358c4(0x541)](this,_0x5435a1);_0x2358c4(0x964)in _0x5435a1?this[_0x2358c4(0x964)]=_0x5435a1[_0x2358c4(0x964)]:_0x2358c4(0x4ec)===_0x2358c4(0x4e0)?this[_0x2358c4(0x436)]():this[_0x2358c4(0x964)]=![];_0x2358c4(0x64b)in _0x5435a1?_0x2358c4(0x533)!==_0x2358c4(0x533)?(this[_0x2358c4(0x80c)](),this[_0x2358c4(0x49e)]()):this[_0x2358c4(0x64b)]=_0x5435a1[_0x2358c4(0x64b)]:this[_0x2358c4(0x64b)]=![];if(_0x2358c4(0x777)in _0x5435a1){if('JstWc'===_0x2358c4(0x5c2))return this[_0x2358c4(0x4f9)]();else this[_0x2358c4(0x777)]=_0x5435a1[_0x2358c4(0x777)];}else _0x2358c4(0x612)==='syvsJ'?this[_0x2358c4(0x777)]=!![]:this[_0x2358c4(0xa37)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x4b0)]=BattleManager[_0x35b5eb(0x186)],BattleManager[_0x35b5eb(0x186)]=function(){const _0x3beef4=_0x35b5eb;VisuMZ[_0x3beef4(0x781)][_0x3beef4(0x4b0)][_0x3beef4(0x541)](this),this['_forcedBattlers']=[];},BattleManager[_0x35b5eb(0x8d1)]=function(){const _0x596737=_0x35b5eb;if(!SceneManager[_0x596737(0x3a2)]())return;const _0x4aa00d=SceneManager[_0x596737(0x885)][_0x596737(0x8f5)];if(_0x4aa00d)_0x4aa00d[_0x596737(0x3f6)]();},BattleManager[_0x35b5eb(0xb0c)]=function(){const _0x122899=_0x35b5eb;if(BattleManager['isTpb']())return _0x122899(0x233);return _0x122899(0x711);},BattleManager[_0x35b5eb(0x823)]=function(_0x5496b3){const _0x1782ee=_0x35b5eb;return _0x5496b3=_0x5496b3[_0x1782ee(0x3e7)]()['trim'](),this[_0x1782ee(0xb0c)]()===_0x5496b3;},BattleManager['isDTB']=function(){const _0x1f8901=_0x35b5eb;return this[_0x1f8901(0x823)](_0x1f8901(0x711));},BattleManager[_0x35b5eb(0x39c)]=function(){const _0x2b1a76=_0x35b5eb;return this[_0x2b1a76(0x339)]();},BattleManager[_0x35b5eb(0x2df)]=function(){const _0x4c8d1c=_0x35b5eb;return!this[_0x4c8d1c(0x39c)]();},BattleManager[_0x35b5eb(0x7d8)]=function(){const _0x1000c4=_0x35b5eb;return!this[_0x1000c4(0x39c)]()&&!this[_0x1000c4(0x2df)]();},BattleManager[_0x35b5eb(0x993)]=function(_0x31c986){const _0x26b717=_0x35b5eb;$gameParty[_0x26b717(0x993)](_0x31c986),$gameTroop['processBattleCoreJS'](_0x31c986);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x202)]=BattleManager['startBattle'],BattleManager[_0x35b5eb(0x276)]=function(){const _0x56224f=_0x35b5eb;this[_0x56224f(0x998)]=![],this[_0x56224f(0x345)]=ConfigManager[_0x56224f(0x964)],this[_0x56224f(0x993)](_0x56224f(0x282)),VisuMZ[_0x56224f(0x781)][_0x56224f(0x202)][_0x56224f(0x541)](this),this[_0x56224f(0x993)](_0x56224f(0xf0));},BattleManager['processPostBattleCommonEvents']=function(_0xf1da36){const _0x49af2f=_0x35b5eb,_0x2a1489=VisuMZ[_0x49af2f(0x781)][_0x49af2f(0x3cb)]['Mechanics'];_0x2a1489[_0x49af2f(0x428)]&&VisuMZ[_0x49af2f(0x781)][_0x49af2f(0xa1e)](_0x2a1489['BattleEndEvent'])&&$gameTemp[_0x49af2f(0x8e5)](_0x2a1489[_0x49af2f(0x428)]);const _0x47d57a='%1Event'[_0x49af2f(0x4ed)](_0xf1da36);_0x2a1489[_0x47d57a]&&VisuMZ[_0x49af2f(0x781)][_0x49af2f(0xa1e)](_0x2a1489[_0x47d57a])&&$gameTemp[_0x49af2f(0x8e5)](_0x2a1489[_0x47d57a]);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x290)]=BattleManager['checkBattleEnd'],BattleManager['checkBattleEnd']=function(){const _0x174fcd=_0x35b5eb;if(this[_0x174fcd(0x7ca)]===_0x174fcd(0x127)){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x174fcd(0x781)][_0x174fcd(0x290)]['call'](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x470)]=BattleManager['processVictory'],BattleManager[_0x35b5eb(0x30e)]=function(){const _0x233889=_0x35b5eb;this['processBattleCoreJS'](_0x233889(0x577)),VisuMZ[_0x233889(0x781)]['BattleManager_processVictory'][_0x233889(0x541)](this),this[_0x233889(0x96a)](_0x233889(0x2ee));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xa98)]=BattleManager[_0x35b5eb(0x841)],BattleManager[_0x35b5eb(0x841)]=function(){const _0x571ee4=_0x35b5eb;this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ[_0x571ee4(0x781)][_0x571ee4(0xa98)][_0x571ee4(0x541)](this),this['processPostBattleCommonEvents'](_0x571ee4(0x5c4));},VisuMZ['BattleCore']['BattleManager_endBattle']=BattleManager[_0x35b5eb(0x4e5)],BattleManager[_0x35b5eb(0x4e5)]=function(_0x141924){const _0x4fe95b=_0x35b5eb;this[_0x4fe95b(0x998)]=!![],this[_0x4fe95b(0x345)]=![],this['processBattleCoreJS'](_0x4fe95b(0x5e8)),VisuMZ['BattleCore']['BattleManager_endBattle'][_0x4fe95b(0x541)](this,_0x141924),this[_0x4fe95b(0x993)](_0x4fe95b(0x537));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x9c9)]=BattleManager[_0x35b5eb(0x3f7)],BattleManager[_0x35b5eb(0x3f7)]=function(){const _0x45379a=_0x35b5eb;if(this[_0x45379a(0x39c)]())this[_0x45379a(0x993)](_0x45379a(0x292));VisuMZ[_0x45379a(0x781)][_0x45379a(0x9c9)]['call'](this);if(this['isTurnBased']())this[_0x45379a(0x993)](_0x45379a(0x597));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x24c)]=BattleManager[_0x35b5eb(0x718)],BattleManager[_0x35b5eb(0x718)]=function(){const _0x31bd04=_0x35b5eb,_0x3d4800=this[_0x31bd04(0x785)][_0x31bd04(0x2a4)](),_0x1770c8=this[_0x31bd04(0x785)];_0x3d4800&&_0x3d4800[_0x31bd04(0xad8)]()===_0x1770c8&&_0x3d4800['actionBattleCoreJS'](_0x31bd04(0x3a1));VisuMZ[_0x31bd04(0x781)][_0x31bd04(0x24c)][_0x31bd04(0x541)](this);if(_0x3d4800&&_0x3d4800[_0x31bd04(0xad8)]()===_0x1770c8){if('NRAZW'==='VBcPk'){if(_0x12d186[_0x31bd04(0xa6c)]()&&this[_0x31bd04(0x560)]===_0x31bd04(0x77a))return this[_0x31bd04(0x396)]()?this[_0x31bd04(0x2a4)]()&&this['currentAction']()[_0x31bd04(0x5d3)]()&&!this[_0x31bd04(0x2a4)]()[_0x31bd04(0x840)]():this[_0x31bd04(0x2a4)]()&&this['currentAction']()[_0x31bd04(0x5d3)]()&&!this[_0x31bd04(0x2a4)]()[_0x31bd04(0x861)]();return![];}else _0x3d4800[_0x31bd04(0x9bd)](_0x31bd04(0x247));}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x22d)]=BattleManager[_0x35b5eb(0x88d)],BattleManager[_0x35b5eb(0x88d)]=function(){const _0x14408f=_0x35b5eb,_0x34d5fb=this[_0x14408f(0x495)],_0x36e517=this['_subject'];_0x34d5fb&&_0x34d5fb!==this[_0x14408f(0x1f2)]&&_0x34d5fb['subject']()===_0x36e517&&_0x34d5fb['actionBattleCoreJS'](_0x14408f(0x6f9)),VisuMZ[_0x14408f(0x781)]['BattleManager_endAction'][_0x14408f(0x541)](this),_0x34d5fb&&_0x34d5fb!==this['_lastAction']&&_0x34d5fb[_0x14408f(0xad8)]()===_0x36e517&&(_0x14408f(0x80e)!==_0x14408f(0x564)?_0x34d5fb[_0x14408f(0x9bd)](_0x14408f(0x628)):_0x461ab4[_0x14408f(0x7c7)](_0x4a31dd(_0x531f40['$1']))),this[_0x14408f(0x58f)](this[_0x14408f(0x36a)]()),this['_lastAction']=this[_0x14408f(0x495)];},BattleManager[_0x35b5eb(0x58f)]=function(_0x5840b4){for(const _0x51caf3 of _0x5840b4){if(!_0x51caf3)continue;if(!_0x51caf3['battler']())continue;_0x51caf3['battler']()['refreshMotion']();}},BattleManager[_0x35b5eb(0x9ef)]=function(){const _0x5671cc=_0x35b5eb;!this[_0x5671cc(0x8cf)][_0x5671cc(0x44d)]()&&this[_0x5671cc(0x88d)]();},Game_Battler[_0x35b5eb(0x73b)]['onAllActionsEnd']=function(){const _0x3d8ba1=_0x35b5eb;this[_0x3d8ba1(0xdb)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x1026d2=VisuMZ[_0x3d8ba1(0x473)]['Settings'][_0x3d8ba1(0x76a)];_0x1026d2&&_0x1026d2[_0x3d8ba1(0x256)]===![]&&(_0x3d8ba1(0x278)!==_0x3d8ba1(0x224)?this['removeStatesAuto'](0x1):_0x465dcf['command119']([_0x50d742]));}else this[_0x3d8ba1(0x7c2)](0x1);this[_0x3d8ba1(0x168)]();},BattleManager['makeEscapeRatio']=function(){const _0x241e5e=_0x35b5eb;this[_0x241e5e(0x6ec)]=VisuMZ[_0x241e5e(0x781)][_0x241e5e(0x3cb)]['Mechanics'][_0x241e5e(0xa7f)]['call'](this);},VisuMZ[_0x35b5eb(0x781)]['BattleManager_onEscapeSuccess']=BattleManager[_0x35b5eb(0x553)],BattleManager[_0x35b5eb(0x553)]=function(){const _0x5de855=_0x35b5eb;this['processBattleCoreJS']('EscapeSuccessJS'),BattleManager['_spriteset'][_0x5de855(0x6fb)](),VisuMZ[_0x5de855(0x781)][_0x5de855(0x2e0)][_0x5de855(0x541)](this),this[_0x5de855(0x96a)]('EscapeSuccess');},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x1c6)]=BattleManager[_0x35b5eb(0x4dc)],BattleManager[_0x35b5eb(0x4dc)]=function(){const _0x390207=_0x35b5eb;this[_0x390207(0x993)]('EscapeFailureJS');const _0xbf9072=this[_0x390207(0x6ec)];VisuMZ[_0x390207(0x781)][_0x390207(0x1c6)][_0x390207(0x541)](this),this['_escapeRatio']=_0xbf9072+VisuMZ['BattleCore'][_0x390207(0x3cb)][_0x390207(0x450)]['CalcEscapeRaiseJS'][_0x390207(0x541)](this),this[_0x390207(0x96a)](_0x390207(0x5a8));},BattleManager[_0x35b5eb(0x99f)]=function(){const _0x4620da=_0x35b5eb;let _0x4a903d=![];if(this[_0x4620da(0x550)]()){if(_0x4620da(0x611)!==_0x4620da(0x611))this[_0x4620da(0x178)]();else for(const _0x26cb80 of $gameTroop[_0x4620da(0xaf8)]()){this[_0x4620da(0x8cf)]['push'](_0x4620da(0x3f0),TextManager[_0x4620da(0x909)][_0x4620da(0x4ed)](_0x26cb80)),this[_0x4620da(0x8cf)][_0x4620da(0x7c7)](_0x4620da(0x17d)),_0x4a903d=!![];}}if(this[_0x4620da(0x6e9)]){if(_0x4620da(0x79e)==='PLIdA'){const _0x448543=_0x4030f6(_0x1dc848['$1']);_0x448543<_0x513ef0?(_0x5ae4a5(_0x4620da(0x965)[_0x4620da(0x4ed)](_0x2e8246,_0x448543,_0x1e34b8)),_0x40ccbf['exit']()):_0x44a804=_0x1698fc['max'](_0x448543,_0x12c6a5);}else this['_logWindow'][_0x4620da(0x7c7)]('addText',TextManager[_0x4620da(0x75b)][_0x4620da(0x4ed)]($gameParty[_0x4620da(0x945)]())),this[_0x4620da(0x8cf)]['push'](_0x4620da(0x17d));}else this['_surprise']&&(this[_0x4620da(0x8cf)]['push'](_0x4620da(0x3f0),TextManager[_0x4620da(0x5bd)][_0x4620da(0x4ed)]($gameParty[_0x4620da(0x945)]())),this[_0x4620da(0x8cf)][_0x4620da(0x7c7)](_0x4620da(0x17d)));_0x4a903d&&(_0x4620da(0x30b)!==_0x4620da(0x689)?(this['_logWindow'][_0x4620da(0x7c7)](_0x4620da(0x17d)),this[_0x4620da(0x8cf)][_0x4620da(0x7c7)]('clear')):this[_0x4620da(0xa26)]['addChild'](this[_0x4620da(0x36f)])),this[_0x4620da(0xa6c)]()&&this[_0x4620da(0x184)]()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x35b5eb(0x550)]=function(){const _0x53d435=_0x35b5eb;if(BattleManager[_0x53d435(0x345)])return![];return VisuMZ[_0x53d435(0x781)][_0x53d435(0x3cb)]['Enemy'][_0x53d435(0x745)];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x182)]=BattleManager[_0x35b5eb(0x178)],BattleManager[_0x35b5eb(0x178)]=function(){const _0x198653=_0x35b5eb;VisuMZ[_0x198653(0x781)][_0x198653(0x182)][_0x198653(0x541)](this),this[_0x198653(0x339)]()&&this[_0x198653(0x184)]()&&!this[_0x198653(0x9d2)]&&$gameParty['canInput']()&&this[_0x198653(0x26f)]();},BattleManager[_0x35b5eb(0x184)]=function(){const _0x20198c=_0x35b5eb;return VisuMZ['BattleCore'][_0x20198c(0x3cb)][_0x20198c(0x192)][_0x20198c(0x35d)];},BattleManager[_0x35b5eb(0x5f0)]=function(){const _0x4c80fd=_0x35b5eb;this[_0x4c80fd(0x5b1)]()&&this['selectNextCommand']();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x508)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x9c6)],Scene_Battle[_0x35b5eb(0x73b)]['startActorCommandSelection']=function(){const _0x472ee3=_0x35b5eb;VisuMZ[_0x472ee3(0x781)][_0x472ee3(0x508)][_0x472ee3(0x541)](this),BattleManager[_0x472ee3(0xa6c)]()&&BattleManager[_0x472ee3(0x980)]&&(_0x472ee3(0x561)===_0x472ee3(0x561)?(BattleManager[_0x472ee3(0x980)]=![],this[_0x472ee3(0x5a1)]()):this[_0x472ee3(0x2cb)]());},BattleManager['invokeMagicReflection']=function(_0xebb854,_0x3672ab){const _0x5b5688=_0x35b5eb;this[_0x5b5688(0x495)][_0x5b5688(0xa4b)]=_0x3672ab,this[_0x5b5688(0x8cf)][_0x5b5688(0x7a5)](_0x3672ab),this['_logWindow'][_0x5b5688(0x3e0)](_0xebb854,this['_action']),this[_0x5b5688(0x495)][_0x5b5688(0x4db)](_0xebb854),this['_logWindow']['displayActionResults'](_0xebb854,_0xebb854);},VisuMZ[_0x35b5eb(0x781)]['BattleManager_makeActionOrders']=BattleManager['makeActionOrders'],BattleManager['makeActionOrders']=function(){const _0x4ef2bc=_0x35b5eb;VisuMZ[_0x4ef2bc(0x781)][_0x4ef2bc(0x120)]['call'](this),this[_0x4ef2bc(0xa6a)]=this['_actionBattlers'][_0x4ef2bc(0x416)](_0x5747b6=>_0x5747b6&&_0x5747b6[_0x4ef2bc(0x690)]());},VisuMZ[_0x35b5eb(0x781)]['BattleManager_updatePhase']=BattleManager[_0x35b5eb(0x7f2)],BattleManager[_0x35b5eb(0x7f2)]=function(_0x540144){const _0x18977c=_0x35b5eb;if(this[_0x18977c(0x7ca)]===_0x18977c(0x669))this[_0x18977c(0x828)]();else this[_0x18977c(0x7ca)]===_0x18977c(0x827)?this[_0x18977c(0x93d)]():VisuMZ[_0x18977c(0x781)][_0x18977c(0x43a)][_0x18977c(0x541)](this,_0x540144);},BattleManager['prepareCustomActionSequence']=function(){const _0x131103=_0x35b5eb;this[_0x131103(0x241)]=this['_targets'][_0x131103(0x4b1)](0x0),this['_targetIndex']=0x0,this['_target']=this[_0x131103(0x241)][0x0]||null,this['_phase']='custom';},BattleManager[_0x35b5eb(0x828)]=function(){const _0xa2b1cc=_0x35b5eb;if(!this[_0xa2b1cc(0x211)]()&&!this[_0xa2b1cc(0x8cf)][_0xa2b1cc(0x44d)]()){if(_0xa2b1cc(0x8f4)!==_0xa2b1cc(0x8f4)){if(!_0x3175eb['visualHpGauge'])return;if(this['constructor']===_0x57a70c)return;const _0x58b5a0=_0x5a4b7a['BattleCore'][_0xa2b1cc(0x3cb)][_0xa2b1cc(0x478)],_0x181144=new _0x2d7052();_0x181144[_0xa2b1cc(0xabd)]['x']=_0x58b5a0['AnchorX'],_0x181144[_0xa2b1cc(0xabd)]['y']=_0x58b5a0['AnchorY'],_0x181144[_0xa2b1cc(0xac1)]['x']=_0x181144[_0xa2b1cc(0xac1)]['y']=_0x58b5a0[_0xa2b1cc(0x274)],this[_0xa2b1cc(0x19c)]=_0x181144,this[_0xa2b1cc(0x835)](this['_hpGaugeSprite']),_0x47dd25[_0xa2b1cc(0x2f8)]&&_0x33f4e1['addChildToUiContainer'](this[_0xa2b1cc(0x19c)]);}else this['_phase']=_0xa2b1cc(0x264);}},BattleManager[_0x35b5eb(0x827)]=function(_0x3021bf){const _0x160140=_0x35b5eb;this[_0x160140(0xa6a)][_0x160140(0x4e8)](_0x3021bf);if(_0x3021bf===this[_0x160140(0x785)])return;const _0x5436c3=JsonEx[_0x160140(0x622)](_0x3021bf[_0x160140(0x2a4)]());this['_forcedBattlers']['push']([_0x3021bf,_0x5436c3]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x35b5eb(0x475)]=function(){const _0x4dc97a=_0x35b5eb;if(this['isTpb']())this[_0x4dc97a(0x7ca)]=_0x4dc97a(0x127);else this[_0x4dc97a(0x23f)][_0x4dc97a(0x1a0)]>0x0?_0x4dc97a(0x663)!==_0x4dc97a(0x18b)?this['_phase']=_0x4dc97a(0x127):(_0x3c28d8[_0x4dc97a(0x73b)][_0x4dc97a(0xb3c)]['call'](this,_0x5843d4),this[_0x4dc97a(0x546)](_0x1a0f2e)):this[_0x4dc97a(0x178)]();},BattleManager[_0x35b5eb(0xa82)]=function(){const _0x4fa6ec=_0x35b5eb,_0x330a5d=this[_0x4fa6ec(0x785)];_0x330a5d&&this[_0x4fa6ec(0xa6c)]()&&('MRDNx'!==_0x4fa6ec(0x549)?_0x330a5d[_0x4fa6ec(0x2a0)](_0x4fa6ec(0x84d)):_0x40f34a[_0x4fa6ec(0x9de)]());for(;;){if(_0x4fa6ec(0x216)!==_0x4fa6ec(0x876)){const _0x3b37c0=this[_0x4fa6ec(0x32b)]();if(!_0x3b37c0){if(_0x4fa6ec(0x251)==='SQjAb'){const _0x3af656=_0x4a377b[_0x4fa6ec(0x781)]['Settings']['Enemy'];if(_0x3af656[_0x4fa6ec(0x624)]&&!_0x3af656[_0x4fa6ec(0x458)]){this[_0x4fa6ec(0x59a)][_0x4fa6ec(0x1be)]=0x0;return;}this[_0x4fa6ec(0x59a)]['x']=0x0,this[_0x4fa6ec(0x59a)]['x']+=this[_0x4fa6ec(0xb0d)][_0x4fa6ec(0xe2)](),this['_stateIconSprite']['y']=-this['bitmap'][_0x4fa6ec(0x491)]-this['_stateIconSprite']['height']-0x4,this[_0x4fa6ec(0x59a)]['y']+=this[_0x4fa6ec(0xb0d)]['battleUIOffsetY'](),this[_0x4fa6ec(0x59a)][_0x4fa6ec(0xac1)]['x']=0x1/(this[_0x4fa6ec(0xac1)]['x']||0.001),this[_0x4fa6ec(0x59a)][_0x4fa6ec(0xac1)]['y']=0x1/(this['scale']['y']||0.001),this[_0x4fa6ec(0xae6)]()&&(this['_svBattlerSprite']['_stateSprite'][_0x4fa6ec(0xac1)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x4fa6ec(0x548)]['_stateSprite'][_0x4fa6ec(0xac1)]['y']=0x1/(this[_0x4fa6ec(0xac1)]['y']||0.001));}else return null;}if(_0x3b37c0['isBattleMember']()&&_0x3b37c0['isAlive']())return _0x4fa6ec(0x58b)!=='dNKkp'?_0x797b1f(_0x3b2648['$1']):_0x3b37c0;}else this[_0x4fa6ec(0x7c7)](_0x4fa6ec(0x1c0),_0x278416);}},BattleManager[_0x35b5eb(0x32b)]=function(){const _0x390b52=_0x35b5eb;if(this[_0x390b52(0x23f)]['length']>0x0){const _0xccfd91=this[_0x390b52(0x23f)][_0x390b52(0x751)](),_0x3ef0f2=_0xccfd91[0x0];return _0x3ef0f2['_actions']=_0x3ef0f2[_0x390b52(0x113)]||[],_0x3ef0f2['_actions'][0x0]=_0xccfd91[0x1],_0x3ef0f2;}else return this['_actionBattlers'][_0x390b52(0x751)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x6a1)]=Game_Battler[_0x35b5eb(0x73b)]['forceAction'],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x827)]=function(_0x4f9364,_0x492f60){const _0x56edd5=_0x35b5eb;VisuMZ[_0x56edd5(0x781)]['Game_Battler_forceAction'][_0x56edd5(0x541)](this,_0x4f9364,_0x492f60),this['_actions'][this['_actions']['length']-0x1]['_forceAction']=!![];},Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0xaf6)]=function(_0x364cdf){const _0xcd6f43=_0x35b5eb;return this[_0xcd6f43(0x4a4)](_0x364cdf[0x0],_0x364cdf[0x1],_0x39555e=>{const _0x921308=_0xcd6f43;!_0x39555e[_0x921308(0x59b)]()&&(_0x39555e['forceAction'](_0x364cdf[0x2],_0x364cdf[0x3]),BattleManager['forceAction'](_0x39555e));}),!![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x21c)]=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x2a5)],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x2a5)]=function(){const _0x13d63d=_0x35b5eb;VisuMZ[_0x13d63d(0x781)][_0x13d63d(0x21c)]['call'](this),this[_0x13d63d(0x113)][_0x13d63d(0x1a0)]<=0x0&&(this[_0x13d63d(0x579)]=Number[_0x13d63d(0x729)]);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xa5e)]=BattleManager['selectNextCommand'],BattleManager[_0x35b5eb(0x26f)]=function(){const _0x1e1245=_0x35b5eb;if(this[_0x1e1245(0xa6c)]())_0x1e1245(0x3e8)!=='YWGpc'?this[_0x1e1245(0x254)][_0x1e1245(0x9de)]():this[_0x1e1245(0x607)]();else{if(_0x1e1245(0x6c8)===_0x1e1245(0x816))return _0x23283b[_0x1e1245(0x416)](_0x1a3252=>_0x1a3252[_0x1e1245(0x1b2)]());else VisuMZ[_0x1e1245(0x781)]['BattleManager_selectNextCommand'][_0x1e1245(0x541)](this);}},BattleManager[_0x35b5eb(0x607)]=function(){const _0x35fd97=_0x35b5eb;if(this['_currentActor']){if(this[_0x35fd97(0xafe)][_0x35fd97(0x26f)]())return;this[_0x35fd97(0x7da)](),this[_0x35fd97(0x295)](),!this[_0x35fd97(0x785)]&&!this[_0x35fd97(0xafe)]&&SceneManager['_scene'][_0x35fd97(0x76d)]();}else!this[_0x35fd97(0x785)]&&this[_0x35fd97(0x7c0)]();},BattleManager[_0x35b5eb(0x295)]=function(){const _0x1c35eb=_0x35b5eb;if(!this['isPartyTpbInputtable']()||this[_0x1c35eb(0x43b)]()){if('tfzay'!==_0x1c35eb(0x627)){if(this['_tpbSceneChangeCacheActor']){if(!$gameParty[_0x1c35eb(0x2ae)]()[_0x1c35eb(0x87d)](this[_0x1c35eb(0x365)])){if(_0x1c35eb(0x814)!==_0x1c35eb(0x400))this[_0x1c35eb(0x365)]=null;else{if(!_0x1a275e[_0x1c35eb(0x3a2)]())return;_0x4fe2fe[_0x1c35eb(0x68f)](_0x507046,_0x15eaef);const _0x12bfe6=_0x52aadb[_0x1c35eb(0x495)],_0xb50eaf={'criticalHitRate':_0x2fafa9[_0x1c35eb(0x900)],'criticalHitFlat':_0x4fdd05['CriticalHitFlat'],'criticalDmgRate':_0x484b8f[_0x1c35eb(0x3ef)],'criticalDmgFlat':_0x530f5c[_0x1c35eb(0x431)],'damageRate':_0x3c0cea['DamageRate'],'damageFlat':_0x5c2811[_0x1c35eb(0x55a)],'hitRate':_0x385231['HitRate'],'hitFlat':_0x322a52[_0x1c35eb(0x85b)]};_0x12bfe6['_multipliers']=_0xb50eaf;}}}!this[_0x1c35eb(0x365)]?(this[_0x1c35eb(0x567)](),this['_currentActor']=null,this[_0x1c35eb(0x82e)]=![]):this['revertTpbCachedActor']();}else{const _0x5efc00=0xa,_0x38695b=0x12c*_0x5efc00,_0x54efed=0x1e*_0x5efc00;this[_0x1c35eb(0x413)](_0x38695b,0x0,_0x54efed);}}},BattleManager[_0x35b5eb(0x1b3)]=function(){const _0x231e86=_0x35b5eb;!$gameParty[_0x231e86(0x2ae)]()[_0x231e86(0x87d)](this[_0x231e86(0x365)])&&(_0x231e86(0x4c5)!==_0x231e86(0x27b)?this['_tpbSceneChangeCacheActor']=null:_0x1d3da1['BattleCore'][_0x231e86(0x246)][_0x231e86(0x541)](this)),this['_tpbSceneChangeCacheActor']?(this['_currentActor']=this['_tpbSceneChangeCacheActor'],this[_0x231e86(0xafe)]['_tpbState']=_0x231e86(0x908),this[_0x231e86(0x82e)]=!![],this[_0x231e86(0x365)]=null):(this[_0x231e86(0x567)](),this[_0x231e86(0xafe)]=null,this[_0x231e86(0x82e)]=![]);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x16f)]=BattleManager['isTpbMainPhase'],BattleManager[_0x35b5eb(0x221)]=function(){const _0x4a0b21=_0x35b5eb;if(this['_phase']==='custom'){if(_0x4a0b21(0x8fb)===_0x4a0b21(0x471))_0x17f0f6[_0x4a0b21(0x781)]['ParseArmorNotetags']&&_0x20bfb4[_0x4a0b21(0x781)]['ParseArmorNotetags'][_0x4a0b21(0x541)](this,_0x53d450),_0x551a02[_0x4a0b21(0x781)]['Parse_Notetags_TraitObjects'](_0x5352ae);else return this['battleCoreTpbMainPhase']();}else return VisuMZ[_0x4a0b21(0x781)][_0x4a0b21(0x16f)][_0x4a0b21(0x541)](this);},BattleManager[_0x35b5eb(0x482)]=function(){const _0x5c6255=_0x35b5eb;return this[_0x5c6255(0xb20)]();},VisuMZ['BattleCore'][_0x35b5eb(0x2e5)]=BattleManager['cancelActorInput'],BattleManager[_0x35b5eb(0x567)]=function(){const _0x5c0311=_0x35b5eb;if(this[_0x5c0311(0xa6c)]()&&this[_0x5c0311(0x7ca)]==='battleEnd'){if(_0x5c0311(0x2dd)===_0x5c0311(0x851))return!![];else this[_0x5c0311(0xafe)]=null;}VisuMZ[_0x5c0311(0x781)][_0x5c0311(0x2e5)][_0x5c0311(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xe9)]=BattleManager[_0x35b5eb(0x1cc)],BattleManager[_0x35b5eb(0x1cc)]=function(){const _0x7b96cd=_0x35b5eb,_0x4975c3=this[_0x7b96cd(0xafe)];if(_0x4975c3&&!_0x4975c3[_0x7b96cd(0x1cc)]()){const _0x1ed36f=_0x4975c3[_0x7b96cd(0x49f)];_0x4975c3['_actions'][_0x1ed36f]=new Game_Action(_0x4975c3);}return VisuMZ[_0x7b96cd(0x781)][_0x7b96cd(0xe9)][_0x7b96cd(0x541)](this);},VisuMZ['BattleCore'][_0x35b5eb(0x40a)]=BattleManager[_0x35b5eb(0x46b)],BattleManager[_0x35b5eb(0x46b)]=function(_0xd7e084){const _0x31bc4d=_0x35b5eb;if(this[_0x31bc4d(0x495)][_0x31bc4d(0x6b1)]())return![];return VisuMZ['BattleCore'][_0x31bc4d(0x40a)]['call'](this,_0xd7e084);},SceneManager[_0x35b5eb(0x3a2)]=function(){const _0x2560eb=_0x35b5eb;return this[_0x2560eb(0x885)]&&this[_0x2560eb(0x885)]['constructor']===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x5f3ce5=_0x35b5eb;return Spriteset_Battle[_0x5f3ce5(0x73b)][_0x5f3ce5(0xb05)]();},SceneManager[_0x35b5eb(0x4a2)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x44ac58=_0x35b5eb;if(SceneManager[_0x44ac58(0x7c5)](Scene_Options))return!![];return![];},SceneManager[_0x35b5eb(0xb3d)]=function(_0x53de16){const _0x98fd97=_0x35b5eb;if(!SceneManager[_0x98fd97(0x3a2)]())return!![];const _0x3bfb0d=[_0x98fd97(0x47f),_0x98fd97(0x156)];return _0x3bfb0d['includes'](_0x53de16[_0x98fd97(0x945)]);},VisuMZ['BattleCore'][_0x35b5eb(0x37c)]=SceneManager[_0x35b5eb(0x7c7)],SceneManager[_0x35b5eb(0x7c7)]=function(_0x246411){const _0x243da7=_0x35b5eb;if(!SceneManager[_0x243da7(0xb3d)](_0x246411))return this[_0x243da7(0x8c3)](_0x246411);VisuMZ[_0x243da7(0x781)][_0x243da7(0x37c)][_0x243da7(0x541)](this,_0x246411);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x2b508f){const _0x2a46ab=_0x35b5eb;if(!$gameTemp[_0x2a46ab(0x426)]())return;if(this[_0x2a46ab(0x77d)])return;this[_0x2a46ab(0x77d)]=!![];let _0x43efb4='';_0x43efb4+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x43efb4+=_0x2a46ab(0x6b2)[_0x2a46ab(0x4ed)](_0x2b508f[_0x2a46ab(0x945)]),alert(_0x43efb4);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x26a)]=Game_Temp[_0x35b5eb(0x73b)][_0x35b5eb(0x29a)],Game_Temp[_0x35b5eb(0x73b)][_0x35b5eb(0x29a)]=function(_0x3bb3e9,_0xa4a5ff,_0x4d9400){const _0x237f94=_0x35b5eb;_0x3bb3e9=_0x3bb3e9['filter']((_0x458594,_0x2b2fce,_0x169c43)=>_0x169c43[_0x237f94(0x57e)](_0x458594)===_0x2b2fce),SceneManager['isSceneBattle']()&&SceneManager[_0x237f94(0x725)]()&&(_0x4d9400=!_0x4d9400),VisuMZ[_0x237f94(0x781)]['Game_Temp_requestAnimation'][_0x237f94(0x541)](this,_0x3bb3e9,_0xa4a5ff,_0x4d9400),SceneManager[_0x237f94(0x3a2)]()&&BattleManager[_0x237f94(0x254)][_0x237f94(0x555)]();},Game_Temp['prototype']['setLastPluginCommandInterpreter']=function(_0x1c807b){this['_lastPluginCommandInterpreter']=_0x1c807b;},Game_Temp[_0x35b5eb(0x73b)][_0x35b5eb(0x657)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x35b5eb(0x73b)][_0x35b5eb(0x2af)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x35b5eb(0x73b)][_0x35b5eb(0xcd)]=function(_0x190d5c){const _0xf39996=_0x35b5eb;$gameMap&&$dataMap&&$dataMap[_0xf39996(0x7fd)]&&this[_0xf39996(0x5ca)]($dataMap['note']);const _0x11e961=$dataTroops[_0x190d5c];if(_0x11e961){let _0x470eb8=DataManager[_0xf39996(0xb39)](_0x11e961['id']);this[_0xf39996(0x5ca)](_0x470eb8);}},Game_Temp[_0x35b5eb(0x73b)][_0x35b5eb(0x5ca)]=function(_0x5c7659){const _0x2cd5ca=_0x35b5eb;if(!_0x5c7659)return;if(_0x5c7659[_0x2cd5ca(0x111)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if('hdlDq'!==_0x2cd5ca(0x4a5)){const _0x536cf4=String(RegExp['$1']);if(_0x536cf4[_0x2cd5ca(0x111)](/DEFAULT/i))this[_0x2cd5ca(0x68b)]=_0x2cd5ca(0x472);else{if(_0x536cf4['match'](/LIST/i)){if('BlwOR'!==_0x2cd5ca(0x5bc))this[_0x2cd5ca(0x68b)]=_0x2cd5ca(0x8d0);else for(const _0x45b110 of _0x20636e){const _0x1ec082=_0x1cf9f5[_0x2cd5ca(0x4ed)](_0x453b93['name'](),_0x5f4d95['param'](_0x45b110));this['push'](_0x2cd5ca(0x273)),this[_0x2cd5ca(0x7c7)]('pushBaseLine'),this[_0x2cd5ca(0x7c7)]('addText',_0x1ec082),this['push'](_0x2cd5ca(0x17d));}}else{if(_0x536cf4[_0x2cd5ca(0x111)](/XP/i))this[_0x2cd5ca(0x68b)]='xp';else{if(_0x536cf4[_0x2cd5ca(0x111)](/PORTRAIT/i))this[_0x2cd5ca(0x68b)]=_0x2cd5ca(0xf2);else{if(_0x536cf4[_0x2cd5ca(0x111)](/BORDER/i))_0x2cd5ca(0x19f)===_0x2cd5ca(0xabf)?(this[_0x2cd5ca(0x4b3)](_0x2cd5ca(0x8e6),_0xdb9d85,0x0,!![]),_0x77e9d2[_0x2cd5ca(0x781)][_0x2cd5ca(0xaa7)][_0x2cd5ca(0x541)](this,_0x2c09e5),this[_0x2cd5ca(0x4b3)](_0x2cd5ca(0x744),_0x1fc598,this[_0x2cd5ca(0x5dd)]||0x0,!![]),this[_0x2cd5ca(0x9c8)](_0x24a854)):this[_0x2cd5ca(0x68b)]='border';else _0x536cf4[_0x2cd5ca(0x111)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x2cd5ca(0x9b4)]?this['_forcedBattleLayout']=_0x2cd5ca(0x13f):_0x2cd5ca(0x3da)!=='oyTMJ'?this[_0x2cd5ca(0x68b)]=_0x2cd5ca(0x472):_0x12e80f[_0x2cd5ca(0x7c7)](_0x2cd5ca(0x5fb),_0x1f68a2));}}}}}else _0x3c9a22[_0x2cd5ca(0x73b)][_0x2cd5ca(0x608)][_0x2cd5ca(0x541)](this),this[_0x2cd5ca(0x101)]();}},VisuMZ[_0x35b5eb(0x781)]['Game_System_initialize']=Game_System[_0x35b5eb(0x73b)]['initialize'],Game_System[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(){const _0x1f55b7=_0x35b5eb;VisuMZ[_0x1f55b7(0x781)][_0x1f55b7(0x115)]['call'](this),this[_0x1f55b7(0x2d7)]();},Game_System['prototype'][_0x35b5eb(0x2d7)]=function(){const _0x3e0408=_0x35b5eb;this[_0x3e0408(0x1c2)]=this[_0x3e0408(0x1c2)]||[];},Game_System[_0x35b5eb(0x73b)][_0x35b5eb(0xa36)]=function(){const _0x1bf7bb=_0x35b5eb;if(this[_0x1bf7bb(0x1c2)]===undefined)this[_0x1bf7bb(0x2d7)]();return this[_0x1bf7bb(0x1c2)];},Game_System[_0x35b5eb(0x73b)][_0x35b5eb(0xae9)]=function(_0x184628){const _0x165c8b=_0x35b5eb;if(this['_defeatedEnemies']===undefined)this[_0x165c8b(0x2d7)]();if(!_0x184628)return;if(this[_0x165c8b(0x1c2)][_0x165c8b(0x87d)](_0x184628))return;this[_0x165c8b(0x1c2)]['push'](_0x184628),this[_0x165c8b(0x1c2)][_0x165c8b(0x9ed)]((_0x210629,_0x3ae889)=>_0x210629-_0x3ae889);},VisuMZ[_0x35b5eb(0x781)]['Game_BattlerBase_addNewState']=Game_BattlerBase['prototype']['addNewState'],Game_BattlerBase['prototype'][_0x35b5eb(0x7bf)]=function(_0x23ce04){const _0xf1ed8c=_0x35b5eb,_0x14eeb6=this[_0xf1ed8c(0x6fe)](),_0x38e235=this[_0xf1ed8c(0x259)]();VisuMZ['BattleCore'][_0xf1ed8c(0x67c)][_0xf1ed8c(0x541)](this,_0x23ce04),this['isEnemy']()&&_0x14eeb6&&this[_0xf1ed8c(0x1b2)]()&&(_0xf1ed8c(0x95d)!==_0xf1ed8c(0x95d)?this[_0xf1ed8c(0x771)][_0xf1ed8c(0x756)]():(this[_0xf1ed8c(0x265)]=!this[_0xf1ed8c(0x7ef)](),$gameSystem[_0xf1ed8c(0xae9)](this[_0xf1ed8c(0x512)]()))),SceneManager[_0xf1ed8c(0x3a2)]()&&_0x38e235!==this[_0xf1ed8c(0x259)]()&&(_0xf1ed8c(0x978)===_0xf1ed8c(0x9e6)?(this[_0xf1ed8c(0x381)]=_0x56d429[_0xf1ed8c(0x490)]>=0x0?0x0:0x1,this['createDigits'](_0x492d8f['hpDamage'])):this[_0xf1ed8c(0x691)]()&&this[_0xf1ed8c(0x691)]()[_0xf1ed8c(0x1d2)]());},Game_Enemy['prototype'][_0x35b5eb(0x7ef)]=function(){const _0x2e7c91=_0x35b5eb;return $gameSystem[_0x2e7c91(0xa36)]()[_0x2e7c91(0x87d)](this[_0x2e7c91(0x6e5)]);},VisuMZ['BattleCore'][_0x35b5eb(0x6cc)]=Game_BattlerBase[_0x35b5eb(0x73b)]['eraseState'],Game_BattlerBase['prototype']['eraseState']=function(_0x2cda1e){const _0xae1456=_0x35b5eb;VisuMZ['BattleCore'][_0xae1456(0x6cc)][_0xae1456(0x541)](this,_0x2cda1e),this[_0xae1456(0x65c)]()&&_0x2cda1e===this['deathStateId']()&&this['isAlive']()&&(this['_visualHpGauge_JustDied']=![]),!this[_0xae1456(0x6cb)]&&!this[_0xae1456(0x89b)]&&SceneManager[_0xae1456(0x3a2)]()&&(_0xae1456(0x776)!==_0xae1456(0x776)?_0xa1600e[_0xae1456(0x29a)]([this],_0xe80e50):this['requestMotionRefresh']());},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x7b1)]=Game_Action['prototype'][_0x35b5eb(0xa37)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0xa37)]=function(){const _0x29aa0c=_0x35b5eb;VisuMZ[_0x29aa0c(0x781)][_0x29aa0c(0x7b1)][_0x29aa0c(0x541)](this),this[_0x29aa0c(0x6c0)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x29aa0c(0x6ed)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x29aa0c(0xa1b)]=_0x29aa0c(0x472);},Game_Action[_0x35b5eb(0x73b)]['makeDamageValue']=function(_0x30bce1,_0x17a6eb){const _0x5df284=_0x35b5eb;return VisuMZ[_0x5df284(0x781)]['Settings'][_0x5df284(0x165)]['OverallFormulaJS'][_0x5df284(0x541)](this,_0x30bce1,_0x17a6eb);},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x382)]=function(_0x36f5b8,_0x58f49){const _0x4a1212=_0x35b5eb;return VisuMZ[_0x4a1212(0x781)][_0x4a1212(0x3cb)][_0x4a1212(0x165)][_0x4a1212(0xa7d)][_0x4a1212(0x541)](this,_0x36f5b8,_0x58f49);},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x376)]=function(_0x5111a1,_0x4a6778){const _0x5330c8=_0x35b5eb;return VisuMZ[_0x5330c8(0x781)][_0x5330c8(0x3cb)]['Damage']['GuardFormulaJS'][_0x5330c8(0x541)](this,_0x5111a1,_0x4a6778);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x158)]=Game_Action['prototype'][_0x35b5eb(0xae0)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0xae0)]=function(_0x293a3c){const _0x2cfc37=_0x35b5eb,_0x3f25a1=this['item']()[_0x2cfc37(0x7fd)];if(_0x3f25a1['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x3f25a1['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if('FCUut'===_0x2cfc37(0x319)){let _0x1f4583=VisuMZ[_0x2cfc37(0x781)][_0x2cfc37(0x158)][_0x2cfc37(0x541)](this,_0x293a3c);return _0x1f4583=this[_0x2cfc37(0x6ed)]['hitRate']*_0x1f4583+this[_0x2cfc37(0x6ed)]['hitFlat'],_0x1f4583;}else this[_0x2cfc37(0x4ff)]();}}},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x7e6)]=function(_0x174ddf){const _0x33767c=_0x35b5eb;if(!this['item']()[_0x33767c(0x21d)][_0x33767c(0x936)])return 0x0;let _0x2497bc=VisuMZ[_0x33767c(0x781)][_0x33767c(0x3cb)][_0x33767c(0x165)][_0x33767c(0x829)][_0x33767c(0x541)](this,_0x174ddf);return _0x2497bc=this[_0x33767c(0x6ed)][_0x33767c(0x56c)]*_0x2497bc+this[_0x33767c(0x6ed)][_0x33767c(0x86e)],_0x2497bc;},Game_Action['prototype']['applyCritical']=function(_0x1fee50){const _0x105bbf=_0x35b5eb;return _0x1fee50=VisuMZ['BattleCore'][_0x105bbf(0x3cb)][_0x105bbf(0x165)]['CriticalHitMultiplier'][_0x105bbf(0x541)](this,_0x1fee50),_0x1fee50=this[_0x105bbf(0x6ed)][_0x105bbf(0x147)]*_0x1fee50+this['_multipliers'][_0x105bbf(0x963)],_0x1fee50;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x196)]=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0xa22)],Game_Action['prototype'][_0x35b5eb(0xa22)]=function(_0xce5be8){const _0x30add5=_0x35b5eb;if(this['_customDamageFormula']!==_0x30add5(0x472)){if(_0x30add5(0x604)!==_0x30add5(0x604)){const _0xeeafc7=this[_0x30add5(0x870)]();return _0xeeafc7?_0xeeafc7[_0x30add5(0x8c4)]:0x0;}else return this['customDamageFormula'](_0xce5be8);}else return DataManager[_0x30add5(0x4be)](this[_0x30add5(0x5d3)]())===_0x30add5(0x1ba)?VisuMZ['BattleCore'][_0x30add5(0x196)][_0x30add5(0x541)](this,_0xce5be8):this[_0x30add5(0x452)](_0xce5be8);},Game_Action[_0x35b5eb(0x73b)]['setCustomDamageFormula']=function(_0x6a226){const _0x5a6fcf=_0x35b5eb;this[_0x5a6fcf(0xa1b)]=_0x6a226;},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x401)]=function(_0x163a6e){const _0x1b41ae=_0x35b5eb,_0x118746=this[_0x1b41ae(0x5d3)](),_0x3034ac=_0x118746[_0x1b41ae(0x21d)][_0x1b41ae(0x4d9)];_0x118746[_0x1b41ae(0x21d)][_0x1b41ae(0x4d9)]=this[_0x1b41ae(0xa1b)];let _0xc24566=VisuMZ[_0x1b41ae(0x781)][_0x1b41ae(0x196)][_0x1b41ae(0x541)](this,_0x163a6e);return _0x118746[_0x1b41ae(0x21d)]['formula']=_0x3034ac,_0xc24566;},Game_Action['prototype']['damageStyle']=function(){const _0x136117=_0x35b5eb;if(this['item']()[_0x136117(0x7fd)][_0x136117(0x111)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x28bdb2=String(RegExp['$1'])[_0x136117(0x3e7)]()[_0x136117(0x54d)]();return _0x28bdb2;}return _0x136117(0x1ba);},Game_Action[_0x35b5eb(0x73b)]['evalDamageFormulaBattleCore']=function(_0x275f25){const _0x4eff3b=_0x35b5eb,_0x15524=DataManager[_0x4eff3b(0x4be)](this[_0x4eff3b(0x5d3)]()),_0x36441b=VisuMZ[_0x4eff3b(0x3fe)][_0x15524];try{return _0x36441b[_0x4eff3b(0xac2)][_0x4eff3b(0x541)](this,_0x275f25);}catch(_0x2b3dde){if($gameTemp[_0x4eff3b(0x426)]())console[_0x4eff3b(0x33b)](_0x2b3dde);return VisuMZ[_0x4eff3b(0x781)][_0x4eff3b(0x196)][_0x4eff3b(0x541)](this);}},Game_Action['prototype'][_0x35b5eb(0x593)]=function(_0x1c606f,_0x42dd72){const _0x194a4e=_0x35b5eb;if(this['isCertainHit']())return _0x42dd72;const _0x31f029=this[_0x194a4e(0xad8)](),_0x2aae52=_0x1c606f;let _0x4a0449=[],_0x3623d1=[];_0x4a0449['push'](this[_0x194a4e(0x6c0)][_0x194a4e(0xa89)],this['_armorPenetration'][_0x194a4e(0x4e4)]),_0x3623d1[_0x194a4e(0x7c7)](this['_armorPenetration']['arPenRate'],this[_0x194a4e(0x6c0)][_0x194a4e(0x7af)]);const _0x5536c3=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x30429a=this[_0x194a4e(0x32c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x2adcf1=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0xda70c=this[_0x194a4e(0x32c)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x4a0449=_0x4a0449['concat'](_0x2aae52[_0x194a4e(0x46d)]()[_0x194a4e(0x3dd)](_0x38a54d=>_0x38a54d&&_0x38a54d[_0x194a4e(0x7fd)][_0x194a4e(0x111)](_0x5536c3)?Number(RegExp['$1']):0x0)),_0x3623d1=_0x3623d1[_0x194a4e(0x992)](_0x2aae52['traitObjects']()['map'](_0x56e116=>_0x56e116&&_0x56e116[_0x194a4e(0x7fd)][_0x194a4e(0x111)](_0x30429a)?Number(RegExp['$1'])/0x64:0x0)),_0x4a0449=_0x4a0449['concat'](_0x31f029[_0x194a4e(0x46d)]()[_0x194a4e(0x3dd)](_0x18019a=>_0x18019a&&_0x18019a[_0x194a4e(0x7fd)][_0x194a4e(0x111)](_0x2adcf1)?Number(RegExp['$1']):0x0)),_0x3623d1=_0x3623d1[_0x194a4e(0x992)](_0x31f029[_0x194a4e(0x46d)]()[_0x194a4e(0x3dd)](_0x163707=>_0x163707&&_0x163707[_0x194a4e(0x7fd)][_0x194a4e(0x111)](_0xda70c)?Number(RegExp['$1'])/0x64:0x0)),this[_0x194a4e(0x5d3)]()[_0x194a4e(0x7fd)][_0x194a4e(0x111)](_0x2adcf1)&&_0x4a0449[_0x194a4e(0x7c7)](Number(RegExp['$1'])),this[_0x194a4e(0x5d3)]()[_0x194a4e(0x7fd)]['match'](_0xda70c)&&_0x3623d1['push'](Number(RegExp['$1'])),_0x42dd72=_0x4a0449['reduce']((_0x222797,_0x1d0881)=>_0x222797-_0x1d0881,_0x42dd72),_0x42dd72>0x0&&(_0x42dd72=_0x3623d1['reduce']((_0x2ef11b,_0x2d7230)=>_0x2ef11b*(0x1-_0x2d7230),_0x42dd72)),_0x42dd72;},VisuMZ['BattleCore']['Game_Action_executeDamage']=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0xa00)],Game_Action['prototype'][_0x35b5eb(0xa00)]=function(_0x32d31c,_0x4eeb93){const _0xc96a6f=_0x35b5eb;_0x4eeb93=_0x4eeb93*this['_multipliers'][_0xc96a6f(0xa38)],_0x4eeb93+=this[_0xc96a6f(0x6ed)][_0xc96a6f(0x193)]*(_0x4eeb93>=0x0?0x1:-0x1),_0x4eeb93=this[_0xc96a6f(0x4b3)](_0xc96a6f(0x584),_0x32d31c,_0x4eeb93,![]),_0x4eeb93=this[_0xc96a6f(0xa34)](_0x4eeb93),_0x4eeb93=Math[_0xc96a6f(0x3d5)](_0x4eeb93),this[_0xc96a6f(0x5dd)]=_0x4eeb93,this[_0xc96a6f(0x7d6)]=this['_totalValue']||0x0,this['_totalValue']+=_0x4eeb93,VisuMZ[_0xc96a6f(0x781)][_0xc96a6f(0x7e7)][_0xc96a6f(0x541)](this,_0x32d31c,_0x4eeb93),this[_0xc96a6f(0x4b3)](_0xc96a6f(0x748),_0x32d31c,_0x4eeb93,!![]);},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0xa34)]=function(_0x4b4f6b){const _0x2123b6=_0x35b5eb;if(this[_0x2123b6(0x9a3)]())return _0x4b4f6b;return _0x4b4f6b=this[_0x2123b6(0x912)](_0x4b4f6b),_0x4b4f6b=this[_0x2123b6(0x97d)](_0x4b4f6b),_0x4b4f6b;},Game_Action[_0x35b5eb(0x73b)]['isBypassDamageCap']=function(){const _0x12afbd=_0x35b5eb,_0x80e381=/<BYPASS DAMAGE CAP>/i;if(this[_0x12afbd(0x5d3)]()[_0x12afbd(0x7fd)][_0x12afbd(0x111)](_0x80e381))return!![];if(this[_0x12afbd(0xad8)]()[_0x12afbd(0x46d)]()[_0x12afbd(0x51b)](_0x225f73=>_0x225f73&&_0x225f73['note'][_0x12afbd(0x111)](_0x80e381)))return!![];return!VisuMZ[_0x12afbd(0x781)][_0x12afbd(0x3cb)][_0x12afbd(0x165)]['EnableDamageCap'];},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x912)]=function(_0x555346){const _0x45a52d=_0x35b5eb;if(!VisuMZ['BattleCore']['Settings'][_0x45a52d(0x165)][_0x45a52d(0x6af)])return _0x555346;const _0x529c5d=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x45a52d(0x7fd)]['match'](_0x529c5d))return!![];if(this['subject']()[_0x45a52d(0x46d)]()[_0x45a52d(0x51b)](_0x342172=>_0x342172&&_0x342172[_0x45a52d(0x7fd)][_0x45a52d(0x111)](_0x529c5d)))return!![];const _0x2783ec=_0x555346<0x0?-0x1:0x1;_0x555346=Math[_0x45a52d(0x88a)](_0x555346);let _0x4207d3=this[_0x45a52d(0xad8)]()[_0x45a52d(0x838)]();this[_0x45a52d(0x5d3)]()[_0x45a52d(0x7fd)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x4207d3+=Number(RegExp['$1'])/0x64);_0x4207d3=_0x4207d3[_0x45a52d(0xf4)](0.01,0x1);const _0xf292c5=this['getHardDamageCap'](),_0x21b3ed=_0x4207d3*_0xf292c5;if(_0x555346>_0x21b3ed&&_0xf292c5>_0x21b3ed){_0x555346-=_0x21b3ed;const _0x905aeb=VisuMZ[_0x45a52d(0x781)][_0x45a52d(0x3cb)]['Damage'][_0x45a52d(0x380)],_0x571ffe=Math[_0x45a52d(0x2a3)](0x1-_0x555346/((_0xf292c5-_0x21b3ed)*_0x905aeb+_0x555346),0.01);_0x555346*=_0x571ffe,_0x555346+=_0x21b3ed;}return _0x555346*_0x2783ec;},Game_Action['prototype']['getHardDamageCap']=function(){const _0x93afa3=_0x35b5eb;if(this[_0x93afa3(0x5d3)]()[_0x93afa3(0x7fd)][_0x93afa3(0x111)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x93afa3(0x3fb)===_0x93afa3(0x903))_0x55f132=this[_0x93afa3(0xb0d)][_0x93afa3(0x5c1)]??_0x4862d3,_0x32a53b=this['_battler'][_0x93afa3(0x185)]??_0x1a337f;else return Number(RegExp['$1']);}else return this['subject']()[_0x93afa3(0x9e3)]();},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x97d)]=function(_0xd8dcec){const _0xe4b7b6=_0x35b5eb;let _0xaa366c=this[_0xe4b7b6(0x3ff)]();return _0xd8dcec[_0xe4b7b6(0xf4)](-_0xaa366c,_0xaa366c);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xaa7)]=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x4db)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x4db)]=function(_0x442838){const _0x450e6c=_0x35b5eb;this[_0x450e6c(0x4b3)](_0x450e6c(0x8e6),_0x442838,0x0,!![]),VisuMZ[_0x450e6c(0x781)][_0x450e6c(0xaa7)][_0x450e6c(0x541)](this,_0x442838),this[_0x450e6c(0x4b3)](_0x450e6c(0x744),_0x442838,this[_0x450e6c(0x5dd)]||0x0,!![]),this[_0x450e6c(0x9c8)](_0x442838);},Game_Action['prototype'][_0x35b5eb(0x4b3)]=function(_0x1653d2,_0x1fe5c2,_0x45f7d0,_0x316028){const _0x178fe6=_0x35b5eb;if(this[_0x178fe6(0x89b)]||this['_tempActor'])return;_0x45f7d0=_0x45f7d0||0x0;const _0x289d9f=_0x45f7d0,_0x4e04a4=VisuMZ['BattleCore'][_0x178fe6(0x3cb)][_0x178fe6(0x450)],_0x2249c6=_0x1653d2[_0x178fe6(0x4ed)]('');if(_0x4e04a4[_0x2249c6]){_0x45f7d0=_0x4e04a4[_0x2249c6][_0x178fe6(0x541)](this,_0x45f7d0,_0x1fe5c2);if(_0x316028)_0x45f7d0=_0x289d9f;}let _0x4e4af6=VisuMZ[_0x178fe6(0x781)][_0x178fe6(0x82f)](this[_0x178fe6(0x5d3)](),_0x1653d2[_0x178fe6(0x4ed)](''));if(VisuMZ[_0x178fe6(0x781)]['JS'][_0x4e4af6]){if(_0x178fe6(0x9b0)!=='ksMoZ'){_0x45f7d0=VisuMZ[_0x178fe6(0x781)]['JS'][_0x4e4af6][_0x178fe6(0x541)](this,this[_0x178fe6(0xad8)](),_0x1fe5c2,this[_0x178fe6(0x5d3)](),_0x45f7d0);if(_0x316028)_0x45f7d0=_0x289d9f;}else this[_0x178fe6(0x95a)]['x']=this['x'],this[_0x178fe6(0x95a)]['y']=this['y'];}for(const _0x2cd8e6 of this[_0x178fe6(0xad8)]()[_0x178fe6(0x46d)]()){if(!_0x2cd8e6)continue;_0x4e4af6=VisuMZ[_0x178fe6(0x781)]['createKeyJS'](_0x2cd8e6,_0x1653d2[_0x178fe6(0x4ed)](_0x178fe6(0xa59)));if(VisuMZ[_0x178fe6(0x781)]['JS'][_0x4e4af6]){_0x45f7d0=VisuMZ['BattleCore']['JS'][_0x4e4af6]['call'](this,this['subject'](),_0x1fe5c2,_0x2cd8e6,_0x45f7d0);if(_0x316028)_0x45f7d0=_0x289d9f;}}for(const _0x2c596c of _0x1fe5c2[_0x178fe6(0x46d)]()){if(!_0x2c596c)continue;_0x4e4af6=VisuMZ['BattleCore'][_0x178fe6(0x82f)](_0x2c596c,_0x1653d2['format']('AsTarget'));if(VisuMZ['BattleCore']['JS'][_0x4e4af6]){if(_0x178fe6(0x358)!==_0x178fe6(0x358))_0x534fb8[_0x178fe6(0x781)][_0x178fe6(0x7bd)]['call'](this),this[_0x178fe6(0x1be)]=this['_iconIndex']>0x0?0xff:0x0;else{_0x45f7d0=VisuMZ[_0x178fe6(0x781)]['JS'][_0x4e4af6]['call'](this,this[_0x178fe6(0xad8)](),_0x1fe5c2,_0x2c596c,_0x45f7d0);if(_0x316028)_0x45f7d0=_0x289d9f;}}}return _0x45f7d0;},Game_Action[_0x35b5eb(0x73b)]['actionBattleCoreJS']=function(_0x3a7da0){const _0x3a3536=_0x35b5eb,_0x5b1f90=this[_0x3a3536(0x7d6)]||0x0,_0x34ea82=VisuMZ[_0x3a3536(0x781)][_0x3a3536(0x3cb)][_0x3a3536(0x450)],_0x8271dd=_0x3a7da0[_0x3a3536(0x4ed)]('');_0x34ea82[_0x8271dd]&&(_0x3a3536(0x146)!=='vllTd'?_0x34ea82[_0x8271dd]['call'](this,_0x5b1f90):this[_0x3a3536(0x5d1)](_0x3a3536(0x1c8)));let _0x51d2e9=VisuMZ[_0x3a3536(0x781)]['createKeyJS'](this[_0x3a3536(0x5d3)](),_0x3a7da0);VisuMZ[_0x3a3536(0x781)]['JS'][_0x51d2e9]&&('FGWVy'===_0x3a3536(0x7cc)?_0x18ec67[_0x3a3536(0x73b)]['onMoveEnd'][_0x3a3536(0x541)](this):VisuMZ[_0x3a3536(0x781)]['JS'][_0x51d2e9][_0x3a3536(0x541)](this,this[_0x3a3536(0xad8)](),this[_0x3a3536(0xad8)](),this[_0x3a3536(0x5d3)](),_0x5b1f90));for(const _0x5c5f74 of this[_0x3a3536(0xad8)]()[_0x3a3536(0x46d)]()){if(!_0x5c5f74)continue;_0x51d2e9=VisuMZ['BattleCore']['createKeyJS'](_0x5c5f74,_0x3a7da0),VisuMZ[_0x3a3536(0x781)]['JS'][_0x51d2e9]&&VisuMZ[_0x3a3536(0x781)]['JS'][_0x51d2e9][_0x3a3536(0x541)](this,this[_0x3a3536(0xad8)](),this[_0x3a3536(0xad8)](),_0x5c5f74,_0x5b1f90);}},Game_Action['prototype'][_0x35b5eb(0x6b7)]=function(){const _0x356928=_0x35b5eb;return VisuMZ[_0x356928(0x781)][_0x356928(0x3cb)][_0x356928(0x450)][_0x356928(0x844)][_0x356928(0x541)](this);},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x642)]=function(){const _0x21e9ed=_0x35b5eb;return VisuMZ[_0x21e9ed(0x781)]['Settings']['Mechanics'][_0x21e9ed(0xa68)];},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x6e8)]=function(){const _0x47db89=_0x35b5eb;return this[_0x47db89(0x5d3)]()[_0x47db89(0x7fd)][_0x47db89(0x111)](/<JS TARGETS>/i);},Game_Action[_0x35b5eb(0x73b)]['isBattleCoreTargetScope']=function(){const _0x35c23d=_0x35b5eb;if(!this['_forcing']&&this[_0x35c23d(0xad8)]()[_0x35c23d(0x78b)]())return![];if(this[_0x35c23d(0x6e8)]())return!![];return typeof this['item']()[_0x35c23d(0xab6)]===_0x35c23d(0x22e);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x635)]=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x582)],Game_Action[_0x35b5eb(0x73b)]['isForOpponent']=function(){const _0x3de85c=_0x35b5eb;return this[_0x3de85c(0x4e3)]()&&!this[_0x3de85c(0x6e8)]()?this[_0x3de85c(0x245)]():VisuMZ[_0x3de85c(0x781)][_0x3de85c(0x635)][_0x3de85c(0x541)](this);},Game_Action[_0x35b5eb(0x73b)]['isForOpponentBattleCore']=function(){const _0x24dfe1=_0x35b5eb,_0x39154c=this['item']()[_0x24dfe1(0xab6)];return _0x39154c[_0x24dfe1(0x111)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x99b)]=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x6b1)],Game_Action[_0x35b5eb(0x73b)]['isForFriend']=function(){const _0x313ef2=_0x35b5eb;if(this[_0x313ef2(0x4e3)]()&&!this[_0x313ef2(0x6e8)]()){if('YHYHM'==='HMDVn'){if(!_0x387552['isSceneBattle']())return!![];const _0x5926cb=[_0x313ef2(0x47f),_0x313ef2(0x156)];return _0x5926cb[_0x313ef2(0x87d)](_0x5b220d['name']);}else return this[_0x313ef2(0x9d8)]();}else return VisuMZ[_0x313ef2(0x781)][_0x313ef2(0x99b)][_0x313ef2(0x541)](this);},Game_Action[_0x35b5eb(0x73b)]['isForFriendBattleCore']=function(){const _0x3f612b=_0x35b5eb,_0x20aa41=this['item']()[_0x3f612b(0xab6)];return _0x20aa41[_0x3f612b(0x111)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x494)]=Game_Action['prototype'][_0x35b5eb(0x600)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x600)]=function(){const _0xb8448c=_0x35b5eb;return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this['isForRandomBattleCore']():VisuMZ['BattleCore'][_0xb8448c(0x494)][_0xb8448c(0x541)](this);},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0xab2)]=function(){const _0x474340=_0x35b5eb,_0x4dc2d0=this['item']()[_0x474340(0xab6)];return _0x4dc2d0['match'](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore']['Game_Action_needsSelection']=Game_Action['prototype'][_0x35b5eb(0x35f)],Game_Action['prototype'][_0x35b5eb(0x35f)]=function(){const _0xb920ab=_0x35b5eb;if(this[_0xb920ab(0x4e3)]()&&!this['isCustomBattleScope']())return this[_0xb920ab(0x438)]();else{if(_0xb920ab(0x479)===_0xb920ab(0x24b))_0x12f1e4[_0xb920ab(0x92e)](_0x3afb10['SwitchCritical'],!![]);else return VisuMZ[_0xb920ab(0x781)][_0xb920ab(0x483)][_0xb920ab(0x541)](this);}},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x438)]=function(){const _0x328920=_0x35b5eb,_0x322ed5=this['item']()[_0x328920(0xab6)];if(_0x322ed5['match'](/RANDOM/i))return![];if(_0x322ed5[_0x328920(0x111)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x322ed5['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x328920(0x781)][_0x328920(0x483)][_0x328920(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xe0)]=Game_Action['prototype'][_0x35b5eb(0x5eb)],Game_Action['prototype'][_0x35b5eb(0x5eb)]=function(){const _0x15f1ef=_0x35b5eb;let _0x1bf3ce=[];if(this[_0x15f1ef(0x4e3)]()){if('PzHRj'===_0x15f1ef(0x6f3))_0x1bf3ce=this['makeTargetsBattleCore']();else{if(!_0x4e6ef2[_0x15f1ef(0x9b9)]())return;const _0x4b05d9=this[_0x15f1ef(0x691)]();if(!_0x4b05d9)return;if(_0x5607bf)this[_0x15f1ef(0xaf1)](_0x5db14e+_0x4b05d9['_baseX'],_0x6021ef+_0x4b05d9[_0x15f1ef(0x740)],![]);_0x286fb7+=_0x4b05d9[_0x15f1ef(0x82d)],_0x2bb154+=_0x4b05d9[_0x15f1ef(0x56d)],_0x4b05d9['startHomeMove'](_0x1caa1e,_0xaa75f6,_0x4de635,_0xdba14f),this[_0x15f1ef(0x5c1)]=_0x589bf3,this[_0x15f1ef(0x185)]=_0x333248;}}else _0x1bf3ce=VisuMZ[_0x15f1ef(0x781)][_0x15f1ef(0xe0)][_0x15f1ef(0x541)](this);return _0x1bf3ce=this[_0x15f1ef(0x14c)](_0x1bf3ce),_0x1bf3ce;},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x855)]=function(){const _0x5d769e=_0x35b5eb;let _0x4e2dce=[];const _0x298d9f=String(this[_0x5d769e(0x5d3)]()[_0x5d769e(0xab6)]),_0x2664c1=VisuMZ[_0x5d769e(0x781)][_0x5d769e(0x82f)](this[_0x5d769e(0x5d3)](),_0x5d769e(0x1bf));if(VisuMZ['BattleCore']['JS'][_0x2664c1]){_0x4e2dce=VisuMZ[_0x5d769e(0x781)][_0x5d769e(0xe0)]['call'](this);const _0x35d9f5=VisuMZ[_0x5d769e(0x781)][_0x5d769e(0x82f)](this[_0x5d769e(0x5d3)](),'Targets');return _0x4e2dce=VisuMZ['BattleCore']['JS'][_0x35d9f5]['call'](this,this[_0x5d769e(0xad8)](),_0x4e2dce),this[_0x5d769e(0x3e6)](_0x4e2dce);}if(_0x298d9f[_0x5d769e(0x111)](/(\d+) RANDOM ANY/i)){let _0x2dd1aa=Number(RegExp['$1']);while(_0x2dd1aa--){const _0x4bb8fb=Math['randomInt'](0x2)===0x0?this[_0x5d769e(0x5ce)]():this[_0x5d769e(0xa91)]();_0x4e2dce['push'](_0x4bb8fb[_0x5d769e(0x595)]());}return this[_0x5d769e(0x3e6)](_0x4e2dce);}if(_0x298d9f[_0x5d769e(0x111)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x2726d9=Number(RegExp['$1']);while(_0x2726d9--){_0x4e2dce['push'](this[_0x5d769e(0x5ce)]()[_0x5d769e(0x595)]());}return this[_0x5d769e(0x3e6)](_0x4e2dce);}if(_0x298d9f[_0x5d769e(0x111)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x5d769e(0xa2f)!==_0x5d769e(0xa2f))_0x353909[_0x5d769e(0x945)]=_0x3322ff(_0xba4a6c['$1']);else{let _0x21f660=Number(RegExp['$1']);while(_0x21f660--){_0x4e2dce[_0x5d769e(0x7c7)](this['friendsUnit']()[_0x5d769e(0x595)]());}return this[_0x5d769e(0x3e6)](_0x4e2dce);}}if(_0x298d9f[_0x5d769e(0x111)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x4e2dce[_0x5d769e(0x7c7)](...this[_0x5d769e(0xa91)]()[_0x5d769e(0x12b)]()[_0x5d769e(0x416)](_0x3832e5=>_0x3832e5!==this[_0x5d769e(0xad8)]())),this['repeatTargets'](_0x4e2dce);return VisuMZ[_0x5d769e(0x781)]['Game_Action_makeTargets']['call'](this);},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0xb26)]=function(_0x55f645){const _0xee816a=_0x35b5eb,_0x32d8f3=[];for(let _0x453882=0x0;_0x453882<this['numTargets']();_0x453882++){_0xee816a(0x6e7)===_0xee816a(0x236)?this[_0xee816a(0x503)](_0xa6c66,_0x3288f4,_0x53c494):_0x32d8f3[_0xee816a(0x7c7)](_0x55f645[_0xee816a(0x595)]());}return _0x32d8f3;},Game_Action['prototype'][_0x35b5eb(0x14c)]=function(_0x202263){const _0xe8cead=_0x35b5eb;if(!this[_0xe8cead(0x5d3)]())return _0x202263;const _0x53cae3=this[_0xe8cead(0x5d3)]()[_0xe8cead(0x7fd)];if(_0x53cae3[_0xe8cead(0x111)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0xe8cead(0x462)!==_0xe8cead(0x8f2))_0x202263[_0xe8cead(0x4e8)](this[_0xe8cead(0xad8)]());else{if(this['_battleLayoutStyle'])return this[_0xe8cead(0x92d)];return this[_0xe8cead(0x92d)]=_0xf4f869['_scene']['battleLayoutStyle'](),this[_0xe8cead(0x92d)];}}return _0x202263;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x291)]=Game_Action['prototype'][_0x35b5eb(0x496)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x496)]=function(_0x375787,_0x49b3aa){const _0x10106d=_0x35b5eb;VisuMZ['BattleCore'][_0x10106d(0x291)][_0x10106d(0x541)](this,_0x375787,_0x49b3aa);if(!_0x375787[_0x10106d(0x135)]())return;for(const _0x19267d of this[_0x10106d(0xad8)]()[_0x10106d(0x632)]()){if(_0x19267d===_0x375787[_0x10106d(0x7dd)]()){let _0x10de65=_0x49b3aa['value1'];_0x10de65*=_0x375787[_0x10106d(0x821)](_0x19267d),_0x10de65*=this[_0x10106d(0xad8)]()[_0x10106d(0x104)](_0x19267d),_0x10de65*=this[_0x10106d(0x9e2)](_0x375787);if(Math[_0x10106d(0x39b)]()<_0x10de65){if(_0x10106d(0x659)!==_0x10106d(0x55b))_0x375787['_deathStateApplied']=!![],this[_0x10106d(0x44b)](_0x375787);else{if(!_0x14a847)return;if(!this[_0x10106d(0x19c)])return;if(_0x2940ae[_0x10106d(0xa6f)]()){}else{if(_0x59689c[_0x10106d(0x65c)]()){if(this[_0x10106d(0x62e)]===_0xcce010&&!_0x2cd44f[_0x10106d(0xae6)]())return;}}this[_0x10106d(0x19c)][_0x10106d(0x65b)](_0x4d3c62,'hp');}}}}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x163)]=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x148)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x148)]=function(_0x892dd8,_0x3ba488){const _0x41f085=_0x35b5eb;VisuMZ[_0x41f085(0x781)][_0x41f085(0x163)][_0x41f085(0x541)](this,_0x892dd8,_0x3ba488);if(!_0x892dd8['isImmortal']())return;if(_0x3ba488[_0x41f085(0x484)]!==_0x892dd8[_0x41f085(0x7dd)]())return;let _0x2fe199=_0x3ba488['value1'];!this[_0x41f085(0x3a5)]()&&(_0x2fe199*=_0x892dd8[_0x41f085(0x821)](_0x3ba488['dataId']),_0x2fe199*=this[_0x41f085(0x9e2)](_0x892dd8)),Math['random']()<_0x2fe199&&(_0x892dd8[_0x41f085(0x7c8)]=!![],this['makeSuccess'](_0x892dd8));},VisuMZ['BattleCore'][_0x35b5eb(0xad5)]=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x3be)],Game_Action['prototype']['applyGlobal']=function(){const _0x422a76=_0x35b5eb;VisuMZ['BattleCore'][_0x422a76(0xad5)][_0x422a76(0x541)](this),this[_0x422a76(0x28e)](),this[_0x422a76(0x3ca)]();},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x28e)]=function(){const _0x8d85af=_0x35b5eb;if(!SceneManager[_0x8d85af(0x3a2)]())return;const _0x8395ce=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x131cf8=this[_0x8d85af(0x5d3)]()[_0x8d85af(0x7fd)][_0x8d85af(0x111)](_0x8395ce);if(_0x131cf8){if(_0x8d85af(0x7e1)===_0x8d85af(0x7e1))for(const _0x386ce4 of _0x131cf8){if(!_0x386ce4)continue;_0x386ce4['match'](_0x8395ce);const _0x90e440=String(RegExp['$1'])['split'](',')[_0x8d85af(0x3dd)](_0x28a457=>String(_0x28a457)[_0x8d85af(0x54d)]()),_0x353944=_0x90e440[_0x8d85af(0x3dd)](_0x48ff1b=>DataManager[_0x8d85af(0x283)](_0x48ff1b));for(const _0x2dead2 of _0x353944){const _0x426f3d=$dataCommonEvents[_0x2dead2];_0x426f3d&&$gameTemp[_0x8d85af(0x8e5)](_0x2dead2);}}else _0x5270a3[_0x8d85af(0x92e)](_0x2ce4e6[_0x8d85af(0x7e2)],![]);}},DataManager[_0x35b5eb(0x283)]=function(_0x240fed){const _0x3bb0d9=_0x35b5eb;_0x240fed=_0x240fed[_0x3bb0d9(0x3e7)]()[_0x3bb0d9(0x54d)](),this['_commonEventIDs']=this[_0x3bb0d9(0x2c4)]||{};if(this[_0x3bb0d9(0x2c4)][_0x240fed])return this[_0x3bb0d9(0x2c4)][_0x240fed];for(const _0x836271 of $dataCommonEvents){if(!_0x836271)continue;let _0x4617c1=_0x836271[_0x3bb0d9(0x945)];_0x4617c1=_0x4617c1[_0x3bb0d9(0x125)](/\x1I\[(\d+)\]/gi,''),_0x4617c1=_0x4617c1[_0x3bb0d9(0x125)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x4617c1[_0x3bb0d9(0x3e7)]()['trim']()]=_0x836271['id'];}return this[_0x3bb0d9(0x2c4)][_0x240fed]||0x0;},Game_Action[_0x35b5eb(0x73b)]['resetResultSwitches']=function(){const _0x45006f=_0x35b5eb;if(!SceneManager[_0x45006f(0x3a2)]())return;const _0x53d8bd=VisuMZ[_0x45006f(0x781)]['Settings'][_0x45006f(0x450)];_0x53d8bd[_0x45006f(0x7f7)]&&(_0x45006f(0x8c5)!==_0x45006f(0x8c5)?_0x100c85['snapForBackground']():$gameSwitches[_0x45006f(0x92e)](_0x53d8bd[_0x45006f(0x7f7)],![])),_0x53d8bd['SwitchMissEvade']&&$gameSwitches[_0x45006f(0x92e)](_0x53d8bd[_0x45006f(0x7e2)],![]),_0x53d8bd['VariableDmg']&&$gameVariables[_0x45006f(0x92e)](_0x53d8bd[_0x45006f(0xa75)],0x0),_0x53d8bd[_0x45006f(0x733)]&&(_0x45006f(0x6b9)!=='Urwdg'?(_0x4dff7e=_0x141041(_0xac8d38['$1']),_0x914bd2=_0x2cbe4a(_0x106341['$2'])):$gameVariables[_0x45006f(0x92e)](_0x53d8bd['VariableHeal'],0x0));},Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x9c8)]=function(_0x42ddce){const _0x58f235=_0x35b5eb;if(!SceneManager[_0x58f235(0x3a2)]())return;if(!_0x42ddce)return;const _0x38ad1b=_0x42ddce[_0x58f235(0x59e)](),_0x117db1=VisuMZ[_0x58f235(0x781)]['Settings'][_0x58f235(0x450)];_0x117db1[_0x58f235(0x7f7)]&&_0x38ad1b[_0x58f235(0x936)]&&$gameSwitches[_0x58f235(0x92e)](_0x117db1[_0x58f235(0x7f7)],!![]);if(_0x117db1[_0x58f235(0x7e2)]&&(_0x38ad1b[_0x58f235(0x2cd)]||_0x38ad1b[_0x58f235(0xaee)])){if(_0x58f235(0x955)===_0x58f235(0x799)){const _0x233219=_0x47aa14[_0x58f235(0x22a)]?_0x399d21[_0x58f235(0x473)][_0x58f235(0x3cb)][_0x58f235(0x232)]:_0x392da3[_0x58f235(0x781)][_0x58f235(0x3cb)][_0x58f235(0x2c2)],_0x2496a9=_0x19707d['magicSkills'][_0x58f235(0x87d)](_0x184fdb),_0x22430a=_0x2496a9?_0x233219[_0x58f235(0x526)]:_0x233219[_0x58f235(0x539)];_0x15ee90=_0x58f235(0x901)[_0x58f235(0x4ed)](_0x22430a,_0x18f02e);}else $gameSwitches[_0x58f235(0x92e)](_0x117db1[_0x58f235(0x7e2)],!![]);}if(_0x117db1[_0x58f235(0xa75)]){let _0x48d5c1=$gameVariables['value'](_0x117db1[_0x58f235(0xa75)]);if(_0x38ad1b[_0x58f235(0x490)]>0x0){if(_0x58f235(0x90d)===_0x58f235(0x90d))_0x48d5c1+=Math[_0x58f235(0x88a)](_0x38ad1b[_0x58f235(0x490)]);else{if(!this[_0x58f235(0xb0d)])return![];if(this[_0x58f235(0x294)]>0x0)return!![];return _0x466639[_0x58f235(0x781)][_0x58f235(0x9a4)][_0x58f235(0x541)](this);}}$gameVariables[_0x58f235(0x92e)](_0x117db1[_0x58f235(0xa75)],_0x48d5c1);}if(_0x117db1['VariableHeal']){if('hhqAs'!==_0x58f235(0x2ef))!_0x1953e2['isDeathStateAffected']()&&(_0x63f91c[_0x58f235(0x827)](_0xc153c7[0x2],_0x3b05ce[0x3]),_0x1f4dd7['forceAction'](_0x25571f));else{let _0x5cb582=$gameVariables[_0x58f235(0x3d1)](_0x117db1[_0x58f235(0x733)]);if(_0x38ad1b[_0x58f235(0x490)]<0x0){if(_0x58f235(0x594)!==_0x58f235(0x8ef))_0x5cb582+=Math[_0x58f235(0x88a)](_0x38ad1b[_0x58f235(0x490)]);else{this[_0x58f235(0x1e6)]()[_0x58f235(0x835)](_0x32d4f2);if(_0x27b60f[_0x58f235(0x725)]())_0x229f7e['scale']['x']=-0x1;}}$gameVariables[_0x58f235(0x92e)](_0x117db1[_0x58f235(0x733)],_0x5cb582);}}},VisuMZ['BattleCore'][_0x35b5eb(0x3fd)]=Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x186)],Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x186)]=function(){const _0x5a5ceb=_0x35b5eb;VisuMZ[_0x5a5ceb(0x781)][_0x5a5ceb(0x3fd)][_0x5a5ceb(0x541)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x392)]=function(){const _0x2a5354=_0x35b5eb;this[_0x2a5354(0xb2b)]=![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x8ac)]=Game_BattlerBase[_0x35b5eb(0x73b)]['refresh'],Game_BattlerBase['prototype']['refresh']=function(){const _0x425ec0=_0x35b5eb;this[_0x425ec0(0x48f)]={},VisuMZ['BattleCore'][_0x425ec0(0x8ac)]['call'](this);},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x4fe)]=function(_0x555fd2){const _0x2bab3c=_0x35b5eb;return this['_cache']=this[_0x2bab3c(0x48f)]||{},this[_0x2bab3c(0x48f)][_0x555fd2]!==undefined;},Game_BattlerBase['prototype'][_0x35b5eb(0x9e3)]=function(){const _0x566e58=_0x35b5eb;if(this[_0x566e58(0x48f)][_0x566e58(0x9e3)]!==undefined)return this[_0x566e58(0x48f)][_0x566e58(0x9e3)];const _0x17f6ad=/<DAMAGE CAP:[ ](\d+)>/i,_0xe867e1=this['traitObjects']()[_0x566e58(0x3dd)](_0x2422e6=>_0x2422e6&&_0x2422e6['note'][_0x566e58(0x111)](_0x17f6ad)?Number(RegExp['$1']):0x0);let _0x224992=_0xe867e1[_0x566e58(0x1a0)]>0x0?Math['max'](..._0xe867e1):0x0;if(_0x224992<=0x0)_0x224992=VisuMZ[_0x566e58(0x781)]['Settings'][_0x566e58(0x165)][_0x566e58(0x4b6)];return this[_0x566e58(0x48f)][_0x566e58(0x9e3)]=_0x224992,this['_cache']['hardDamageCap'];},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x838)]=function(){const _0x1bdaf2=_0x35b5eb;if(this['_cache'][_0x1bdaf2(0x99a)]!==undefined)return this['_cache'][_0x1bdaf2(0x99a)];let _0x94995c=VisuMZ[_0x1bdaf2(0x781)][_0x1bdaf2(0x3cb)][_0x1bdaf2(0x165)][_0x1bdaf2(0x316)];const _0x16fe9d=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x5ca4e9=this[_0x1bdaf2(0x46d)]()[_0x1bdaf2(0x3dd)](_0x37828a=>_0x37828a&&_0x37828a[_0x1bdaf2(0x7fd)][_0x1bdaf2(0x111)](_0x16fe9d)?Number(RegExp['$1'])/0x64:0x0);return _0x94995c=_0x5ca4e9['reduce']((_0x1aae23,_0x51abcf)=>_0x1aae23+_0x51abcf,_0x94995c),this[_0x1bdaf2(0x48f)]['softDamageCap']=_0x94995c,this[_0x1bdaf2(0x48f)][_0x1bdaf2(0x99a)]['clamp'](0.01,0x1);},VisuMZ['BattleCore']['Game_BattlerBase_die']=Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0xaf2)],Game_BattlerBase[_0x35b5eb(0x73b)]['die']=function(){const _0x2d07e3=_0x35b5eb;VisuMZ[_0x2d07e3(0x781)][_0x2d07e3(0xd2)][_0x2d07e3(0x541)](this),SceneManager[_0x2d07e3(0x3a2)]()&&this['requestMotion'](_0x2d07e3(0x9e4));},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x691)]=function(){const _0x4af058=_0x35b5eb;if(!SceneManager[_0x4af058(0x3a2)]())return null;if(!SceneManager[_0x4af058(0x885)][_0x4af058(0x254)])return null;return SceneManager['_scene'][_0x4af058(0x254)][_0x4af058(0x8a4)](this);},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x130)]=function(){const _0x41ac3f=_0x35b5eb;return VisuMZ[_0x41ac3f(0x781)]['Settings'][_0x41ac3f(0xb22)][_0x41ac3f(0x927)];},Game_BattlerBase['prototype'][_0x35b5eb(0x4a3)]=function(){const _0x251e26=_0x35b5eb;return VisuMZ['BattleCore'][_0x251e26(0x3cb)]['Actor'][_0x251e26(0x749)];},Game_BattlerBase['prototype'][_0x35b5eb(0x250)]=function(){const _0x32b2b9=_0x35b5eb;if(this[_0x32b2b9(0xa6f)]&&this['isActor']()){if('mESoa'===_0x32b2b9(0x249))return VisuMZ[_0x32b2b9(0x781)][_0x32b2b9(0x3cb)][_0x32b2b9(0xb22)][_0x32b2b9(0x8dc)];else _0xa6e700['BattleCore'][_0x32b2b9(0x8bd)][_0x32b2b9(0x541)](this),this[_0x32b2b9(0x655)]();}else return VisuMZ['BattleCore'][_0x32b2b9(0x3cb)][_0x32b2b9(0xac3)][_0x32b2b9(0x8dc)];},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x231)]=function(){return!![];},Game_BattlerBase['prototype'][_0x35b5eb(0xe2)]=function(){return 0x0;},Game_BattlerBase[_0x35b5eb(0x73b)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x35b5eb(0x997)]=function(_0x49d9ed){const _0x482bb1=_0x35b5eb;if(!_0x49d9ed)return 0x0;let _0x82c0c8=0x0;const _0x34f14e=_0x49d9ed[_0x482bb1(0x7fd)];return _0x34f14e[_0x482bb1(0x111)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x82c0c8+=Number(RegExp['$1'])),_0x34f14e[_0x482bb1(0x111)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x82c0c8+=Number(RegExp['$1'])),_0x82c0c8;},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x228)]=function(_0x31fac0){const _0x20791b=_0x35b5eb;if(!_0x31fac0)return 0x0;let _0x27638b=0x0;const _0x57a539=_0x31fac0['note'];return _0x57a539[_0x20791b(0x111)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x27638b+=Number(RegExp['$1'])),_0x57a539[_0x20791b(0x111)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x27638b+=Number(RegExp['$2'])),_0x27638b;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xafd)]=Game_BattlerBase[_0x35b5eb(0x73b)]['isStateResist'],Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x16b)]=function(_0x490d03){const _0x5e22ca=_0x35b5eb;if(_0x490d03===this[_0x5e22ca(0x7dd)]()&&this[_0x5e22ca(0x135)]())return!![];return VisuMZ[_0x5e22ca(0x781)][_0x5e22ca(0xafd)][_0x5e22ca(0x541)](this,_0x490d03);},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x135)]=function(){const _0x41e0b7=_0x35b5eb;return this[_0x41e0b7(0xb2b)];},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x68c)]=function(_0x35e044){const _0x135970=_0x35b5eb;if(_0x35e044){if(_0x135970(0xbd)!==_0x135970(0x195))this[_0x135970(0x369)]();else{return _0x4a786b[_0x135970(0x781)][_0x135970(0x68e)][_0x135970(0x541)](this);;}}else this[_0x135970(0x30c)]();},Game_BattlerBase['prototype'][_0x35b5eb(0x369)]=function(){const _0x4fe895=_0x35b5eb;if(this[_0x4fe895(0x1b2)]())return;this[_0x4fe895(0xb2b)]=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x30c)]=function(){const _0x403187=_0x35b5eb,_0xbc02dc=this[_0x403187(0x6fe)]();this['_immortal']=![],_0xbc02dc&&this['_deathStateApplied']&&('HwEWd'===_0x403187(0xadc)?_0x1c18e1[_0x403187(0x5d3)]()['damage'][_0x403187(0x1f4)]>0x0?this[_0x403187(0x9ec)]():this[_0x403187(0x67a)](_0x403187(0x961)):this[_0x403187(0xaf2)]()),this[_0x403187(0x7c8)]=![],this[_0x403187(0x129)](),this[_0x403187(0x1b2)]()&&_0xbc02dc&&(this[_0x403187(0x620)](),this[_0x403187(0x80c)]());},VisuMZ['BattleCore']['Game_Action_numRepeats']=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x6bb)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x6bb)]=function(){const _0x3391ec=_0x35b5eb;if(this[_0x3391ec(0x5d3)]()){if('qNfCQ'!==_0x3391ec(0x61b)){if(this[_0x3391ec(0x294)]<=0x0)return;const _0x47f5fc=this[_0x3391ec(0x294)],_0x201f01=this[_0x3391ec(0x4b5)],_0x1bc24d=this[_0x3391ec(0xa4a)];_0x5d1cbc[_0x3391ec(0x268)]?(this[_0x3391ec(0x82d)]=this[_0x3391ec(0x5c7)](this[_0x3391ec(0x82d)],this[_0x3391ec(0x7cd)],_0x47f5fc,_0x201f01,_0x1bc24d),this['_homeY']=this[_0x3391ec(0x5c7)](this[_0x3391ec(0x56d)],this['_targetHomeY'],_0x47f5fc,_0x201f01,_0x1bc24d)):(this['_homeX']=(this['_homeX']*(_0x47f5fc-0x1)+this[_0x3391ec(0x7cd)])/_0x47f5fc,this['_homeY']=(this[_0x3391ec(0x56d)]*(_0x47f5fc-0x1)+this[_0x3391ec(0x575)])/_0x47f5fc);this[_0x3391ec(0x294)]--;if(this[_0x3391ec(0x294)]<=0x0)this[_0x3391ec(0xcf)]();}else return VisuMZ[_0x3391ec(0x781)][_0x3391ec(0x514)][_0x3391ec(0x541)](this);}else{if('qvFea'===_0x3391ec(0x3c1))this[_0x3391ec(0x759)](this[_0x3391ec(0x9eb)]);else return 0x0;}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x641)]=Game_Action[_0x35b5eb(0x73b)]['setAttack'],Game_Action['prototype']['setAttack']=function(){const _0x2a20ea=_0x35b5eb;if(this[_0x2a20ea(0xad8)]()&&this[_0x2a20ea(0xad8)]()[_0x2a20ea(0x63a)]()){if('DTiLy'!==_0x2a20ea(0x982))return _0x39ef0b[_0x2a20ea(0x781)]['Settings'][_0x2a20ea(0xb22)][_0x2a20ea(0x8dc)];else VisuMZ[_0x2a20ea(0x781)][_0x2a20ea(0x641)]['call'](this);}else this['clear']();},VisuMZ['BattleCore'][_0x35b5eb(0x70d)]=Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x63a)],Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x63a)]=function(){const _0x4de5e5=_0x35b5eb;if(!this['canAttackBattleCore']())return![];return VisuMZ['BattleCore'][_0x4de5e5(0x70d)][_0x4de5e5(0x541)](this);},Game_BattlerBase[_0x35b5eb(0x73b)]['canAttackBattleCore']=function(){const _0x2fe388=_0x35b5eb;for(const _0x1ded0b of this[_0x2fe388(0x46d)]()){if(!_0x1ded0b)continue;if(_0x1ded0b[_0x2fe388(0x7fd)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x372)]=Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x84b)],Game_Action[_0x35b5eb(0x73b)][_0x35b5eb(0x84b)]=function(){const _0x69190e=_0x35b5eb;this[_0x69190e(0xad8)]()[_0x69190e(0xe1)]()&&VisuMZ['BattleCore'][_0x69190e(0x372)][_0x69190e(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x558)]=Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0xe1)],Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0xe1)]=function(){const _0x15670b=_0x35b5eb;if(!this[_0x15670b(0x9d5)]())return![];return VisuMZ[_0x15670b(0x781)][_0x15670b(0x558)][_0x15670b(0x541)](this);},Game_BattlerBase['prototype'][_0x35b5eb(0x9d5)]=function(){const _0x16e31c=_0x35b5eb;for(const _0x2569f6 of this[_0x16e31c(0x46d)]()){if(_0x16e31c(0x715)!==_0x16e31c(0x715)){if(this[_0x16e31c(0x1c2)]===_0x2efe80)this['initBattleCore']();if(!_0x579068)return;if(this['_defeatedEnemies'][_0x16e31c(0x87d)](_0x3656f4))return;this[_0x16e31c(0x1c2)][_0x16e31c(0x7c7)](_0x2ffa04),this[_0x16e31c(0x1c2)][_0x16e31c(0x9ed)]((_0x550923,_0x82fcbe)=>_0x550923-_0x82fcbe);}else{if(!_0x2569f6)continue;if(_0x2569f6[_0x16e31c(0x7fd)][_0x16e31c(0x111)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x792)]=function(){const _0x495e6a=_0x35b5eb;for(const _0x562091 of this[_0x495e6a(0x46d)]()){if(_0x495e6a(0x3a4)!==_0x495e6a(0xab7)){if(!_0x562091)continue;if(_0x562091[_0x495e6a(0x7fd)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}else{if(this[_0x495e6a(0x8c2)]())return;this[_0x495e6a(0x815)](),this['_weaponSprite'][_0x495e6a(0x65b)](_0x5d300a),this[_0x495e6a(0x238)][_0x495e6a(0x959)]();}}return!![];},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x642)]=function(){const _0x591b6c=_0x35b5eb;return VisuMZ[_0x591b6c(0x781)]['Settings'][_0x591b6c(0x450)][_0x591b6c(0xa68)];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x20c)]=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x60e)],Game_Battler[_0x35b5eb(0x73b)]['regenerateAll']=function(){const _0x5ab565=_0x35b5eb;if(SceneManager[_0x5ab565(0x3a2)]()&&$gameTroop[_0x5ab565(0x77b)]()<=0x0)return;if(SceneManager[_0x5ab565(0x3a2)]()&&BattleManager[_0x5ab565(0xa6c)]()&&this['_lastRegenFrameCount']===Graphics[_0x5ab565(0x926)])return;this['_lastRegenFrameCount']=Graphics['frameCount'];SceneManager[_0x5ab565(0x3a2)]()&&this[_0x5ab565(0x993)](_0x5ab565(0x93b));VisuMZ[_0x5ab565(0x781)][_0x5ab565(0x20c)][_0x5ab565(0x541)](this);if(SceneManager[_0x5ab565(0x3a2)]()){if(_0x5ab565(0xa4d)!=='rdhWL')this['regenerateAllBattleCore'](),this[_0x5ab565(0x993)](_0x5ab565(0x446));else return 0x1;}},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x890)]=function(){const _0x1e449e=_0x35b5eb;if(SceneManager['isSceneBattle']())for(const _0xbebf54 of this[_0x1e449e(0x46d)]()){if('CaLUZ'!==_0x1e449e(0x706)){if(!_0xbebf54)continue;this[_0x1e449e(0x9ab)](_0xbebf54);}else{if(!_0x3b0873)return![];if(!_0x4fcaf4[_0x1e449e(0x3b3)])return![];if(!_0x24bbaf[_0x1e449e(0x455)][0x0])return![];if(_0x118881['targetObjects'][0x0][_0x1e449e(0xa6f)]&&!_0x3273c1[_0x1e449e(0x455)][0x0][_0x1e449e(0xa6f)]())return![];if(_0xd8fe66['isSideView']())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x12630f[_0x1e449e(0x62e)]===_0x5d7aa8){if(_0xb5e10d[_0x1e449e(0x3b3)]['displayType']!==0x0)return![];}else{if(_0xaa35a0[_0x1e449e(0x62e)]===_0x705c50){if(_0x10b272['_animation'][_0x1e449e(0x5d9)]===0x3)return![];}}return!![];const _0x5451a4=_0x1e9960[_0x1e449e(0x73b)][_0x1e449e(0xd6)]();return['xp',_0x1e449e(0xf2)][_0x1e449e(0x598)](_0x5451a4);}}},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x9ab)]=function(_0x662a30){const _0x35a68a=_0x35b5eb;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x35a68a(0x1b2)]())return;if(this['isHidden']())return;if(_0x662a30[_0x35a68a(0x7fd)][_0x35a68a(0x111)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x35a68a(0x7e5)!==_0x35a68a(0x7e5)){if(_0x4068e8[_0x35a68a(0x111)](/(.*):[ ](\d+)/i)){const _0x342043=_0x3e4a5b(_0x4cb5c5['$1'])[_0x35a68a(0x54d)](),_0x33b981=_0x1743a8(_0x478b59['$2']);_0x1b86f4[_0x342043]=_0x33b981,_0x578f6c+=_0x33b981;}else{if(_0x1cb449['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x2f3c78=_0x483465(_0x1acfdd['$1'])['trim'](),_0x370045=_0x46cd99(_0x5c72e3['$2']);_0xd9fb8e[_0x2f3c78]=_0x370045,_0x80fedf+=_0x370045;}else _0x3f60ed!==''&&(_0x2298f9[_0x5e0adb]=0x1,_0x1a1ddc++);}}else{const _0x16a274=Number(RegExp['$1']);$gameTemp[_0x35a68a(0x19a)]([this],_0x16a274,![],![]);}}},VisuMZ[_0x35b5eb(0x781)]['Game_Battler_startTpbTurn']=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x6a6)],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x6a6)]=function(){const _0x611f5d=_0x35b5eb;this[_0x611f5d(0x993)](_0x611f5d(0x292)),VisuMZ['BattleCore'][_0x611f5d(0xea)][_0x611f5d(0x541)](this),this[_0x611f5d(0x993)](_0x611f5d(0x597));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x394)]=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x7ad)],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x7ad)]=function(){const _0x50b337=_0x35b5eb;this['processBattleCoreJS'](_0x50b337(0x692)),VisuMZ[_0x50b337(0x781)][_0x50b337(0x394)][_0x50b337(0x541)](this),this[_0x50b337(0x993)](_0x50b337(0x28f));},Game_Battler['prototype'][_0x35b5eb(0x993)]=function(_0x25832c){const _0x59a49c=_0x35b5eb;if(this[_0x59a49c(0x89b)]||this[_0x59a49c(0x6cb)])return;const _0x424513=VisuMZ['BattleCore'][_0x59a49c(0x3cb)][_0x59a49c(0x450)];if(_0x424513[_0x25832c])_0x424513[_0x25832c][_0x59a49c(0x541)](this);for(const _0x298254 of this[_0x59a49c(0x46d)]()){if(!_0x298254)continue;key=VisuMZ[_0x59a49c(0x781)]['createKeyJS'](_0x298254,_0x25832c),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x59a49c(0x781)]['JS'][key][_0x59a49c(0x541)](this,this,this,_0x298254,0x0);}},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x396)]=function(){const _0x1c8d12=_0x35b5eb;return VisuMZ[_0x1c8d12(0x781)][_0x1c8d12(0x3cb)][_0x1c8d12(0xb22)][_0x1c8d12(0x8ff)]||![];},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x55d)]=function(){const _0x103b9f=_0x35b5eb;if(this[_0x103b9f(0xa1d)]()){if(this[_0x103b9f(0x396)]()){if(_0x103b9f(0x783)!==_0x103b9f(0x783))_0x52a586+=_0x2ae1ba,_0xac8fcc+=_0x7c1397;else{if(this[_0x103b9f(0x113)][_0x103b9f(0x51b)](_0x57f23c=>_0x57f23c['item']()&&_0x57f23c['isMagical']())){if(_0x103b9f(0x3b9)!==_0x103b9f(0x43f))return!![];else _0x25c0c6*=-0x1,_0x3bce9b*=-0x1;}}}else{if(this['_actions'][_0x103b9f(0x51b)](_0x170578=>_0x170578[_0x103b9f(0x5d3)]()&&_0x170578[_0x103b9f(0x861)]()))return!![];}}if(BattleManager[_0x103b9f(0xa6c)]()&&this[_0x103b9f(0x560)]===_0x103b9f(0x77a))return this[_0x103b9f(0x396)]()?this[_0x103b9f(0x2a4)]()&&this[_0x103b9f(0x2a4)]()[_0x103b9f(0x5d3)]()&&this[_0x103b9f(0x2a4)]()[_0x103b9f(0x840)]():this['currentAction']()&&this[_0x103b9f(0x2a4)]()['item']()&&this['currentAction']()['isMagicSkill']();return![];},Game_Battler['prototype']['isCharging']=function(){const _0x4d0913=_0x35b5eb;if(BattleManager[_0x4d0913(0xa6c)]()&&this[_0x4d0913(0x560)]===_0x4d0913(0x77a))return this[_0x4d0913(0x396)]()?this[_0x4d0913(0x2a4)]()&&this[_0x4d0913(0x2a4)]()[_0x4d0913(0x5d3)]()&&!this['currentAction']()[_0x4d0913(0x840)]():this[_0x4d0913(0x2a4)]()&&this[_0x4d0913(0x2a4)]()[_0x4d0913(0x5d3)]()&&!this[_0x4d0913(0x2a4)]()[_0x4d0913(0x861)]();return![];},VisuMZ['BattleCore'][_0x35b5eb(0xac7)]=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x6b4)],Game_Battler['prototype']['clearDamagePopup']=function(){const _0x494e09=_0x35b5eb;VisuMZ[_0x494e09(0x781)]['Game_Battler_clearDamagePopup']['call'](this),this[_0x494e09(0x89c)]=[];},Game_Battler['prototype'][_0x35b5eb(0x934)]=function(){const _0x330393=_0x35b5eb;if(!this[_0x330393(0x89c)])this[_0x330393(0x6b4)]();return this[_0x330393(0x89c)][_0x330393(0x1a0)]>0x0;},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x63f)]=function(){const _0x494658=_0x35b5eb;if(!SceneManager[_0x494658(0x3a2)]())return;if(!this[_0x494658(0x89c)])this[_0x494658(0x6b4)]();this[_0x494658(0x5ee)]();const _0x3924a4=this[_0x494658(0x691)]();if(_0x3924a4)_0x3924a4[_0x494658(0x7db)]();},Game_Battler[_0x35b5eb(0x73b)]['createSeparateDamagePopups']=function(){const _0x54b017=_0x35b5eb,_0x1aff22=this[_0x54b017(0x59e)]();if(_0x1aff22[_0x54b017(0x2cd)]||_0x1aff22[_0x54b017(0xaee)]){if('ciYxg'!=='JRqrn'){const _0x5e75b6=JsonEx[_0x54b017(0x622)](_0x1aff22);_0x5e75b6[_0x54b017(0xae5)]=![],_0x5e75b6['mpDamage']=0x0,this['_damagePopupArray'][_0x54b017(0x7c7)](_0x5e75b6);}else{if(this[_0x54b017(0x62e)]===_0x5ae119)return;_0x8bc34d[_0x54b017(0x73b)][_0x54b017(0x2e4)][_0x54b017(0x541)](this);}}if(_0x1aff22['hpAffected']){if('HKzJV'!==_0x54b017(0x6da)){const _0x54976f=JsonEx[_0x54b017(0x622)](_0x1aff22);_0x54976f[_0x54b017(0x2cd)]=![],_0x54976f[_0x54b017(0xaee)]=![],_0x54976f[_0x54b017(0x1ee)]=0x0,this['_damagePopupArray'][_0x54b017(0x7c7)](_0x54976f);}else{if(_0x9cf81e[_0x54b017(0x7fd)][_0x54b017(0x111)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x53d0d4=_0x2f319d(_0xc98fb7['$1'])[_0x54b017(0x8b8)](/[\r\n]+/)[_0x54b017(0x4e8)](''),_0x16669c=this[_0x54b017(0x96e)](_0x53d0d4);_0x4d3709=this[_0x54b017(0x140)](_0x16669c)||_0x225f36,_0x305b94=_0x56712b['swapEnemyIDs'](_0x2b088a);}}}if(_0x1aff22[_0x54b017(0x1ee)]!==0x0){if(_0x54b017(0x98c)===_0x54b017(0x98c)){const _0x1240f0=JsonEx['makeDeepCopy'](_0x1aff22);_0x1240f0[_0x54b017(0x2cd)]=![],_0x1240f0['evaded']=![],_0x1240f0['hpAffected']=![],this[_0x54b017(0x89c)][_0x54b017(0x7c7)](_0x1240f0);}else{const _0x307af7=this[_0x54b017(0x408)](this[_0x54b017(0xcb)]());let _0x563276=this[_0x54b017(0x50d)](this[_0x54b017(0xcb)]());_0x563276=_0x563276['replace'](/\\I\[(\d+)\]/gi,''),_0x4d2fa4[_0x54b017(0x633)](),this[_0x54b017(0x465)](_0x563276,_0x307af7),this[_0x54b017(0x2fd)](_0x563276,_0x307af7),this['commandNameWindowCenter'](_0x563276,_0x307af7);}}},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xb2d)]=function(){const _0x5632ff=_0x35b5eb;if(!this[_0x5632ff(0x89c)])this[_0x5632ff(0x6b4)]();if(VisuMZ[_0x5632ff(0x781)][_0x5632ff(0x3cb)][_0x5632ff(0x165)]['NewPopupBottom']){if(_0x5632ff(0x464)===_0x5632ff(0x4fc)){this[_0x5632ff(0x8ea)]=new _0x46a6dd();const _0x5a585c=_0x124e51[_0x5632ff(0x885)],_0x595377=_0x5a585c[_0x5632ff(0x85e)][_0x5632ff(0x57e)](_0x5a585c[_0x5632ff(0x84c)]);_0x5a585c[_0x5632ff(0x52e)](this['_borderPortraitSprite'],_0x595377),this[_0x5632ff(0x8ea)][_0x5632ff(0xabd)]['x']=0.5,this[_0x5632ff(0x8ea)]['anchor']['y']=0x1;const _0x128169=_0x1fd56a[_0x5632ff(0x781)]['Settings'][_0x5632ff(0x842)][_0x5632ff(0x3ae)];this['_borderPortraitSprite'][_0x5632ff(0xac1)]['x']=_0x128169,this[_0x5632ff(0x8ea)][_0x5632ff(0xac1)]['y']=_0x128169,this[_0x5632ff(0x8ea)]['y']=this['y']+this[_0x5632ff(0x491)],this[_0x5632ff(0xa8a)]=0x0;}else return this[_0x5632ff(0x89c)][_0x5632ff(0x751)]();}else{if(_0x5632ff(0x466)!==_0x5632ff(0xa56))return this['_damagePopupArray'][_0x5632ff(0xb07)]();else{const _0x420ba3=[_0x5632ff(0x107),'PostApplyAsUserJS',_0x5632ff(0x99c),_0x5632ff(0x7e0),'PreApplyAsTargetJS','PostApplyAsTargetJS','PreDamageAsTargetJS',_0x5632ff(0x8f7),_0x5632ff(0x3a1),'PostStartActionJS',_0x5632ff(0x6f9),_0x5632ff(0x628),_0x5632ff(0x282),_0x5632ff(0xf0),_0x5632ff(0x5e8),'PostEndBattleJS',_0x5632ff(0x577),_0x5632ff(0x70a),'EscapeSuccessJS',_0x5632ff(0x822),_0x5632ff(0x292),_0x5632ff(0x597),_0x5632ff(0x692),_0x5632ff(0x28f),'PreRegenerateJS',_0x5632ff(0x446)];for(const _0x4b7dac of _0x420ba3){_0x1ef8fa['BattleCore'][_0x5632ff(0x42a)](_0x10c35a,_0x4b7dac);}}}},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x448)]=function(_0x4c8dcd,_0x540b50){const _0x389a31=_0x35b5eb;if(!SceneManager['isSceneBattle']())return;if(!this['battler']())return;if(_0x4c8dcd[_0x389a31(0x1a0)]<=0x0)return;_0x540b50=_0x540b50||{},_0x540b50['textColor']=_0x540b50[_0x389a31(0x300)]||_0x389a31(0x6c2),_0x540b50['flashColor']=_0x540b50[_0x389a31(0x547)]||[0x0,0x0,0x0,0x0],_0x540b50[_0x389a31(0x2aa)]=_0x540b50[_0x389a31(0x2aa)]||0x0,this[_0x389a31(0x691)]()[_0x389a31(0x448)](_0x4c8dcd,_0x540b50);},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x772)]=function(_0x1e3aa5,_0x5185bd,_0x23f98f){const _0x3225a4=_0x35b5eb;if(!SceneManager[_0x3225a4(0x3a2)]())return;if(!this[_0x3225a4(0x691)]())return;if(_0x5185bd[_0x3225a4(0x1a0)]<=0x0)return;_0x23f98f=_0x23f98f||{},_0x23f98f['textColor']=_0x23f98f['textColor']||_0x3225a4(0x6c2),_0x23f98f[_0x3225a4(0x547)]=_0x23f98f['flashColor']||[0x0,0x0,0x0,0x0],_0x23f98f[_0x3225a4(0x2aa)]=_0x23f98f[_0x3225a4(0x2aa)]||0x0,this[_0x3225a4(0x691)]()['setupIconTextPopup'](_0x1e3aa5,_0x5185bd,_0x23f98f);},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x5a3)]=function(){const _0x486d25=_0x35b5eb;if(this['isHidden']())return![];if(this[_0x486d25(0x6fe)]()&&this[_0x486d25(0x690)]())return!![];if(this['isEnemy']()&&this[_0x486d25(0xae6)]()){if(this[_0x486d25(0x1b2)]()&&this[_0x486d25(0x3c5)]())return![];}else{if(this[_0x486d25(0x1b2)]()){if(_0x486d25(0x5d8)!==_0x486d25(0x5d8)){if(!_0x27368c[_0x486d25(0x3a2)]())return;if(!_0x40e3e7[_0x486d25(0x3d8)])return;_0x1f5bcd[_0x486d25(0x68f)](_0x2d5559,_0x4f26bf);const _0x309093=_0x55691a['_action'],_0x160ed1=_0x4f4771[_0x486d25(0xa71)];if(!_0x309093)return;_0x309093[_0x486d25(0x2bd)]=_0x160ed1;}else return![];}}return!![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x1f0)]=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x521)],Game_Battler[_0x35b5eb(0x73b)]['clearMotion']=function(){const _0x3d7688=_0x35b5eb;VisuMZ['BattleCore']['Game_Battler_clearMotion'][_0x3d7688(0x541)](this),this[_0x3d7688(0x48a)]();},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x271)]=function(){return!![];},Game_Battler[_0x35b5eb(0x73b)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x35b5eb(0x781)]['Game_Battler_onBattleStart']=Game_Battler[_0x35b5eb(0x73b)]['onBattleStart'],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x38b)]=function(_0xdf7295){const _0x4735a3=_0x35b5eb;VisuMZ['BattleCore'][_0x4735a3(0x24d)]['call'](this,_0xdf7295),this[_0x4735a3(0x7b3)](_0xdf7295);},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x7b3)]=function(_0x51845e){const _0x14479c=_0x35b5eb;this[_0x14479c(0xe4)](![]),this[_0x14479c(0x5c1)]=undefined,this[_0x14479c(0x185)]=undefined;},VisuMZ[_0x35b5eb(0x781)]['Game_Battler_onBattleEnd']=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xb1d)],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xb1d)]=function(){const _0x455c9f=_0x35b5eb;VisuMZ['BattleCore'][_0x455c9f(0x8bd)]['call'](this),this[_0x455c9f(0x655)]();},Game_Battler['prototype'][_0x35b5eb(0x655)]=function(){const _0xdc1be1=_0x35b5eb;this[_0xdc1be1(0x5c1)]=undefined,this[_0xdc1be1(0x185)]=undefined;},VisuMZ['BattleCore'][_0x35b5eb(0x4f5)]=Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x387)],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x387)]=function(_0x8ba614){const _0x52aaff=_0x35b5eb;VisuMZ['BattleCore']['Game_Battler_performActionStart'][_0x52aaff(0x541)](this,_0x8ba614);if(!_0x8ba614[_0x52aaff(0x80f)]()){const _0x25194b=this[_0x52aaff(0x691)]();_0x25194b&&('Axqmr'!==_0x52aaff(0x53c)?(this[_0x52aaff(0x8cf)]['push'](_0x52aaff(0x3f0),_0xf69485[_0x52aaff(0x5bd)]['format'](_0x1ba9dd[_0x52aaff(0x945)]())),this[_0x52aaff(0x8cf)]['push'](_0x52aaff(0x17d))):_0x25194b[_0x52aaff(0x2ed)]());}this[_0x52aaff(0xe4)](![]);},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x62c)]=function(){const _0x4e61a3=_0x35b5eb,_0x65e2a8=this['_flinched'];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this[_0x4e61a3(0x38e)]()){const _0x49a3b3=this[_0x4e61a3(0x691)]();if(_0x49a3b3&&_0x65e2a8)_0x49a3b3[_0x4e61a3(0x2ed)]();return;}const _0x11569e=this[_0x4e61a3(0x691)]();if(_0x11569e)_0x11569e['stepBack']();this['setBattlerFlip'](![]),this[_0x4e61a3(0x80c)]();},Game_Battler['prototype'][_0x35b5eb(0x546)]=function(_0x3722ae){const _0x3541fb=_0x35b5eb;if(_0x3722ae['isAttack']())this[_0x3541fb(0x9ec)]();else{if(_0x3722ae[_0x3541fb(0x80f)]())this[_0x3541fb(0x67a)](_0x3541fb(0x6de));else{if(_0x3722ae['isMagical']())'AWuVe'!==_0x3541fb(0x2ab)?this[_0x3541fb(0x67a)](_0x3541fb(0xb24)):(_0x29a458[_0x3541fb(0x30c)](),_0x5adf4e['addState'](_0x5f1112['deathStateId']()));else{if(_0x3722ae[_0x3541fb(0xa50)]()){if(_0x3541fb(0x3ed)!==_0x3541fb(0x3ed)){const _0x2fc63e=_0x5d099e[_0x3541fb(0x43d)](_0x1351ff[_0x3541fb(0x91c)]/0x3),_0x56200f=_0x313155[_0x3541fb(0x3d5)]((_0x3b99dc[_0x3541fb(0x1b4)]-_0x2fc63e)/0x2),_0x168e25=this[_0x3541fb(0x7d7)](),_0x26599d=_0x168e25['y'],_0x3cc3a4=_0x168e25['height'];return new _0x37a736(_0x56200f,_0x26599d,_0x2fc63e,_0x3cc3a4);}else _0x3722ae['item']()[_0x3541fb(0x21d)][_0x3541fb(0x1f4)]>0x0?_0x3541fb(0x4c4)===_0x3541fb(0x1f1)?_0x159edb[_0x3541fb(0x867)]():this[_0x3541fb(0x9ec)]():_0x3541fb(0xa16)==='dEXLU'?(_0x21f1dc['_autoBattle']=!![],_0x16720f['makeActions'](),this[_0x3541fb(0x26f)](),_0x589549[_0x3541fb(0xa6c)]()&&(_0x5cd06a['_inputting']=![])):this[_0x3541fb(0x67a)](_0x3541fb(0x961));}else _0x3722ae[_0x3541fb(0x55f)]()&&this[_0x3541fb(0x67a)](_0x3541fb(0x5d3));}}}},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x870)]=function(){const _0xd85640=_0x35b5eb;return $dataSystem[_0xd85640(0x4f2)][0x0];},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x4c1)]=function(){const _0x522201=_0x35b5eb,_0x5d4999=this[_0x522201(0x870)]();return _0x5d4999?_0x5d4999[_0x522201(0x8c4)]:0x0;},Game_Battler[_0x35b5eb(0x73b)]['performSubstitute']=function(_0x27f38d){const _0x278549=_0x35b5eb;if(!$gameSystem[_0x278549(0x9b9)]())return;const _0x3480af=this[_0x278549(0x691)](),_0x57d626=_0x27f38d[_0x278549(0x691)]();if(!_0x3480af||!_0x57d626)return;const _0x5a1933=_0x57d626[_0x278549(0x74d)],_0x168dce=_0x57d626[_0x278549(0x740)];this['moveBattlerToPoint'](_0x5a1933,_0x168dce,0x0,![],_0x278549(0x62b),-0x1),_0x3480af[_0x278549(0x5fc)]();const _0x23b86b=VisuMZ[_0x278549(0x781)]['Settings'][_0x278549(0x421)];let _0x4c1edb=(_0x57d626[_0x278549(0x91c)]+_0x3480af[_0x278549(0x91c)])/0x2;_0x4c1edb*=this['isActor']()?0x1:-0x1;let _0x924cc=_0x23b86b['StepDistanceY']*(this[_0x278549(0xa6f)]()?0x1:-0x1);_0x27f38d[_0x278549(0xb02)](_0x4c1edb,_0x924cc,0x0,![],_0x278549(0x62b)),_0x57d626[_0x278549(0x5fc)]();},Game_Battler['prototype']['requestMotion']=function(_0x1f1fc5){const _0x2fac8c=_0x35b5eb;if(SceneManager[_0x2fac8c(0x3a2)]()){const _0x58592e=this[_0x2fac8c(0x691)]();_0x58592e&&(_0x58592e[_0x2fac8c(0x2ce)](_0x1f1fc5),[_0x2fac8c(0xab5),_0x2fac8c(0x535),_0x2fac8c(0x8e8)][_0x2fac8c(0x87d)](_0x1f1fc5)&&this[_0x2fac8c(0x723)]());}this[_0x2fac8c(0x48a)]();},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x723)]=function(){},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x6ac)]=function(_0x40129c){const _0x4d9c4b=_0x35b5eb;if(SceneManager[_0x4d9c4b(0x3a2)]()){if(_0x4d9c4b(0x660)!=='GFnbE')_0x3311f2[_0x4d9c4b(0x8e5)](_0x50bc8d[_0x5e6aa1]);else{const _0x6619eb=this['battler']();if(_0x6619eb)_0x6619eb[_0x4d9c4b(0x410)](_0x40129c);}}},Game_Battler[_0x35b5eb(0x73b)]['startAttackWeaponAnimation']=function(){const _0x29a4e3=_0x35b5eb;if(SceneManager[_0x29a4e3(0x3a2)]()){if(_0x29a4e3(0x1cf)===_0x29a4e3(0x9fc))this['_createCursorArea'](),this[_0x29a4e3(0x761)](),_0x723f86['prototype'][_0x29a4e3(0x899)][_0x29a4e3(0x541)](this),this['_createDamageContainer']();else{const _0x224b49=this['getAttackWeaponAnimationId']();this[_0x29a4e3(0x6ac)](_0x224b49);}}},Game_Battler[_0x35b5eb(0x73b)]['performCastAnimation']=function(_0x36e4e7,_0xed0446){const _0x542063=_0x35b5eb;if(!_0x36e4e7)return;if(!_0x36e4e7[_0x542063(0x5d3)]())return;if(_0x36e4e7['isAttack']())return;if(_0x36e4e7[_0x542063(0x80f)]())return;if(_0x36e4e7[_0x542063(0x55f)]())return;let _0x529037=0x0;const _0x36be2b=VisuMZ['BattleCore'][_0x542063(0x3cb)][_0x542063(0x421)],_0x5ddffd=_0x36e4e7['item']()[_0x542063(0x7fd)];if(_0x5ddffd[_0x542063(0x111)](/<CAST ANIMATION: (\d+)>/i))_0x529037=Number(RegExp['$1']);else{if(_0x5ddffd[_0x542063(0x111)](/<NO CAST ANIMATION>/i)){if('lUcjU'===_0x542063(0x753))_0xfd7e27[_0x542063(0x781)][_0x542063(0x1df)][_0x542063(0x541)](this,_0xc0fd51);else return;}else{if(_0x36e4e7['isCertainHit']()){if('oOIDa'!==_0x542063(0x201))_0x529037=_0x36be2b['CastCertain'];else{if(!_0x288475[_0x542063(0x3a2)]())return;if(!_0x20970b[_0x542063(0x3ac)])return;if(!_0x3a1928[_0x542063(0x785)])return;_0x229174[_0x542063(0x68f)](_0x4bcc30,_0x3fb98e);const _0x3f33a5=_0x1fcebe['VariableID'];_0x1d336a[_0x542063(0x92e)](_0x3f33a5,_0x8b7448[_0x542063(0x785)][_0x542063(0x12d)]());}}else{if(_0x36e4e7[_0x542063(0x32c)]())_0x529037=_0x36be2b[_0x542063(0xfe)];else _0x36e4e7[_0x542063(0x840)]()&&(_0x529037=_0x36be2b[_0x542063(0x803)]);}}}_0x529037>0x0&&$gameTemp[_0x542063(0x29a)]([this],_0x529037,!!_0xed0446);},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x1ab)]=function(){const _0x5eb7c3=_0x35b5eb;SoundManager['playReflection']();let _0x39308e=VisuMZ[_0x5eb7c3(0x781)][_0x5eb7c3(0x3cb)][_0x5eb7c3(0x421)][_0x5eb7c3(0x770)];_0x39308e>0x0&&(Imported[_0x5eb7c3(0x268)]?_0x5eb7c3(0x69c)!=='tEdeR'?$gameTemp['requestFauxAnimation']([this],_0x39308e):this[_0x5eb7c3(0x26f)]():$gameTemp['requestAnimation']([this],_0x39308e));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x5e5)]=Game_Battler[_0x35b5eb(0x73b)]['performDamage'],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x1c0)]=function(){const _0x544bfc=_0x35b5eb;VisuMZ['BattleCore']['Game_Battler_performDamage'][_0x544bfc(0x541)](this),this['performFlinch']();},VisuMZ[_0x35b5eb(0x781)]['Game_Battler_performMiss']=Game_Battler[_0x35b5eb(0x73b)]['performMiss'],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x46a)]=function(){const _0x4cb941=_0x35b5eb;VisuMZ[_0x4cb941(0x781)]['Game_Battler_performMiss'][_0x4cb941(0x541)](this),this[_0x4cb941(0x2c6)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x57a)]=Game_Battler[_0x35b5eb(0x73b)]['performEvasion'],Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x734)]=function(){const _0x34aec8=_0x35b5eb;VisuMZ[_0x34aec8(0x781)][_0x34aec8(0x57a)][_0x34aec8(0x541)](this),this[_0x34aec8(0x2c6)]();},Game_Battler['prototype'][_0x35b5eb(0x2c6)]=function(){const _0x45d398=_0x35b5eb;if(!$gameSystem[_0x45d398(0x9b9)]())return;if(this[_0x45d398(0x9f0)])return;this[_0x45d398(0x9f0)]=!![];const _0xcd4840=this['battler']();if(_0xcd4840)_0xcd4840[_0x45d398(0x1bd)]();},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x80c)]=function(){const _0x43727c=_0x35b5eb;if(this[_0x43727c(0x1b2)]()&&this[_0x43727c(0x7ff)]!==_0x43727c(0x9e4)){this[_0x43727c(0x67a)](_0x43727c(0x9e4));return;}if(this[_0x43727c(0x1b2)]()&&this[_0x43727c(0x7ff)]===_0x43727c(0x9e4))return;if(!!this[_0x43727c(0x9c2)])return;if(this[_0x43727c(0x65c)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x43727c(0x785)]){if(this['battler']())this[_0x43727c(0x691)]()[_0x43727c(0x1d2)]();}this[_0x43727c(0x48a)]();return;}if(this['_motionType']===_0x43727c(0x18d))return;if(this[_0x43727c(0x7ff)]===_0x43727c(0x921)&&!BattleManager[_0x43727c(0x38e)]())return;if(this[_0x43727c(0x7ff)]===_0x43727c(0x6de)&&!BattleManager[_0x43727c(0x38e)]())return;this['clearMotion']();if(this['battler']()&&BattleManager[_0x43727c(0x38e)]()){this['battler']()[_0x43727c(0x1d2)](),this['clearFreezeMotion']();return;}},Game_Enemy['prototype']['isDuringNonLoopingMotion']=function(){const _0x321d7d=_0x35b5eb;if(!this[_0x321d7d(0xae6)]())return![];const _0x381e6d=this[_0x321d7d(0x691)]();if(!_0x381e6d)return![];const _0x10471e=_0x381e6d['_svBattlerSprite'];if(!_0x10471e)return![];const _0x402a8f=_0x10471e['_motion'];return _0x402a8f&&!_0x402a8f['loop'];},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x670)]=function(){const _0x33e49b=_0x35b5eb;return this[_0x33e49b(0x432)];},Game_Battler[_0x35b5eb(0x73b)]['setBattlerFlip']=function(_0x337ab4){const _0x39053f=_0x35b5eb;if(!$gameSystem[_0x39053f(0x9b9)]())return;this[_0x39053f(0x432)]=_0x337ab4;const _0x3b7896=this[_0x39053f(0x691)]();if(_0x3b7896)_0x3b7896[_0x39053f(0x662)]();},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xaf1)]=function(_0x40ba56,_0x3339e2,_0x18b68a){const _0x5651c2=_0x35b5eb;if(!$gameSystem[_0x5651c2(0x9b9)]())return;const _0x581546=this['battler']();if(!_0x581546)return;if(_0x40ba56===_0x581546['_baseX'])return;let _0x1604b6=![];if(this['isActor']()){if(_0x40ba56>_0x581546[_0x5651c2(0x74d)])_0x1604b6=!![];if(_0x40ba56<_0x581546[_0x5651c2(0x74d)])_0x1604b6=![];}else{if(this['isEnemy']()){if(_0x5651c2(0x7df)!=='DakhD'){if(!this[_0x5651c2(0x89c)])this[_0x5651c2(0x6b4)]();return _0x24e21c['BattleCore']['Settings'][_0x5651c2(0x165)][_0x5651c2(0x7d0)]?this[_0x5651c2(0x89c)][_0x5651c2(0x751)]():this[_0x5651c2(0x89c)][_0x5651c2(0xb07)]();}else{if(_0x40ba56>_0x581546[_0x5651c2(0x74d)])_0x1604b6=![];if(_0x40ba56<_0x581546[_0x5651c2(0x74d)])_0x1604b6=!![];}}};this[_0x5651c2(0xe4)](_0x18b68a?!_0x1604b6:_0x1604b6),_0x581546[_0x5651c2(0x662)]();},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xb02)]=function(_0x4e0b69,_0x158c98,_0x5fae1b,_0x59fa52,_0x1d8cb0){const _0x2c0659=_0x35b5eb;if(!$gameSystem[_0x2c0659(0x9b9)]())return;const _0x40a0dc=this[_0x2c0659(0x691)]();if(!_0x40a0dc)return;if(_0x59fa52)this[_0x2c0659(0xaf1)](_0x4e0b69+_0x40a0dc[_0x2c0659(0x74d)],_0x158c98+_0x40a0dc[_0x2c0659(0x740)],![]);_0x4e0b69+=_0x40a0dc[_0x2c0659(0x74d)]-_0x40a0dc[_0x2c0659(0x82d)],_0x158c98+=_0x40a0dc[_0x2c0659(0x740)]-_0x40a0dc[_0x2c0659(0x56d)],_0x40a0dc[_0x2c0659(0x413)](_0x4e0b69,_0x158c98,_0x5fae1b);if(Imported[_0x2c0659(0x268)])_0x40a0dc[_0x2c0659(0x6a5)](_0x1d8cb0||_0x2c0659(0x62b));},Game_Battler['prototype']['moveBattlerToPoint']=function(_0x5bb6c7,_0x1bd470,_0x3baf3f,_0x22d1c7,_0x4a260f,_0x328c72){const _0xb94a77=_0x35b5eb;if(!$gameSystem[_0xb94a77(0x9b9)]())return;const _0x48fa61=this['battler']();if(!_0x48fa61)return;_0x328c72=_0x328c72||0x0;if(_0x328c72>0x0){if('jTpGi'!==_0xb94a77(0x72e))_0x2aa10e['setActiveWeaponSlot'](_0x43fd00);else{if(_0x48fa61['_baseX']>_0x5bb6c7)_0x5bb6c7+=_0x48fa61[_0xb94a77(0x91c)]/0x2+_0x328c72;if(_0x48fa61[_0xb94a77(0x74d)]<_0x5bb6c7)_0x5bb6c7-=_0x48fa61['width']/0x2+_0x328c72;}}if(_0x22d1c7)this[_0xb94a77(0xaf1)](_0x5bb6c7,_0x1bd470,![]);_0x5bb6c7-=_0x48fa61[_0xb94a77(0x82d)],_0x1bd470-=_0x48fa61[_0xb94a77(0x56d)],_0x48fa61['startMove'](_0x5bb6c7,_0x1bd470,_0x3baf3f);if(Imported['VisuMZ_0_CoreEngine'])_0x48fa61['setMoveEasingType'](_0x4a260f||_0xb94a77(0x62b));},Game_Battler[_0x35b5eb(0x73b)]['moveBattlerHomeDistance']=function(_0x11311c,_0x43b902,_0x820a20,_0x12d3a8,_0xcb51e2){const _0x23ab16=_0x35b5eb;if(!$gameSystem[_0x23ab16(0x9b9)]())return;const _0x137ee4=this[_0x23ab16(0x691)]();if(!_0x137ee4)return;if(_0x12d3a8)this[_0x23ab16(0xaf1)](_0x11311c+_0x137ee4['_baseX'],_0x43b902+_0x137ee4[_0x23ab16(0x740)],![]);_0x11311c+=_0x137ee4['_homeX'],_0x43b902+=_0x137ee4[_0x23ab16(0x56d)],_0x137ee4[_0x23ab16(0x7fc)](_0x11311c,_0x43b902,_0x820a20,_0xcb51e2),this['_forcedHomeX']=_0x11311c,this[_0x23ab16(0x185)]=_0x43b902;},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x106)]=function(_0x27e938,_0x5a9eea,_0x4c52e3,_0x598876,_0x4359fb,_0x28f5e9){const _0x1bdd05=_0x35b5eb;if(!$gameSystem['isSideView']())return;const _0xd0ce39=this['battler']();if(!_0xd0ce39)return;_0x28f5e9=_0x28f5e9||0x0;if(_0x28f5e9>0x0){if(_0xd0ce39[_0x1bdd05(0x74d)]>_0x27e938)_0x27e938+=_0xd0ce39[_0x1bdd05(0x91c)]/0x2+_0x28f5e9;if(_0xd0ce39['_baseX']<_0x27e938)_0x27e938-=_0xd0ce39[_0x1bdd05(0x91c)]/0x2+_0x28f5e9;}if(_0x598876)this[_0x1bdd05(0xaf1)](_0x27e938,_0x5a9eea,![]);_0xd0ce39[_0x1bdd05(0x7fc)](_0x27e938,_0x5a9eea,_0x4c52e3,_0x4359fb),this[_0x1bdd05(0x5c1)]=_0x27e938,this[_0x1bdd05(0x185)]=_0x5a9eea;},Game_Battler[_0x35b5eb(0x73b)]['floatBattler']=function(_0x3d8c32,_0x2a8798,_0x2d4de0){const _0x2def6c=_0x35b5eb;if(!$gameSystem[_0x2def6c(0x9b9)]())return;const _0x26813d=this[_0x2def6c(0x691)]();if(!_0x26813d)return;_0x26813d['startFloat'](_0x3d8c32,_0x2a8798,_0x2d4de0);},Game_Battler['prototype'][_0x35b5eb(0x66b)]=function(_0x5a6df3,_0x3cba50){if(!$gameSystem['isSideView']())return;const _0x343b46=this['battler']();if(!_0x343b46)return;_0x343b46['startJump'](_0x5a6df3,_0x3cba50);},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x9d4)]=function(_0x4a6c23,_0x1427ca,_0x4ad79f,_0x272a66){const _0x32b0bb=_0x35b5eb;if(!$gameSystem['isSideView']())return;const _0x355efc=this[_0x32b0bb(0x691)]();if(!_0x355efc)return;_0x355efc['startSpin'](_0x4a6c23,_0x1427ca,_0x4ad79f,_0x272a66);},Game_Battler['prototype'][_0x35b5eb(0x666)]=function(_0x3854ea,_0x5961a1,_0x870bca,_0x318325){const _0x2028af=_0x35b5eb;if(!$gameSystem['isSideView']())return;const _0x18c2da=this['battler']();if(!_0x18c2da)return;this['isActor']()&&(_0x3854ea*=-0x1,_0x5961a1*=-0x1),_0x18c2da[_0x2028af(0x5f1)](_0x3854ea,_0x5961a1,_0x870bca,_0x318325);},Game_Battler['prototype'][_0x35b5eb(0x817)]=function(_0x29be5a,_0x3f80a7,_0x19010e,_0x542b2a){const _0x2ec495=_0x35b5eb;if(!$gameSystem[_0x2ec495(0x9b9)]())return;const _0x3893e0=this[_0x2ec495(0x691)]();if(!_0x3893e0)return;_0x3893e0[_0x2ec495(0x42b)](_0x29be5a,_0x3f80a7,_0x19010e,_0x542b2a);},Game_Battler[_0x35b5eb(0x73b)]['changeBattlerOpacity']=function(_0x46bbc1,_0x3ba66d,_0x23f389){const _0x3d6188=_0x35b5eb;if(!$gameSystem[_0x3d6188(0x9b9)]())return;const _0x7bd7f=this[_0x3d6188(0x691)]();if(!_0x7bd7f)return;_0x7bd7f[_0x3d6188(0x357)](_0x46bbc1,_0x3ba66d,_0x23f389);},Game_Battler['prototype'][_0x35b5eb(0x48a)]=function(){const _0x4d10e4=_0x35b5eb,_0x504c53=!!this[_0x4d10e4(0x9c2)];this[_0x4d10e4(0x9c2)]=undefined,_0x504c53&&(this[_0x4d10e4(0x80c)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x49e)]=function(){const _0xd33f8d=_0x35b5eb;if(!SceneManager[_0xd33f8d(0x3a2)]())return;const _0x4b525c=this[_0xd33f8d(0x691)]();if(!_0x4b525c)return;let _0x5d3b9a=this[_0xd33f8d(0xa6f)]()?_0x4b525c[_0xd33f8d(0x7a6)]:_0x4b525c[_0xd33f8d(0x548)][_0xd33f8d(0x7a6)];_0x5d3b9a&&(_0xd33f8d(0x6cf)==='CfnBI'?_0x5d3b9a['setup'](0x0):_0x20c39b['addChildToUiContainer'](this['_hpGaugeSprite']));},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x4f0)]=function(_0x123e82,_0x53d129,_0x15def3){const _0x1cea3a=_0x35b5eb;if(this[_0x1cea3a(0x65c)]()&&!this[_0x1cea3a(0xae6)]())return;let _0x5ed29a=0x0,_0x5b4a7f=0x0;_0x123e82['match'](/ATTACK[ ](\d+)/i)&&(_0x1cea3a(0x807)===_0x1cea3a(0x807)?(_0x5b4a7f=Number(RegExp['$1']),_0x5b4a7f--):_0x5f0f7c['endAnimation']&&_0x3e805d[_0x1cea3a(0x9ae)]());if(this[_0x1cea3a(0xa6f)]()){const _0x130e26=this[_0x1cea3a(0x78c)]();_0x5ed29a=_0x130e26[_0x5b4a7f]?_0x130e26[_0x5b4a7f]['wtypeId']:0x0;}else this[_0x1cea3a(0x65c)]()&&(_0x5ed29a=this[_0x1cea3a(0x4b9)]()[_0x1cea3a(0x7ed)]||0x0);const _0x21db45=$dataSystem[_0x1cea3a(0x4f2)][_0x5ed29a];_0x123e82[_0x1cea3a(0x111)](/attack/i)&&(_0x123e82=[_0x1cea3a(0x535),_0x1cea3a(0xab5),'missile'][_0x21db45[_0x1cea3a(0x1f4)]]||_0x1cea3a(0xab5)),this[_0x1cea3a(0x9c2)]={'motionType':_0x123e82,'weaponImageId':_0x53d129?_0x21db45[_0x1cea3a(0x8c4)]:0x0,'pattern':_0x15def3};},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xa6e)]=function(_0xe77edc){const _0x283ff3=_0x35b5eb;if(!_0xe77edc)return![];return _0xe77edc[_0x283ff3(0xa91)]()===this['friendsUnit']();},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x742)]=function(_0x15faa3){const _0x154e06=_0x35b5eb;if(!_0x15faa3)return![];return _0x15faa3[_0x154e06(0x5ce)]()===this[_0x154e06(0xa91)]();},Game_Battler['prototype'][_0x35b5eb(0x8c2)]=function(){return![];},Game_Actor['prototype'][_0x35b5eb(0x8c2)]=function(){const _0x3d8799=_0x35b5eb;return this[_0x3d8799(0x950)]()[_0x3d8799(0x111)](/\$/i);},Game_Enemy[_0x35b5eb(0x73b)]['hasStaticSvBattler']=function(){const _0x4d5ce2=_0x35b5eb;return this[_0x4d5ce2(0xae6)]()&&this[_0x4d5ce2(0x5e4)]()[_0x4d5ce2(0x111)](/\$/i);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x21e)]=Game_Actor['prototype'][_0x35b5eb(0x65b)],Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x65b)]=function(_0x3bca21){const _0x47c671=_0x35b5eb;VisuMZ[_0x47c671(0x781)][_0x47c671(0x21e)][_0x47c671(0x541)](this,_0x3bca21),this[_0x47c671(0x399)]();},Game_Actor['prototype'][_0x35b5eb(0x399)]=function(){const _0x52a60a=_0x35b5eb;this[_0x52a60a(0x557)]='',this[_0x52a60a(0x157)]()&&this['actor']()[_0x52a60a(0x7fd)][_0x52a60a(0x111)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x52a60a(0x557)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x35b5eb(0x36c)]=function(){const _0x3a8e2a=_0x35b5eb;if(this[_0x3a8e2a(0x513)]()!==''){if(_0x3a8e2a(0x9f4)!==_0x3a8e2a(0x9f4))_0x1f0a88[_0x3a8e2a(0xab6)]=_0xe3e595(_0x1e3ad0['$1'])[_0x3a8e2a(0x3e7)]()[_0x3a8e2a(0x54d)]();else return this[_0x3a8e2a(0x513)]();}else{if(Imported[_0x3a8e2a(0x919)]&&this['getMenuImage']()!=='')return this[_0x3a8e2a(0x6fa)]();}return'';},Game_Actor['prototype'][_0x35b5eb(0x513)]=function(){const _0x1cf7ef=_0x35b5eb;if(this[_0x1cf7ef(0x557)]===undefined)this[_0x1cf7ef(0x399)]();return this[_0x1cf7ef(0x557)];},Game_Actor['prototype']['setBattlePortrait']=function(_0x4be1e1){const _0x53acc0=_0x35b5eb;if(this['_battlePortrait']===undefined)this[_0x53acc0(0x399)]();this[_0x53acc0(0x557)]=_0x4be1e1;if(SceneManager['isSceneBattle']()&&$gameParty['battleMembers']()[_0x53acc0(0x87d)](this)){const _0x3c091c=SceneManager[_0x53acc0(0x885)][_0x53acc0(0x8f5)];if(_0x3c091c)_0x3c091c[_0x53acc0(0x930)](this);}},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x498)]=function(){return!![];},Game_Actor[_0x35b5eb(0x73b)]['isAutoBattle']=function(){const _0x1aa4da=_0x35b5eb;if(!this[_0x1aa4da(0x78b)]()&&BattleManager[_0x1aa4da(0x345)])return!![];return Game_Battler[_0x1aa4da(0x73b)][_0x1aa4da(0x974)][_0x1aa4da(0x541)](this);},VisuMZ['BattleCore']['Game_Actor_makeActionList']=Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x3f8)],Game_Actor['prototype'][_0x35b5eb(0x3f8)]=function(){const _0x4ba5c3=_0x35b5eb;if(BattleManager['_autoBattle']&&!ConfigManager[_0x4ba5c3(0x64b)])return this[_0x4ba5c3(0x1d5)]();else{return VisuMZ[_0x4ba5c3(0x781)][_0x4ba5c3(0x68e)][_0x4ba5c3(0x541)](this);;}},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x1d5)]=function(){const _0x2f7e6d=[],_0x4f31a4=new Game_Action(this);return _0x4f31a4['setAttack'](),_0x2f7e6d['push'](_0x4f31a4),_0x2f7e6d;},Game_Actor[_0x35b5eb(0x73b)]['battleCommands']=function(){const _0x2d7b72=_0x35b5eb;if(this['currentClass']()[_0x2d7b72(0x7fd)][_0x2d7b72(0x111)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x2d7b72(0x406)!==_0x2d7b72(0x406))this[_0x2d7b72(0x173)]=new _0x32b491(),_0x25a64d['ANTI_TINT_UI']?this[_0x2d7b72(0x835)](this[_0x2d7b72(0x173)]):this['_battleField'][_0x2d7b72(0x835)](this[_0x2d7b72(0x173)]);else return String(RegExp['$1'])['split'](/[\r\n]+/);}else{if(_0x2d7b72(0x143)!=='vadlm')return VisuMZ[_0x2d7b72(0x781)][_0x2d7b72(0x3cb)][_0x2d7b72(0x2c2)]['BattleCmdList'];else this[_0x2d7b72(0x3d4)][_0x2d7b72(0x89a)]['smooth']=this[_0x2d7b72(0xb0d)]['battlerSmoothImage']();}},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x130)]=function(){const _0x43d80a=_0x35b5eb;if(this[_0x43d80a(0x48f)][_0x43d80a(0xa69)]!==undefined)return this[_0x43d80a(0x48f)][_0x43d80a(0xa69)];return this['actor']()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x43d80a(0x429)===_0x43d80a(0x8ee)?(_0x251de3=(_0x35165a+_0xcf52a6)/0x2,_0x568048=-0x1):(this[_0x43d80a(0x48f)][_0x43d80a(0xa69)]=eval(RegExp['$1']),this[_0x43d80a(0x48f)][_0x43d80a(0xad9)]=eval(RegExp['$2'])):this[_0x43d80a(0x48f)][_0x43d80a(0xa69)]=Game_Battler['prototype']['svBattlerAnchorX'][_0x43d80a(0x541)](this),this[_0x43d80a(0x48f)][_0x43d80a(0xa69)];},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x4a3)]=function(){const _0x4f8cbc=_0x35b5eb;if(this['_cache']['svAnchorY']!==undefined)return this[_0x4f8cbc(0x48f)][_0x4f8cbc(0xad9)];return this[_0x4f8cbc(0x157)]()[_0x4f8cbc(0x7fd)][_0x4f8cbc(0x111)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x4f8cbc(0x48f)]['svAnchorX']=eval(RegExp['$1']),this[_0x4f8cbc(0x48f)][_0x4f8cbc(0xad9)]=eval(RegExp['$2'])):this[_0x4f8cbc(0x48f)][_0x4f8cbc(0xad9)]=Game_Battler[_0x4f8cbc(0x73b)][_0x4f8cbc(0x4a3)][_0x4f8cbc(0x541)](this),this[_0x4f8cbc(0x48f)][_0x4f8cbc(0xad9)];},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x250)]=function(){const _0x57d7b7=_0x35b5eb;if(this['_cache'][_0x57d7b7(0x79b)]!==undefined)return this['_cache']['svShadow'];if(this[_0x57d7b7(0x157)]()[_0x57d7b7(0x7fd)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x57d7b7(0x48f)][_0x57d7b7(0x79b)]=!![];else this[_0x57d7b7(0x157)]()[_0x57d7b7(0x7fd)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?_0x57d7b7(0x1d3)===_0x57d7b7(0xa20)?this['addChild'](this['_effectsContainer']):this[_0x57d7b7(0x48f)]['svShadow']=![]:this[_0x57d7b7(0x48f)]['svShadow']=Game_Battler['prototype'][_0x57d7b7(0x250)]['call'](this);return this[_0x57d7b7(0x48f)][_0x57d7b7(0x79b)];},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x231)]=function(){const _0x2d6c39=_0x35b5eb;return VisuMZ['BattleCore'][_0x2d6c39(0x3cb)]['Actor'][_0x2d6c39(0x10d)];},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x723)]=function(){const _0x10bb81=_0x35b5eb,_0x35cde8=this['weapons'](),_0x144af7=_0x35cde8[0x0]?_0x35cde8[0x0]['wtypeId']:0x0,_0x1bc2df=$dataSystem['attackMotions'][_0x144af7];if(_0x1bc2df){if('menmL'==='menmL')this['startWeaponAnimation'](_0x1bc2df['weaponImageId']);else{if(this[_0x10bb81(0x80d)]<=0x0)return;if(!this[_0x10bb81(0xa26)])return;const _0x52309a=this['_skewDuration'],_0x14f47f=this['_skewWholeDuration'],_0x1dc260=this[_0x10bb81(0x684)],_0x2fdd37=this[_0x10bb81(0xa26)];_0x3891b5[_0x10bb81(0x268)]?(_0x2fdd37['skew']['x']=this[_0x10bb81(0x5c7)](_0x2fdd37[_0x10bb81(0x65d)]['x'],this[_0x10bb81(0x167)],_0x52309a,_0x14f47f,_0x1dc260),_0x2fdd37[_0x10bb81(0x65d)]['y']=this[_0x10bb81(0x5c7)](_0x2fdd37[_0x10bb81(0x65d)]['y'],this[_0x10bb81(0x696)],_0x52309a,_0x14f47f,_0x1dc260)):(_0x2fdd37[_0x10bb81(0x65d)]['x']=(_0x2fdd37[_0x10bb81(0x65d)]['x']*(_0x52309a-0x1)+this[_0x10bb81(0x167)])/_0x52309a,_0x2fdd37[_0x10bb81(0x65d)]['y']=(_0x2fdd37['skew']['y']*(_0x52309a-0x1)+this['_targetSkewY'])/_0x52309a);this[_0x10bb81(0x80d)]--;if(this[_0x10bb81(0x80d)]<=0x0)this['onSkewEnd']();}}},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xb3c)]=function(_0x1e4078){const _0x42a5a2=_0x35b5eb;Game_Battler['prototype'][_0x42a5a2(0xb3c)][_0x42a5a2(0x541)](this,_0x1e4078),this['performActionMotions'](_0x1e4078);},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x870)]=function(){const _0x11525a=_0x35b5eb,_0x13f823=this[_0x11525a(0x78c)](),_0x4f5bb6=_0x13f823[0x0]?_0x13f823[0x0][_0x11525a(0x7ed)]:0x0;return $dataSystem['attackMotions'][_0x4f5bb6];},Game_Actor[_0x35b5eb(0x73b)]['attackAnimationIdSlot']=function(_0x1227a0){_0x1227a0=_0x1227a0||0x1,_0x1227a0--;const _0x496767=this['weapons']();return _0x496767[_0x1227a0]?_0x496767[_0x1227a0]['animationId']:0x0;},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xa10)]=function(_0x33a6f6){const _0x579ab2=_0x35b5eb;_0x33a6f6=_0x33a6f6||0x1,_0x33a6f6--;const _0x559876=this[_0x579ab2(0x78c)](),_0x7f9079=_0x559876[_0x33a6f6]?_0x559876[_0x33a6f6][_0x579ab2(0x7ed)]:0x0;return $dataSystem[_0x579ab2(0x4f2)][_0x7f9079];},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xa58)]=function(_0x42022b){const _0x1b61a2=_0x35b5eb;_0x42022b=_0x42022b||0x1,_0x42022b--;const _0x4bc6d2=this[_0x1b61a2(0x78c)](),_0x829e35=_0x4bc6d2[_0x42022b]?_0x4bc6d2[_0x42022b][_0x1b61a2(0x7ed)]:0x0,_0x45b02c=$dataSystem[_0x1b61a2(0x4f2)][_0x829e35];if(_0x45b02c){if(_0x1b61a2(0x856)===_0x1b61a2(0x856)){if(_0x45b02c[_0x1b61a2(0x1f4)]===0x0)_0x1b61a2(0x931)===_0x1b61a2(0x931)?this['requestMotion'](_0x1b61a2(0x535)):_0x5efeb8[_0x1b61a2(0x67a)](_0x18cf6f);else{if(_0x45b02c[_0x1b61a2(0x1f4)]===0x1)this[_0x1b61a2(0x67a)](_0x1b61a2(0xab5));else _0x45b02c[_0x1b61a2(0x1f4)]===0x2&&('GADNI'===_0x1b61a2(0x7c9)?this[_0x1b61a2(0x67a)](_0x1b61a2(0x8e8)):(this[_0x1b61a2(0x993)](_0x1b61a2(0x70a)),_0x41c857[_0x1b61a2(0x781)][_0x1b61a2(0xa98)][_0x1b61a2(0x541)](this),this[_0x1b61a2(0x96a)](_0x1b61a2(0x5c4))));}this[_0x1b61a2(0x6ac)](_0x45b02c[_0x1b61a2(0x8c4)]);}else return this['_lastPluginCommandInterpreter'];}},Game_Battler[_0x35b5eb(0x73b)]['setActiveWeaponSlot']=function(_0x4f640e){const _0x594958=_0x35b5eb;this[_0x594958(0x528)]=_0x4f640e||0x0,this[_0x594958(0x48f)]={};},Game_Battler[_0x35b5eb(0x73b)]['nextActiveWeaponSlot']=function(){const _0x4001ee=_0x35b5eb;this['_activeWeaponSlot']=this['_activeWeaponSlot']||0x0,this[_0x4001ee(0x528)]++,this['_cache']={};},Game_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x8e9)]=function(){const _0x3fef11=_0x35b5eb;this[_0x3fef11(0x528)]=undefined,this['_cache']={};},VisuMZ['BattleCore'][_0x35b5eb(0x7f9)]=Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x76e)],Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x76e)]=function(){const _0x290fe6=_0x35b5eb;let _0x191bab=VisuMZ[_0x290fe6(0x781)]['Game_Actor_equips'][_0x290fe6(0x541)](this);if(this[_0x290fe6(0x8fe)])return _0x191bab;if(this[_0x290fe6(0x528)]!==undefined){if(_0x290fe6(0x3ec)!==_0x290fe6(0x3ec)){const _0x1f37f6=_0xc5aace[_0x290fe6(0x5d3)]();this[_0x290fe6(0x54b)](_0x466005,_0x8d1694,_0x1cdf50),this[_0x290fe6(0x898)](_0x2230ca,_0x4b3c04,_0x868955),this[_0x290fe6(0x843)](_0x23201c,_0x7f284,_0xe82009);}else{this[_0x290fe6(0x8fe)]=!![];const _0x159ade=this[_0x290fe6(0x8cd)]();for(let _0x492035=0x0;_0x492035<_0x159ade[_0x290fe6(0x1a0)];_0x492035++){'sIoOI'==='MLHci'?(_0xf2507a[_0x290fe6(0x91c)]=_0x508652(_0x30261d['$1']),_0x55b4a7[_0x290fe6(0x491)]=_0x2d21a6(_0x22df48['$2'])):_0x159ade[_0x492035]===0x1&&this[_0x290fe6(0x528)]!==_0x492035&&(_0x191bab[_0x492035]=null);}this['_tempEquipCheck']=undefined;}}return _0x191bab;},Window_BattleLog['prototype']['getDualWieldTimes']=function(_0x441db3){const _0x21ea8e=_0x35b5eb;if(_0x441db3[_0x21ea8e(0xa6f)]())return _0x441db3[_0x21ea8e(0x78c)]()[_0x21ea8e(0x1a0)]||0x1;else{if(_0x21ea8e(0xb0e)===_0x21ea8e(0xb0e))return 0x1;else{const _0x5d2216=_0x25c856(_0x3a18ac['$1']);return[_0x581216[_0x21ea8e(0x157)](_0x5d2216)];}}},Window_BattleLog[_0x35b5eb(0x73b)]['setActiveWeaponSet']=function(_0xdf7695,_0x282ca6){const _0x47812c=_0x35b5eb;_0xdf7695&&_0xdf7695[_0x47812c(0xa6f)]()&&_0xdf7695[_0x47812c(0x617)](_0x282ca6),this['callNextMethod']();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x5fb)]=function(_0x454726){const _0x492bc1=_0x35b5eb;if(_0x454726&&_0x454726[_0x492bc1(0xa6f)]()){if(_0x492bc1(0x38d)!==_0x492bc1(0x5a2))_0x454726[_0x492bc1(0x8e9)]();else{const _0x4c239c=_0x3e0d65[0x0][_0x492bc1(0x4ed)](_0x52af82[0x0]),_0x4b4f1e=_0x3b4bbc[0x1]['format'](_0x461e19[0x1]),_0x2c3a61=new _0x49b4ea(_0x163337['format'](_0x4b4f1e),'i');_0x32752b[_0x4c239c]=_0x2c3a61;}}this['callNextMethod']();},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xe2)]=function(){const _0x25557b=_0x35b5eb;let _0x32cb36=_0x25557b(0xe2);if(this[_0x25557b(0x4fe)](_0x32cb36))return this['_cache'][_0x32cb36];return this[_0x25557b(0x48f)][_0x32cb36]=this['createBattleUIOffsetX'](this[_0x25557b(0x157)]()),this[_0x25557b(0x48f)][_0x32cb36];},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x8db)]=function(){const _0x45c0a8=_0x35b5eb;let _0x8fdd6=_0x45c0a8(0x8db);if(this['checkCacheKey'](_0x8fdd6))return this['_cache'][_0x8fdd6];return this[_0x45c0a8(0x48f)][_0x8fdd6]=this[_0x45c0a8(0x228)](this[_0x45c0a8(0x157)]()),this[_0x45c0a8(0x48f)][_0x8fdd6];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x806)]=Game_Enemy[_0x35b5eb(0x73b)]['setup'],Game_Enemy[_0x35b5eb(0x73b)]['setup']=function(_0x4c0510,_0x319182,_0x561036){const _0x8e9640=_0x35b5eb;_0x4c0510=DataManager[_0x8e9640(0x8b3)](_0x4c0510),VisuMZ[_0x8e9640(0x781)][_0x8e9640(0x806)][_0x8e9640(0x541)](this,_0x4c0510,_0x319182,_0x561036),Imported[_0x8e9640(0x3d8)]&&(_0x8e9640(0x8b9)==='UOSls'?this['initElementStatusCore']():_0x4c37a2[_0x8e9640(0x89a)]=new _0x3013f6(this[_0x8e9640(0x91c)],this['height'])),this[_0x8e9640(0x790)](),this[_0x8e9640(0x28a)](),Imported[_0x8e9640(0x3d8)]&&(_0x8e9640(0xabe)===_0x8e9640(0xabe)?this['recoverAll']():this[_0x8e9640(0x48f)][_0x8e9640(0x79b)]=![]);},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x790)]=function(){const _0x2a6a2f=_0x35b5eb,_0x9716a2=VisuMZ[_0x2a6a2f(0x781)]['Settings'][_0x2a6a2f(0xac3)];this[_0x2a6a2f(0x8a8)]=_0x9716a2[_0x2a6a2f(0x118)],this['_svBattlerData']={};},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x28a)]=function(){const _0x663095=_0x35b5eb,_0x4aff9a=VisuMZ[_0x663095(0x781)]['Settings']['Enemy'],_0x559cf3=this[_0x663095(0x81d)]()['note'];this[_0x663095(0x443)]={'name':'','wtypeId':_0x4aff9a[_0x663095(0x540)],'collapse':_0x4aff9a[_0x663095(0xb06)],'motionIdle':_0x4aff9a[_0x663095(0x643)],'width':_0x4aff9a['Width']||0x40,'height':_0x4aff9a[_0x663095(0xa14)]||0x40,'anchorX':_0x4aff9a['AnchorX']||0x0,'anchorY':_0x4aff9a[_0x663095(0x749)]||0x0,'shadow':_0x4aff9a[_0x663095(0x8dc)]};_0x559cf3[_0x663095(0x111)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x663095(0x8a8)]=Number(RegExp['$1']));const _0x3bde24=this['_svBattlerData'];if(_0x559cf3['match'](/<SIDEVIEW BATTLER: (.*)>/i)){if('zgENz'!==_0x663095(0x501))_0x3bde24[_0x663095(0x945)]=String(RegExp['$1']);else{const _0x2ab311=[];for(let _0x43b851=0x0;_0x43b851<this[_0x663095(0x3a8)]();_0x43b851++){_0x2ab311[_0x663095(0x7c7)](_0x27cf99[_0x663095(0x595)]());}return _0x2ab311;}}else{if(_0x559cf3[_0x663095(0x111)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x39e933=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x663095(0x4e8)]('');_0x3bde24['name']=DataManager['processRandomizedData'](_0x39e933);}}_0x559cf3[_0x663095(0x111)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x3bde24[_0x663095(0x589)]=eval(RegExp['$1']),_0x3bde24[_0x663095(0x763)]=eval(RegExp['$2']));if(_0x559cf3[_0x663095(0x111)](/<SIDEVIEW COLLAPSE>/i)){if(_0x663095(0x172)===_0x663095(0x172))_0x3bde24['collapse']=!![];else return _0x41d4f7[_0x663095(0x416)](_0xe7e1b7=>_0xe7e1b7[_0x663095(0x6fe)]());}else _0x559cf3[_0x663095(0x111)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x3bde24[_0x663095(0x71a)]=![]);if(_0x559cf3['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x3bde24[_0x663095(0x6d1)]=!![];else _0x559cf3[_0x663095(0x111)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x3bde24[_0x663095(0x6d1)]=![]);if(_0x559cf3[_0x663095(0x111)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x3bde24['motionIdle']=String(RegExp['$1'])[_0x663095(0x210)]()[_0x663095(0x54d)]();else{if(_0x559cf3[_0x663095(0x111)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if('xhRom'!==_0x663095(0x904))this[_0x663095(0x312)]=_0x3fe197,_0x2a7d06[_0x663095(0x885)][_0x663095(0x1a3)]();else{const _0x3451e9=String(RegExp['$1'])[_0x663095(0x8b8)](/[\r\n]+/)[_0x663095(0x4e8)]('');_0x3bde24[_0x663095(0x6f2)]=DataManager[_0x663095(0x96e)](_0x3451e9);}}}_0x559cf3[_0x663095(0x111)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x3bde24['width']=Number(RegExp['$1']),_0x3bde24[_0x663095(0x491)]=Number(RegExp['$2']));if(_0x559cf3['match'](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0x663095(0x609)==='mrbss')_0x3bde24[_0x663095(0x7ed)]=DataManager[_0x663095(0x6ea)](RegExp['$1']);else{_0x3a3b19[_0x663095(0x214)](_0x158146[0x0],_0x34a773[0x1],_0x237039[0x2]);if(_0x13c816[0x3])this[_0x663095(0x17d)](_0x5c25f8[0x2]);return!![];}}else{if(_0x559cf3[_0x663095(0x111)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x48198c=String(RegExp['$1'])[_0x663095(0x8b8)](/[\r\n]+/)[_0x663095(0x4e8)](''),_0x22fc6d=DataManager[_0x663095(0x96e)](_0x48198c);_0x3bde24['wtypeId']=DataManager[_0x663095(0x6ea)](_0x22fc6d);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x1dd919=this[_0x663095(0x234)]();for(const _0x1ce5d2 of _0x1dd919){const _0x2f32b5=this[_0x663095(0x77f)](_0x1ce5d2)[_0x663095(0x3a0)][_0x663095(0x3e7)]()[_0x663095(0x54d)](),_0x344c00=_0x1ce5d2[_0x663095(0x3e7)]()[_0x663095(0x54d)]();if(_0x559cf3['match'](VisuMZ[_0x663095(0x10a)][_0x663095(0x984)][_0x663095(0x350)[_0x663095(0x4ed)](_0x344c00,_0x2f32b5)])){if('oBgeQ'===_0x663095(0xaea))_0x3bde24[_0x663095(0x945)]=String(RegExp['$1']);else{this['_tempEquipCheck']=!![];const _0x1a6a36=this[_0x663095(0x8cd)]();for(let _0x502aeb=0x0;_0x502aeb<_0x1a6a36[_0x663095(0x1a0)];_0x502aeb++){_0x1a6a36[_0x502aeb]===0x1&&this[_0x663095(0x528)]!==_0x502aeb&&(_0x1878db[_0x502aeb]=null);}this[_0x663095(0x8fe)]=_0x36b9bd;}}else{if(_0x559cf3[_0x663095(0x111)](VisuMZ[_0x663095(0x10a)][_0x663095(0x984)]['SvBattlerMass-%1-%2'[_0x663095(0x4ed)](_0x344c00,_0x2f32b5)])){if(_0x663095(0x89f)===_0x663095(0x574)){const _0x2d5d21=_0x446fdd['x']+_0x220cec['floor']((_0x3679f8['width']-_0x4ed101)/0x2);this[_0x663095(0x487)](_0xfd6dbf,_0x2d5d21,_0x464ef5['y'],_0x243784);}else{const _0x1b1243=String(RegExp['$1'])[_0x663095(0x8b8)](/[\r\n]+/)[_0x663095(0x4e8)]('');_0x3bde24[_0x663095(0x945)]=DataManager[_0x663095(0x96e)](_0x1b1243);}}}if(_0x559cf3[_0x663095(0x111)](VisuMZ[_0x663095(0x10a)][_0x663095(0x984)]['SvWeaponSolo-%1-%2'[_0x663095(0x4ed)](_0x344c00,_0x2f32b5)]))_0x3bde24[_0x663095(0x7ed)]=DataManager[_0x663095(0x6ea)](RegExp['$1']);else{if(_0x559cf3[_0x663095(0x111)](VisuMZ[_0x663095(0x10a)]['RegExp'][_0x663095(0x80a)[_0x663095(0x4ed)](_0x344c00,_0x2f32b5)])){const _0x4a6c65=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x663095(0x4e8)](''),_0x31abc3=DataManager[_0x663095(0x96e)](_0x4a6c65);_0x3bde24[_0x663095(0x7ed)]=DataManager[_0x663095(0x6ea)](_0x31abc3);}}if(_0x559cf3[_0x663095(0x111)](VisuMZ[_0x663095(0x10a)][_0x663095(0x984)][_0x663095(0x486)[_0x663095(0x4ed)](_0x344c00,_0x2f32b5)])){if('kWqDz'!=='kWqDz'){if(!_0x17b4cf)return![];return _0x2971d8[_0x663095(0xa91)]()===this[_0x663095(0xa91)]();}else _0x3bde24[_0x663095(0x6f2)]=String(RegExp['$1'])[_0x663095(0x210)]()['trim']();}else{if(_0x559cf3[_0x663095(0x111)](VisuMZ[_0x663095(0x10a)]['RegExp'][_0x663095(0x21f)[_0x663095(0x4ed)](_0x344c00,_0x2f32b5)])){const _0x5cb1aa=String(RegExp['$1'])[_0x663095(0x8b8)](/[\r\n]+/)['remove']('');_0x3bde24[_0x663095(0x6f2)]=DataManager['processRandomizedData'](_0x5cb1aa);}}}}},Game_Enemy['prototype']['attackAnimationId1']=function(){const _0x5cb15a=_0x35b5eb;return this[_0x5cb15a(0x8a8)]||0x0;},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0xa3e)]=function(){const _0x14be3b=_0x35b5eb;return this[_0x14be3b(0x74c)]();},Game_Enemy['prototype'][_0x35b5eb(0x5ea)]=function(_0x3aa409){const _0x4b76d7=_0x35b5eb;return this[_0x4b76d7(0x74c)]();},Game_Enemy[_0x35b5eb(0x73b)]['canBattlerMove']=function(){const _0x2ac758=_0x35b5eb;if(this[_0x2ac758(0x81d)]()['note'][_0x2ac758(0x111)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x2ac758(0x271)][_0x2ac758(0x541)](this);},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x123)]=function(){const _0x511deb=_0x35b5eb;if(this[_0x511deb(0x81d)]()[_0x511deb(0x7fd)][_0x511deb(0x111)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x35b5eb(0x73b)]['skills']=function(){const _0x4a9b1f=_0x35b5eb,_0x549fca=[];for(const _0x4ddfbb of this['enemy']()[_0x4a9b1f(0x7a3)]){const _0x4c4588=$dataSkills[_0x4ddfbb['skillId']];if(_0x4c4588&&!_0x549fca['includes'](_0x4c4588))_0x549fca[_0x4a9b1f(0x7c7)](_0x4c4588);}return _0x549fca;},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0xe2)]=function(){const _0xe24c20=_0x35b5eb;let _0x482956=_0xe24c20(0xe2);if(this[_0xe24c20(0x4fe)](_0x482956))return this[_0xe24c20(0x48f)][_0x482956];return this[_0xe24c20(0x48f)][_0x482956]=this[_0xe24c20(0x997)](this['enemy']()),this[_0xe24c20(0x48f)][_0x482956];},Game_Enemy['prototype']['battleUIOffsetY']=function(){const _0x429178=_0x35b5eb;let _0xddbbca=_0x429178(0x8db);if(this[_0x429178(0x4fe)](_0xddbbca))return this[_0x429178(0x48f)][_0xddbbca];return this[_0x429178(0x48f)][_0xddbbca]=this['createBattleUIOffsetY'](this[_0x429178(0x81d)]()),this[_0x429178(0x48f)][_0xddbbca];},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x4b9)]=function(){const _0x28b00b=_0x35b5eb;if(this[_0x28b00b(0x443)]!==undefined)return this['_svBattlerData'];return this[_0x28b00b(0x28a)](),this[_0x28b00b(0x443)];},Game_Enemy[_0x35b5eb(0x73b)]['hasSvBattler']=function(){const _0x5325af=_0x35b5eb;return this[_0x5325af(0x4b9)]()['name']!=='';},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x5e4)]=function(){const _0x498863=_0x35b5eb;return this[_0x498863(0x4b9)]()[_0x498863(0x945)];},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x231)]=function(){const _0x57589a=_0x35b5eb;if(this['hasSvBattler']())return VisuMZ[_0x57589a(0x781)][_0x57589a(0x3cb)][_0x57589a(0xb22)][_0x57589a(0x10d)];else{if(_0x57589a(0x5dc)===_0x57589a(0x102)){const _0x58774a=_0x47af99['BattleCore'][_0x57589a(0x3cb)]['BattleLayout'];if(_0x58774a[_0x57589a(0x848)])return;_0x15d797[_0x57589a(0x73b)][_0x57589a(0x562)][_0x57589a(0x541)](this,_0x5ea43f);}else return VisuMZ[_0x57589a(0x781)][_0x57589a(0x3cb)][_0x57589a(0xac3)][_0x57589a(0x10d)];}},Game_Enemy['prototype'][_0x35b5eb(0xb3c)]=function(_0x54c68c){const _0x8707ac=_0x35b5eb;Game_Battler[_0x8707ac(0x73b)][_0x8707ac(0xb3c)]['call'](this,_0x54c68c);if(this[_0x8707ac(0xae6)]())this[_0x8707ac(0x546)](_0x54c68c);},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x9ec)]=function(){const _0x2bd85b=_0x35b5eb,_0x22b6c8=this['svBattlerData']()[_0x2bd85b(0x7ed)]||0x0,_0x417ab7=$dataSystem['attackMotions'][_0x22b6c8];if(_0x417ab7){if(_0x417ab7['type']===0x0)this[_0x2bd85b(0x67a)](_0x2bd85b(0x535));else{if(_0x417ab7['type']===0x1)this[_0x2bd85b(0x67a)](_0x2bd85b(0xab5));else _0x417ab7[_0x2bd85b(0x1f4)]===0x2&&this[_0x2bd85b(0x67a)](_0x2bd85b(0x8e8));}}},Game_Enemy['prototype'][_0x35b5eb(0x723)]=function(){const _0x13298d=_0x35b5eb,_0x2a4e9f=this[_0x13298d(0x4b9)]()['wtypeId']||0x0,_0x59fcee=$dataSystem[_0x13298d(0x4f2)][_0x2a4e9f];_0x59fcee&&(_0x13298d(0x9b8)!==_0x13298d(0x9f2)?this['startWeaponAnimation'](_0x59fcee[_0x13298d(0x8c4)]):(this[_0x13298d(0x2e2)](_0x2008ee),this[_0x13298d(0xed)]()));},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x870)]=function(){const _0x75de14=_0x35b5eb,_0x877175=this[_0x75de14(0x4b9)]()['wtypeId']||0x0;return $dataSystem[_0x75de14(0x4f2)][_0x877175];},Game_Enemy['prototype']['getAttackMotionSlot']=function(_0xd0262e){const _0x35988b=_0x35b5eb;return this[_0x35988b(0x870)]();},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x1c0)]=function(){const _0x2c9a8b=_0x35b5eb;Game_Battler[_0x2c9a8b(0x73b)]['performDamage'][_0x2c9a8b(0x541)](this),this['isSpriteVisible']()&&this[_0x2c9a8b(0xae6)]()&&this['requestMotion']('damage'),SoundManager['playEnemyDamage']();},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x734)]=function(){const _0x181fd2=_0x35b5eb;Game_Battler['prototype'][_0x181fd2(0x734)][_0x181fd2(0x541)](this),this[_0x181fd2(0x67a)](_0x181fd2(0x303));},Game_Enemy[_0x35b5eb(0x73b)]['performMagicEvasion']=function(){const _0x5dee44=_0x35b5eb;Game_Battler[_0x5dee44(0x73b)][_0x5dee44(0x960)]['call'](this),this['requestMotion']('evade');},Game_Enemy[_0x35b5eb(0x73b)]['performCounter']=function(){const _0xae6413=_0x35b5eb;Game_Battler[_0xae6413(0x73b)]['performCounter'][_0xae6413(0x541)](this),this[_0xae6413(0x9ec)]();},Game_Enemy[_0x35b5eb(0x73b)]['allowCollapse']=function(){const _0x45937d=_0x35b5eb;if(this[_0x45937d(0xae6)]()){if(this[_0x45937d(0x538)]()>=0x1)return!![];return this[_0x45937d(0x4b9)]()['collapse'];}else return!![];},Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x130)]=function(){const _0x2d2f97=_0x35b5eb;return this[_0x2d2f97(0x4b9)]()[_0x2d2f97(0x589)];},Game_Enemy['prototype']['svBattlerAnchorY']=function(){const _0x1a90e2=_0x35b5eb;return this['svBattlerData']()[_0x1a90e2(0x763)];},Game_Enemy[_0x35b5eb(0x73b)]['svBattlerShadowVisible']=function(){const _0x44849c=_0x35b5eb;return this[_0x44849c(0x4b9)]()[_0x44849c(0x6d1)];},VisuMZ[_0x35b5eb(0x781)]['Game_Enemy_transform']=Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x8f9)],Game_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x8f9)]=function(_0x3dd25d){const _0x16eae4=_0x35b5eb;VisuMZ[_0x16eae4(0x781)]['Game_Enemy_transform'][_0x16eae4(0x541)](this,_0x3dd25d),this[_0x16eae4(0x790)](),this[_0x16eae4(0x28a)]();const _0xaf845e=this[_0x16eae4(0x691)]();if(_0xaf845e)_0xaf845e['setBattler'](this);},Game_Unit['prototype'][_0x35b5eb(0x993)]=function(_0x1a5222){const _0x125a35=_0x35b5eb;for(const _0x536d72 of this[_0x125a35(0x7ba)]()){if(_0x536d72)_0x536d72[_0x125a35(0x993)](_0x1a5222);}},Game_Unit[_0x35b5eb(0x73b)][_0x35b5eb(0x595)]=function(){const _0x3605e1=_0x35b5eb,_0x5a0f7c=this[_0x3605e1(0x12b)]();return _0x5a0f7c[Math[_0x3605e1(0x8a0)](_0x5a0f7c[_0x3605e1(0x1a0)])];},VisuMZ[_0x35b5eb(0x781)]['Game_Party_addActor']=Game_Party[_0x35b5eb(0x73b)]['addActor'],Game_Party[_0x35b5eb(0x73b)]['addActor']=function(_0x31df3){const _0x19381f=_0x35b5eb;VisuMZ['BattleCore'][_0x19381f(0x554)][_0x19381f(0x541)](this,_0x31df3),BattleManager['refreshStatusWindow']();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x721)]=Game_Party[_0x35b5eb(0x73b)][_0x35b5eb(0x437)],Game_Party[_0x35b5eb(0x73b)]['removeActor']=function(_0x133c9b){const _0x13d806=_0x35b5eb;VisuMZ[_0x13d806(0x781)][_0x13d806(0x721)]['call'](this,_0x133c9b),BattleManager['refreshStatusWindow']();},VisuMZ['BattleCore']['Game_Troop_setup']=Game_Troop['prototype'][_0x35b5eb(0x65b)],Game_Troop[_0x35b5eb(0x73b)][_0x35b5eb(0x65b)]=function(_0x4c214b){const _0x504092=_0x35b5eb;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x504092(0xcd)](_0x4c214b),VisuMZ['BattleCore'][_0x504092(0x288)]['call'](this,_0x4c214b);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x53e)]=Game_Troop[_0x35b5eb(0x73b)][_0x35b5eb(0xa51)],Game_Troop[_0x35b5eb(0x73b)][_0x35b5eb(0xa51)]=function(){const _0x4e8033=_0x35b5eb;let _0x2e1444=VisuMZ[_0x4e8033(0x781)][_0x4e8033(0x53e)][_0x4e8033(0x541)](this);if(this[_0x4e8033(0xa5b)]){if(_0x4e8033(0x71d)==='PrPCu')_0x2e1444*=this[_0x4e8033(0xa5b)]();else{let _0x1c4fb2=_0x51cc4b[_0x4e8033(0xb39)](_0x25ef45['id']);this[_0x4e8033(0x5ca)](_0x1c4fb2);}}return Math[_0x4e8033(0x43d)](_0x2e1444);},Game_Troop['prototype'][_0x35b5eb(0xa5b)]=function(){return 0x1;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x875)]=Game_Map['prototype'][_0x35b5eb(0x839)],Game_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x839)]=function(){const _0x587685=_0x35b5eb;VisuMZ[_0x587685(0x781)]['Game_Map_setupBattleback'][_0x587685(0x541)](this),this['setupBattlebackBattleCore']();},Game_Map['prototype']['setupBattlebackBattleCore']=function(){const _0x9f1b95=_0x35b5eb;this[_0x9f1b95(0x504)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x4c7507=$dataMap['note'];if(!_0x4c7507)return;const _0xa97678=_0x4c7507[_0x9f1b95(0x111)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0xa97678)for(const _0x2eabc9 of _0xa97678){if(_0x9f1b95(0x305)==='GdyhA'){const _0x4825f1=this[_0x9f1b95(0x691)]();if(_0x4825f1&&_0x5c8cfa)_0x4825f1['stepForward']();return;}else{_0x2eabc9['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2d5f9b=Number(RegExp['$1']),_0x4dc9e=Number(RegExp['$2']),_0x1bc303=_0x4dc9e===0x1?this[_0x9f1b95(0x504)]:this[_0x9f1b95(0x7c4)],_0x2c7f7e=String(RegExp['$3']);_0x1bc303[_0x2d5f9b]=_0x2c7f7e;}}},VisuMZ[_0x35b5eb(0x781)]['Game_Map_battleback1Name']=Game_Map[_0x35b5eb(0x73b)][_0x35b5eb(0xab0)],Game_Map['prototype'][_0x35b5eb(0xab0)]=function(){const _0x1bcf8b=_0x35b5eb;if(!BattleManager[_0x1bcf8b(0x371)]()){const _0x5b54d1=$gamePlayer[_0x1bcf8b(0x983)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x1bcf8b(0x504)]&&this[_0x1bcf8b(0x504)][_0x5b54d1]){if(_0x1bcf8b(0x2d2)===_0x1bcf8b(0x3db))_0x5b2bbb=_0xb889db;else return this[_0x1bcf8b(0x504)][_0x5b54d1];}}return VisuMZ[_0x1bcf8b(0x781)][_0x1bcf8b(0xa78)][_0x1bcf8b(0x541)](this);},VisuMZ['BattleCore'][_0x35b5eb(0xb03)]=Game_Map[_0x35b5eb(0x73b)]['battleback2Name'],Game_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x8b4)]=function(){const _0x31ce47=_0x35b5eb;if(!BattleManager[_0x31ce47(0x371)]()){if(_0x31ce47(0x2c0)!==_0x31ce47(0x2c0))_0x1e8aa4[_0x31ce47(0x781)][_0x31ce47(0x120)][_0x31ce47(0x541)](this),this['_actionBattlers']=this[_0x31ce47(0xa6a)][_0x31ce47(0x416)](_0x16cc04=>_0x16cc04&&_0x16cc04[_0x31ce47(0x690)]());else{const _0x48f24d=$gamePlayer[_0x31ce47(0x983)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x31ce47(0x504)]&&this[_0x31ce47(0x7c4)][_0x48f24d])return _0x31ce47(0x710)!==_0x31ce47(0x710)?_0x58fda[_0x31ce47(0x781)][_0x31ce47(0x3cb)][_0x31ce47(0x165)][_0x31ce47(0x402)]['call'](this,_0x7373c0,_0x16908f):this[_0x31ce47(0x7c4)][_0x48f24d];}}return VisuMZ['BattleCore']['Game_Map_battleback2Name']['call'](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x879)]=Game_Map[_0x35b5eb(0x73b)][_0x35b5eb(0xacf)],Game_Map[_0x35b5eb(0x73b)]['encounterList']=function(){const _0x30bf1f=_0x35b5eb;let _0x52e8e6=JsonEx[_0x30bf1f(0x622)](VisuMZ[_0x30bf1f(0x781)][_0x30bf1f(0x879)][_0x30bf1f(0x541)](this));return VisuMZ['BattleCore'][_0x30bf1f(0xca)](_0x52e8e6);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xca)]=function(_0x355335){const _0x1be763=_0x35b5eb;var _0x34a29c,_0x436eee,_0x2fb791;for(_0x2fb791=_0x355335[_0x1be763(0x1a0)]-0x1;_0x2fb791>0x0;_0x2fb791--){_0x34a29c=Math[_0x1be763(0xaaf)](Math[_0x1be763(0x39b)]()*(_0x2fb791+0x1)),_0x436eee=_0x355335[_0x2fb791],_0x355335[_0x2fb791]=_0x355335[_0x34a29c],_0x355335[_0x34a29c]=_0x436eee;}return _0x355335;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x347)]=Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x849)],Game_Interpreter[_0x35b5eb(0x73b)]['command357']=function(_0x40499c){const _0x1a9f6b=_0x35b5eb;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ['BattleCore'][_0x1a9f6b(0x347)][_0x1a9f6b(0x541)](this,_0x40499c);},VisuMZ['BattleCore'][_0x35b5eb(0x7eb)]=Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x5bb)],Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x5bb)]=function(){const _0x580e56=_0x35b5eb;if(SceneManager[_0x580e56(0x3a2)]()){if(_0x580e56(0x126)!=='ffyUv')return _0xf0b1c9[_0x580e56(0x885)][_0x580e56(0xd6)]()===_0x580e56(0x390)?_0x2f1f68[_0x580e56(0x781)][_0x580e56(0x3cb)][_0x580e56(0x842)][_0x580e56(0xcc)]:_0xee4d1f[_0x580e56(0x781)][_0x580e56(0x3cb)]['BattleLayout'][_0x580e56(0x1fc)];else switch(this[_0x580e56(0x996)]){case _0x580e56(0x2e8):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()[_0x580e56(0x267)]>0x0)return!![];this[_0x580e56(0x996)]='';}break;case _0x580e56(0x8d4):if(BattleManager[_0x580e56(0x254)][_0x580e56(0x9e5)]())return!![];this[_0x580e56(0x996)]='';break;case _0x580e56(0x417):if(Imported[_0x580e56(0x333)]){if($gameScreen['battleCameraData']()[_0x580e56(0x257)]>0x0)return!![];if($gameScreen['battleCameraData']()['cameraOffsetDuration']>0x0)return!![];this[_0x580e56(0x996)]='';}break;case _0x580e56(0x830):if(BattleManager[_0x580e56(0x254)]['isEffecting']())return!![];this[_0x580e56(0x996)]='';break;case _0x580e56(0x3e2):if(BattleManager['_spriteset'][_0x580e56(0x97c)]())return!![];this['_waitMode']='';break;case _0x580e56(0xade):if(BattleManager['_spriteset'][_0x580e56(0x9c1)]())return!![];this[_0x580e56(0x996)]='';break;case _0x580e56(0x15e):if(BattleManager[_0x580e56(0x8cf)][_0x580e56(0x44d)]())return!![];this[_0x580e56(0x996)]='';break;case _0x580e56(0x679):if(BattleManager[_0x580e56(0x254)]['isAnyoneMoving']())return!![];this[_0x580e56(0x996)]='';break;case _0x580e56(0x69b):if(BattleManager[_0x580e56(0x254)][_0x580e56(0x565)]())return!![];this[_0x580e56(0x996)]='';break;case'battleGrow':if(BattleManager[_0x580e56(0x254)][_0x580e56(0x9cd)]())return!![];this['_waitMode']='';break;case'battleSpriteSkew':if(BattleManager[_0x580e56(0x254)]['isAnyoneSkewing']())return!![];this[_0x580e56(0x996)]='';break;case _0x580e56(0x7f1):if(Imported[_0x580e56(0xa96)]){if(BattleManager[_0x580e56(0x254)][_0x580e56(0x877)]())return!![];this['_waitMode']='';}break;case _0x580e56(0x75d):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x580e56(0x7ce)]()[_0x580e56(0x787)]>0x0)return!![];this['_waitMode']='';}break;case _0x580e56(0x8c9):if(BattleManager['_spriteset'][_0x580e56(0xaf9)]())return!![];this[_0x580e56(0x996)]='';break;case _0x580e56(0x12e):if(Imported[_0x580e56(0x333)]){if($gameScreen[_0x580e56(0x7ce)]()[_0x580e56(0x671)]>0x0)return!![];this[_0x580e56(0x996)]='';}break;}}return VisuMZ[_0x580e56(0x781)][_0x580e56(0x7eb)][_0x580e56(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x820)]=Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x14f)],Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x14f)]=function(_0x57eff7){const _0x5d92ad=_0x35b5eb;return!$gameParty[_0x5d92ad(0xa42)]()?this[_0x5d92ad(0x5df)](_0x57eff7):VisuMZ[_0x5d92ad(0x781)]['Game_Interpreter_command301'][_0x5d92ad(0x541)](this,_0x57eff7);},Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x712)]=function(_0x333153){const _0x436c60=_0x35b5eb;return VisuMZ[_0x436c60(0x781)][_0x436c60(0x820)][_0x436c60(0x541)](this,_0x333153),BattleManager['setEventCallback'](_0x1fafc0=>{const _0x1fbfb9=_0x436c60;this[_0x1fbfb9(0x33c)][this[_0x1fbfb9(0x85d)]]=_0x1fafc0;}),!![];},VisuMZ[_0x35b5eb(0x781)]['CheckMapBattleEventValid']=function(_0x2224c4){const _0x3867c3=_0x35b5eb,_0x266f4b=$dataCommonEvents[_0x2224c4];if(!_0x266f4b)return![];if(_0x266f4b[_0x3867c3(0x8d0)][_0x3867c3(0x1a0)]<=0x1)return![];return!![];},Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x5df)]=function(_0x511c54){const _0x5c3615=_0x35b5eb,_0x5e1638=VisuMZ[_0x5c3615(0x781)][_0x5c3615(0x3cb)][_0x5c3615(0x450)],_0x4723cc=_0x5e1638[_0x5c3615(0x4e9)],_0xa70e76=$dataCommonEvents[_0x4723cc];if(_0xa70e76&&VisuMZ[_0x5c3615(0x781)][_0x5c3615(0xa1e)](_0x4723cc)){if(_0x5c3615(0x5a9)!==_0x5c3615(0x53f)){const _0x5f0d6e=this[_0x5c3615(0x388)]()?this[_0x5c3615(0x970)]:0x0,_0x3008c4=_0xa70e76[_0x5c3615(0x8d0)];this[_0x5c3615(0xad6)](_0x3008c4,_0x5f0d6e),this['_list']=JsonEx['makeDeepCopy'](this[_0x5c3615(0xb1c)]);const _0x207d4c={'code':0xbc3,'indent':this[_0x5c3615(0x85d)],'parameters':JsonEx[_0x5c3615(0x622)](_0x511c54)};return this[_0x5c3615(0xb1c)][_0x5c3615(0x181)](this['_index']+0x1,0x0,_0x207d4c),!![];}else _0x1a1579-=_0x3bdc9d[_0x5c3615(0x9d9)]()/0x2;}else{if(_0x5c3615(0x34c)===_0x5c3615(0x34c))return VisuMZ[_0x5c3615(0x781)][_0x5c3615(0x820)][_0x5c3615(0x541)](this,_0x511c54);else{if(this[_0x5c3615(0x47b)])this[_0x5c3615(0x47b)][_0x5c3615(0x413)](_0x9e632f,_0x562ec6,_0x671fa6);}}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x326)]=BattleManager[_0x35b5eb(0x391)],BattleManager['onEncounter']=function(){const _0x564d07=_0x35b5eb;VisuMZ[_0x564d07(0x781)]['BattleManager_onEncounter']['call'](this),this[_0x564d07(0x30a)]();},BattleManager['onEncounterBattleCore']=function(){const _0x5a0c57=_0x35b5eb,_0x85fb0c=VisuMZ[_0x5a0c57(0x781)][_0x5a0c57(0x3cb)][_0x5a0c57(0x450)],_0x4477b7=_0x85fb0c[_0x5a0c57(0x4e9)];_0x4477b7&&VisuMZ['BattleCore'][_0x5a0c57(0xa1e)](_0x4477b7)&&(this[_0x5a0c57(0xadd)]=!![],$gameTemp[_0x5a0c57(0x8e5)](_0x85fb0c[_0x5a0c57(0x4e9)]),$gameMap[_0x5a0c57(0x8b6)](),$gameMap[_0x5a0c57(0x708)][_0x5a0c57(0x312)]=!![]),_0x85fb0c[_0x5a0c57(0x7be)]>0x0&&(this[_0x5a0c57(0x45d)]=!![]);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x280)]=Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x64a)],Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x64a)]=function(){const _0x2fa120=_0x35b5eb;if(BattleManager[_0x2fa120(0xadd)])return;VisuMZ[_0x2fa120(0x781)]['Scene_Map_updateCallMenu'][_0x2fa120(0x541)](this);},VisuMZ[_0x35b5eb(0x781)]['Scene_Map_launchBattle']=Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x9c5)],Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x9c5)]=function(){const _0x489b74=_0x35b5eb;if(BattleManager[_0x489b74(0xadd)]){if(_0x489b74(0x1f5)===_0x489b74(0x285)){if(!_0x561564[_0x489b74(0x9b9)]())return;const _0x3906a3=this[_0x489b74(0x691)]();if(!_0x3906a3)return;this['isActor']()&&(_0x2648ab*=-0x1,_0x415c9b*=-0x1),_0x3906a3[_0x489b74(0x5f1)](_0x5def9a,_0x3e5af6,_0x41ea2a,_0x23893c);}else this[_0x489b74(0x4fa)]();}else VisuMZ[_0x489b74(0x781)][_0x489b74(0x99e)]['call'](this);},Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x4fa)]=function(){this['_active']=!![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x836)]=SceneManager[_0x35b5eb(0x289)],SceneManager[_0x35b5eb(0x289)]=function(){const _0x24bc60=_0x35b5eb;if(BattleManager[_0x24bc60(0xadd)])return![];return VisuMZ[_0x24bc60(0x781)]['SceneManager_isSceneChanging']['call'](this);},VisuMZ['BattleCore'][_0x35b5eb(0x3f9)]=Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x436)],Game_Interpreter[_0x35b5eb(0x73b)]['terminate']=function(){const _0xc33525=_0x35b5eb;VisuMZ[_0xc33525(0x781)][_0xc33525(0x3f9)][_0xc33525(0x541)](this),this['_preBattleCommonEvent']&&('qcaOm'!==_0xc33525(0x374)?(this[_0xc33525(0x312)]=undefined,SceneManager['_scene'][_0xc33525(0x1a3)]()):(_0x58d48f[_0xc33525(0x781)][_0xc33525(0x6a1)][_0xc33525(0x541)](this,_0x52d694,_0x18e585),this[_0xc33525(0x113)][this['_actions']['length']-0x1]['_forceAction']=!![]));},Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x1a3)]=function(){const _0x37d702=_0x35b5eb;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x37d702(0x755)]=!![],this[_0x37d702(0x3ab)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x1a1)]=Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x255)],Scene_Map['prototype'][_0x35b5eb(0x255)]=function(){const _0xe99cb4=_0x35b5eb;VisuMZ['BattleCore'][_0xe99cb4(0x1a1)][_0xe99cb4(0x541)](this),BattleManager[_0xe99cb4(0x755)]&&(this[_0xe99cb4(0x20d)]=!![],BattleManager[_0xe99cb4(0x755)]=undefined);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x7ab)]=Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x255)],Scene_Map[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(){const _0x2010b0=_0x35b5eb;VisuMZ['BattleCore'][_0x2010b0(0x7ab)][_0x2010b0(0x541)](this),$gameTemp[_0x2010b0(0x2af)]();},VisuMZ[_0x35b5eb(0x781)]['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x35b5eb(0x73b)][_0x35b5eb(0x989)],Scene_ItemBase[_0x35b5eb(0x73b)][_0x35b5eb(0x989)]=function(){const _0x2fe7e4=_0x35b5eb;VisuMZ[_0x2fe7e4(0x781)][_0x2fe7e4(0x213)][_0x2fe7e4(0x541)](this);if(this['item']()[_0x2fe7e4(0x7fd)][_0x2fe7e4(0x111)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x2fe7e4(0xb3e)!==_0x2fe7e4(0xb3e))return this[_0x2fe7e4(0x74c)]();else return;}this['item']()[_0x2fe7e4(0x7fd)][_0x2fe7e4(0x111)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x2fe7e4(0x5d3)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ['BattleCore']['Scene_Options_maxCommands']=Scene_Options[_0x35b5eb(0x73b)]['maxCommands'],Scene_Options[_0x35b5eb(0x73b)][_0x35b5eb(0xaf3)]=function(){const _0x4bbf51=_0x35b5eb;let _0x3cd5e1=VisuMZ[_0x4bbf51(0x781)]['Scene_Options_maxCommands'][_0x4bbf51(0x541)](this);const _0x451fbd=VisuMZ['BattleCore'][_0x4bbf51(0x3cb)];if(_0x451fbd['AutoBattle']['AddOption']&&_0x451fbd[_0x4bbf51(0x93c)]['AdjustRect'])_0x3cd5e1+=0x2;if(_0x451fbd['HpGauge'][_0x4bbf51(0x1cb)]&&_0x451fbd[_0x4bbf51(0x478)][_0x4bbf51(0x96f)])_0x3cd5e1+=0x1;return _0x3cd5e1;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x9f3)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x255)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(){const _0x3c102b=_0x35b5eb;VisuMZ[_0x3c102b(0x781)][_0x3c102b(0x9f3)][_0x3c102b(0x541)](this),this[_0x3c102b(0x878)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xd7)]=Scene_Battle[_0x35b5eb(0x73b)]['start'],Scene_Battle[_0x35b5eb(0x73b)]['start']=function(){const _0x49e28a=_0x35b5eb;SceneManager[_0x49e28a(0x4a2)]()?(Scene_Message[_0x49e28a(0x73b)][_0x49e28a(0x2b4)]['call'](this),this[_0x49e28a(0x254)]&&('TSdzk'!==_0x49e28a(0x307)?this[_0x49e28a(0x254)][_0x49e28a(0x9de)]():_0x3b4f4e['changeCtbCastTime'](_0x51eedf)),BattleManager[_0x49e28a(0x365)]&&BattleManager[_0x49e28a(0x1b3)]()):(VisuMZ[_0x49e28a(0x781)][_0x49e28a(0xd7)][_0x49e28a(0x541)](this),$gameTroop[_0x49e28a(0x5c0)]());},VisuMZ['BattleCore'][_0x35b5eb(0x246)]=Scene_Battle['prototype'][_0x35b5eb(0x3ab)],Scene_Battle['prototype']['stop']=function(){const _0x5b4463=_0x35b5eb;SceneManager[_0x5b4463(0x6b5)]()?Scene_Message['prototype'][_0x5b4463(0x3ab)]['call'](this):VisuMZ[_0x5b4463(0x781)][_0x5b4463(0x246)][_0x5b4463(0x541)](this);},VisuMZ[_0x35b5eb(0x781)]['Scene_Battle_terminate']=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x436)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x436)]=function(){const _0x7148d0=_0x35b5eb;SceneManager[_0x7148d0(0x6b5)]()?_0x7148d0(0x5b8)!==_0x7148d0(0x5b8)?this[_0x7148d0(0x5d1)](_0x7148d0(0x9e4)):Scene_Message['prototype'][_0x7148d0(0x436)][_0x7148d0(0x541)](this):VisuMZ['BattleCore'][_0x7148d0(0xaff)][_0x7148d0(0x541)](this),this[_0x7148d0(0x878)]();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x76c)]=function(){const _0x532401=_0x35b5eb;if(ConfigManager[_0x532401(0xdf)]&&ConfigManager[_0x532401(0x2f6)]!==undefined){if(_0x532401(0x9df)!==_0x532401(0x9df)){if(!this[_0x532401(0xb0d)])return;this[_0x532401(0x1c4)]=this[_0x532401(0xb0d)]['battlerShadowScaleX'](),this[_0x532401(0xa8d)]=this[_0x532401(0xb0d)][_0x532401(0x66e)]();}else return ConfigManager[_0x532401(0x2f6)];}else{if(this['battleLayoutStyle']()===_0x532401(0x390))return'hZPuj'==='VxsWS'?_0x313bcc(_0x365f92['$1'])[_0x532401(0x8b8)](/[\r\n]+/):![];else{if('xKrvp'===_0x532401(0x1b8)){_0x1c8b8a[_0x532401(0x73b)][_0x532401(0x129)][_0x532401(0x541)](this),this[_0x532401(0x116)]['clear']();if(!this[_0x532401(0x81d)]())return;this['drawEnemyName']();}else{return Scene_Message['prototype'][_0x532401(0x76c)][_0x532401(0x541)](this);;}}}},VisuMZ['BattleCore'][_0x35b5eb(0x50a)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x46e)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x46e)]=function(){const _0x1c527c=_0x35b5eb;this[_0x1c527c(0x3c9)](),VisuMZ[_0x1c527c(0x781)][_0x1c527c(0x50a)][_0x1c527c(0x541)](this),this['createAutoBattleWindow']();},VisuMZ[_0x35b5eb(0x781)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x35b5eb(0x73b)]['createCancelButton'],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x28b)]=function(){const _0x2203fc=_0x35b5eb;VisuMZ[_0x2203fc(0x781)][_0x2203fc(0x1e7)][_0x2203fc(0x541)](this),this['battleLayoutStyle']()===_0x2203fc(0x390)&&this[_0x2203fc(0x2a1)]();},Scene_Battle['prototype']['setVisibleUI']=function(_0x348052){const _0x325d17=_0x35b5eb;_0x348052?(this[_0x325d17(0x84c)]['x']=(Graphics[_0x325d17(0x91c)]-Graphics['boxWidth'])/0x2,this[_0x325d17(0x84c)]['y']=(Graphics[_0x325d17(0x491)]-Graphics['boxHeight'])/0x2):(this['_windowLayer']['x']=Graphics[_0x325d17(0x91c)]*0xa,this[_0x325d17(0x84c)]['y']=Graphics[_0x325d17(0x491)]*0xa);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x4d5)]=Scene_Battle['prototype'][_0x35b5eb(0x26f)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x26f)]=function(){const _0x97a004=_0x35b5eb,_0x5a67bd=BattleManager[_0x97a004(0x157)]();VisuMZ[_0x97a004(0x781)][_0x97a004(0x4d5)][_0x97a004(0x541)](this);if(_0x5a67bd){if(_0x5a67bd===BattleManager[_0x97a004(0x157)]())return;if(_0x5a67bd===BattleManager[_0x97a004(0x785)])return;if(_0x5a67bd[_0x97a004(0x691)]())_0x5a67bd[_0x97a004(0x691)]()['stepBack']();}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x4ac)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x4f3)],Scene_Battle['prototype']['selectPreviousCommand']=function(){const _0x30d6c2=_0x35b5eb,_0x3ce039=BattleManager[_0x30d6c2(0x157)]();if(_0x3ce039&&_0x3ce039[_0x30d6c2(0x691)])_0x3ce039['battler']()['stepBack']();VisuMZ[_0x30d6c2(0x781)][_0x30d6c2(0x4ac)][_0x30d6c2(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x509)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x52c)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x52c)]=function(){const _0x175b94=_0x35b5eb;if(VisuMZ['BattleCore'][_0x175b94(0x3cb)][_0x175b94(0x141)][_0x175b94(0x13d)])return VisuMZ[_0x175b94(0x781)][_0x175b94(0x3cb)]['BattleLog']['BattleLogRectJS'][_0x175b94(0x541)](this);return VisuMZ[_0x175b94(0x781)][_0x175b94(0x509)]['call'](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x9e0)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x427)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x427)]=function(){const _0x382cae=_0x35b5eb;VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindow'][_0x382cae(0x541)](this),this[_0x382cae(0x20a)]();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x20a)]=function(){const _0x555c09=_0x35b5eb,_0x145868=this[_0x555c09(0x69a)];_0x145868[_0x555c09(0xaaa)]('autoBattle',this[_0x555c09(0x968)][_0x555c09(0x4eb)](this)),_0x145868[_0x555c09(0xaaa)](_0x555c09(0x18e),this['commandOptions']['bind'](this));const _0x1b059c=this[_0x555c09(0xd6)]();switch(_0x1b059c){case'xp':case _0x555c09(0xf2):return this[_0x555c09(0x69a)]['setBackgroundType'](0x1);break;}},Scene_Battle['prototype'][_0x35b5eb(0x968)]=function(){const _0xb37397=_0x35b5eb;BattleManager[_0xb37397(0x345)]=!![],$gameParty[_0xb37397(0x40f)](),this['selectNextCommand'](),BattleManager[_0xb37397(0xa6c)]()&&(BattleManager[_0xb37397(0x82e)]=![]);},Scene_Battle[_0x35b5eb(0x73b)]['commandOptions']=function(){const _0x213dc8=_0x35b5eb;if(this[_0x213dc8(0x4de)]())_0x213dc8(0x67d)===_0x213dc8(0x67d)?(this[_0x213dc8(0x664)]=!![],this[_0x213dc8(0x8cf)][_0x213dc8(0x7c7)](_0x213dc8(0x3f0),VisuMZ[_0x213dc8(0x781)][_0x213dc8(0x3cb)][_0x213dc8(0x192)]['ActiveTpbOptionsMessage'])):(_0x4c838e=(_0x2d8597+_0x1a4c60)/0x2,_0x54c707=-0x1);else{if(_0x213dc8(0x947)!==_0x213dc8(0x947)){if(this['constructor']===_0x44c020)return;this[_0x213dc8(0x6ce)](),this[_0x213dc8(0xaba)]();}else this[_0x213dc8(0x209)]();}},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x4de)]=function(){const _0x459a31=_0x35b5eb;return BattleManager[_0x459a31(0xb20)]();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x209)]=function(){const _0x13e2cc=_0x35b5eb;this['_callSceneOptions']=![],this['_spriteset'][_0x13e2cc(0x9de)](),this[_0x13e2cc(0x84c)][_0x13e2cc(0x17f)]=![];if(BattleManager[_0x13e2cc(0x371)]())'Hyedj'===_0x13e2cc(0x66f)?(_0x3508ae=_0x5c8fec[_0x13e2cc(0x91c)]/_0xb7316c[_0x13e2cc(0x2ae)]()['length'],_0x2ae3dd*=_0x50ccf0,_0x14a5d9+=_0x491b8d['width']/_0x1808aa['battleMembers']()[_0x13e2cc(0x1a0)]/0x2):($dataSystem[_0x13e2cc(0xab0)]||$dataSystem[_0x13e2cc(0x8b4)])&&SceneManager['snapForBackground']();else($gameMap[_0x13e2cc(0xab0)]()||$gameMap[_0x13e2cc(0x8b4)]())&&SceneManager[_0x13e2cc(0x4d6)]();SceneManager['push'](Scene_Options),BattleManager[_0x13e2cc(0xa6c)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager['actor']());},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x10b)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x76d)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x76d)]=function(){const _0x3fa478=_0x35b5eb;VisuMZ[_0x3fa478(0x781)][_0x3fa478(0x10b)][_0x3fa478(0x541)](this);if(this[_0x3fa478(0x664)]&&!BattleManager['_subject'])this[_0x3fa478(0x209)]();},VisuMZ[_0x35b5eb(0x781)]['Scene_Battle_update']=Scene_Battle['prototype']['update'],Scene_Battle['prototype'][_0x35b5eb(0x9de)]=function(){const _0x5bf429=_0x35b5eb;VisuMZ[_0x5bf429(0x781)][_0x5bf429(0x747)][_0x5bf429(0x541)](this),this[_0x5bf429(0x2b1)]();},Scene_Battle['prototype'][_0x35b5eb(0x138)]=function(){const _0x31bb42=_0x35b5eb,_0x12000a=this[_0x31bb42(0x7c3)]();this[_0x31bb42(0x481)]=new Window_AutoBattleCancel(_0x12000a),this[_0x31bb42(0x481)]['hide'](),this['addChild'](this[_0x31bb42(0x481)]);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x7c3)]=function(){const _0x1a23a3=_0x35b5eb;return VisuMZ[_0x1a23a3(0x781)][_0x1a23a3(0x3cb)][_0x1a23a3(0x93c)][_0x1a23a3(0x527)]['call'](this);},Scene_Battle[_0x35b5eb(0x73b)]['clearOnceParallelInterpreters']=function(){const _0x1d99de=_0x35b5eb;this[_0x1d99de(0x8bf)]=[];},Scene_Battle['prototype'][_0x35b5eb(0x2b1)]=function(){const _0x151993=_0x35b5eb;if(!this[_0x151993(0x8bf)])return;for(const _0xe3332 of this[_0x151993(0x8bf)]){if('zsoom'==='zsoom')_0xe3332&&_0xe3332[_0x151993(0x9de)]();else{const _0x261528=this[_0x151993(0x3d4)][_0x151993(0x89a)];if(!_0x261528)return;const _0x19e844=_0x261528[_0x151993(0x91c)];let _0xb6dd57=_0x261528['height'];if(this[_0x151993(0xb0d)]['isDead']()){if(this[_0x151993(0xa7c)])_0xb6dd57=_0x1041d4[_0x151993(0x2a3)](0x0,this[_0x151993(0xa7c)]['height']-0x4);}this[_0x151993(0x3d4)][_0x151993(0x154)](0x0,0x0,_0x19e844,_0xb6dd57),this['setFrame'](0x0,0x0,_0x19e844,_0xb6dd57);}}},Scene_Battle[_0x35b5eb(0x73b)]['playOnceParallelInterpreter']=function(_0x9d788f){const _0xafcbcb=_0x35b5eb,_0x23d2dc=$dataCommonEvents[_0x9d788f];if(!_0x23d2dc)return;const _0x3fb402=new Game_BattleOnceParallelInterpreter();this[_0xafcbcb(0x54f)](_0x3fb402),_0x3fb402[_0xafcbcb(0x90f)](_0x9d788f);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x54f)]=function(_0x3611b1){const _0x42fc70=_0x35b5eb;this[_0x42fc70(0x8bf)]=this[_0x42fc70(0x8bf)]||[],this['_onceParallelInterpreters']['push'](_0x3611b1);},Scene_Battle['prototype'][_0x35b5eb(0x24a)]=function(_0x238120){const _0xd90a66=_0x35b5eb;this[_0xd90a66(0x8bf)]=this[_0xd90a66(0x8bf)]||[],this[_0xd90a66(0x8bf)][_0xd90a66(0x4e8)](_0x238120);},Game_Troop[_0x35b5eb(0x73b)][_0x35b5eb(0x5c0)]=function(){const _0xe2e851=_0x35b5eb;for(const _0x4f464c of this[_0xe2e851(0x698)]()[_0xe2e851(0xa90)]){if(_0xe2e851(0x977)!==_0xe2e851(0x3bc)){if(!this[_0xe2e851(0x4ad)](_0x4f464c))continue;SceneManager['_scene'][_0xe2e851(0x682)](_0x4f464c);}else{if(this[_0xe2e851(0x735)]===_0x54dba0)return;this['_targetOpacity']=_0x38b8d0,this[_0xe2e851(0x3ba)]=_0xed9191,this[_0xe2e851(0x92a)]=_0x1ec2a1,this[_0xe2e851(0xa0a)]=_0xd93b6d||_0xe2e851(0x62b);if(_0x125796<=0x0)this[_0xe2e851(0x1be)]=_0x5e829b;}}},Game_Troop[_0x35b5eb(0x73b)][_0x35b5eb(0x4ad)]=function(_0x46cf94){const _0x11a3d9=_0x35b5eb;if(!_0x46cf94)return;for(const _0x99b4ad of _0x46cf94[_0x11a3d9(0x8d0)]){if([0x6c,0x198][_0x11a3d9(0x87d)](_0x99b4ad[_0x11a3d9(0x72d)])){const _0x561069=_0x99b4ad[_0x11a3d9(0x75c)][0x0];if(_0x561069[_0x11a3d9(0x111)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x35b5eb(0x73b)]['playOnceParallelTroopPage']=function(_0x5e3745){const _0xe9e63f=_0x35b5eb;if(!_0x5e3745)return;const _0x22b9c1=new Game_BattleOnceParallelInterpreter();this[_0xe9e63f(0x54f)](_0x22b9c1),_0x22b9c1[_0xe9e63f(0x3c7)](_0x5e3745);};function Game_BattleOnceParallelInterpreter(){const _0x2fef7c=_0x35b5eb;this[_0x2fef7c(0x255)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x35b5eb(0x800)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x62e)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x35b5eb(0x73b)]['setCommonEvent']=function(_0x173054){const _0x4b463d=_0x35b5eb,_0xb14961=$dataCommonEvents[_0x173054];_0xb14961?this[_0x4b463d(0x65b)](_0xb14961[_0x4b463d(0x8d0)],0x0):this[_0x4b463d(0x436)]();},Game_BattleOnceParallelInterpreter['prototype'][_0x35b5eb(0x436)]=function(){const _0x12bf19=_0x35b5eb;if(!SceneManager[_0x12bf19(0x3a2)]())return;SceneManager[_0x12bf19(0x885)]['removeOnceParallelInterpreter'](this),Game_Interpreter[_0x12bf19(0x73b)][_0x12bf19(0x436)][_0x12bf19(0x541)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x35b5eb(0x3c7)]=function(_0x3bc0d1){const _0x36668c=_0x35b5eb;_0x3bc0d1?_0x36668c(0x681)!==_0x36668c(0x681)?this[_0x36668c(0x255)](...arguments):this[_0x36668c(0x65b)](_0x3bc0d1[_0x36668c(0x8d0)],0x0):this['terminate']();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x893)]=function(){const _0x3975c5=_0x35b5eb;return VisuMZ[_0x3975c5(0x781)][_0x3975c5(0x3cb)][_0x3975c5(0x192)]['DisablePartyCmd'];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xa0d)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x731)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x731)]=function(){const _0x59fa89=_0x35b5eb;this['isPartyCommandWindowDisabled']()?this[_0x59fa89(0xab3)]():VisuMZ[_0x59fa89(0x781)][_0x59fa89(0xa0d)][_0x59fa89(0x541)](this);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xab3)]=function(){const _0x50d85f=_0x35b5eb;if(BattleManager[_0x50d85f(0x339)]())this[_0x50d85f(0x26f)]();else BattleManager[_0x50d85f(0xa6c)]()&&VisuMZ[_0x50d85f(0x781)]['Scene_Battle_startPartyCommandSelection'][_0x50d85f(0x541)](this);},VisuMZ[_0x35b5eb(0x781)]['Scene_Battle_commandFight']=Scene_Battle[_0x35b5eb(0x73b)]['commandFight'],Scene_Battle[_0x35b5eb(0x73b)]['commandFight']=function(){const _0x2125fb=_0x35b5eb;BattleManager['isTpb']()?(this[_0x2125fb(0xa2c)](),this['startActorCommandSelection']()):_0x2125fb(0x46c)===_0x2125fb(0xa46)?this['autoBattleAtStart']=_0x5270c[_0x2125fb(0x964)]:VisuMZ[_0x2125fb(0x781)][_0x2125fb(0x222)][_0x2125fb(0x541)](this);},Scene_Battle['prototype'][_0x35b5eb(0xa2c)]=function(){const _0x32ef0b=_0x35b5eb;if(!VisuMZ[_0x32ef0b(0x781)][_0x32ef0b(0x17c)])return;if(Imported[_0x32ef0b(0xa9e)]&&BattleManager[_0x32ef0b(0x311)]())return;const _0xeca949=$gameParty[_0x32ef0b(0x12b)]()['filter'](_0x2038a5=>_0x2038a5['isTpbCharged']()&&_0x2038a5[_0x32ef0b(0x1f6)]());BattleManager[_0x32ef0b(0xafe)]=_0xeca949[0x0]||null,BattleManager[_0x32ef0b(0xafe)]&&BattleManager[_0x32ef0b(0xafe)][_0x32ef0b(0x2a0)](_0x32ef0b(0x35e));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x4e1)]=Scene_Battle['prototype'][_0x35b5eb(0xfb)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xfb)]=function(){const _0x5cb507=_0x35b5eb;VisuMZ[_0x5cb507(0x781)]['Scene_Battle_createActorCommandWindow'][_0x5cb507(0x541)](this),this[_0x5cb507(0x389)]();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x389)]=function(){const _0x3e75ce=_0x35b5eb,_0x146efe=this[_0x3e75ce(0xa76)];_0x146efe[_0x3e75ce(0xaaa)](_0x3e75ce(0x921),this['actorCommandEscape'][_0x3e75ce(0x4eb)](this)),_0x146efe[_0x3e75ce(0xaaa)]('autoBattle',this[_0x3e75ce(0x1fe)]['bind'](this)),_0x146efe[_0x3e75ce(0xaaa)](_0x3e75ce(0x41e),this[_0x3e75ce(0x50f)][_0x3e75ce(0x4eb)](this));if(BattleManager[_0x3e75ce(0xa6c)]()){if(_0x3e75ce(0x1ef)===_0x3e75ce(0x3d2)){const _0x271b6b=_0x23534a(_0x34985c['$1'])['trim'](),_0xf221cf=_0x59eb12(_0x42d780['$2']);_0x2942c9[_0x271b6b]=_0xf221cf,_0x321482+=_0xf221cf;}else this[_0x3e75ce(0x893)]()?delete _0x146efe['_handlers']['cancel']:'hXrGr'!=='hXrGr'?(this['_battleCoreBattleStartEvent']=!![],_0x19c2a6[_0x3e75ce(0x8e5)](_0x5418e6['BattleStartEvent']),_0x2c256c[_0x3e75ce(0x8b6)](),_0x31eaca[_0x3e75ce(0x708)][_0x3e75ce(0x312)]=!![]):_0x146efe[_0x3e75ce(0xaaa)](_0x3e75ce(0xabb),this[_0x3e75ce(0x5a1)]['bind'](this));}},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x176)]=function(){this['commandEscape']();},Scene_Battle['prototype']['actorCommandAutoBattle']=function(){const _0x4f5d4a=_0x35b5eb;BattleManager[_0x4f5d4a(0x157)]()['makeAutoBattleActions'](),BattleManager[_0x4f5d4a(0x7da)](),BattleManager[_0x4f5d4a(0x7c0)](),this[_0x4f5d4a(0x476)]();},Scene_Battle[_0x35b5eb(0x73b)]['actorCommandSingleSkill']=function(){const _0x436314=_0x35b5eb,_0x1ef12c=BattleManager[_0x436314(0x1cc)]();_0x1ef12c[_0x436314(0x6a4)](this[_0x436314(0xa76)][_0x436314(0x986)]()),this[_0x436314(0x2ea)]();},Scene_Battle['prototype'][_0x35b5eb(0x5a1)]=function(){const _0x3c4ad7=_0x35b5eb;if(this[_0x3c4ad7(0x8e4)]()){if(_0x3c4ad7(0x5da)!==_0x3c4ad7(0x51f))this[_0x3c4ad7(0x852)]();else{const _0x4e63f4=_0x491c8f[_0x3c4ad7(0x781)][_0x3c4ad7(0x3cb)][_0x3c4ad7(0x421)],_0x2fa87f=_0x4e63f4[_0x3c4ad7(0xf7)],_0x32cc3f=_0x4e63f4[_0x3c4ad7(0x9ff)],_0x5f3ca4=_0x4e63f4[_0x3c4ad7(0xa48)];this['startMove'](-_0x2fa87f,-_0x32cc3f,_0x5f3ca4);}}else this['processActorCommandCancelTPB']();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x17c)]=![],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x8e4)]=function(){const _0x3b1bfd=_0x35b5eb;if(Imported[_0x3b1bfd(0xa9e)]&&BattleManager[_0x3b1bfd(0x311)]()){if(_0x3b1bfd(0x301)!==_0x3b1bfd(0x73a))return![];else{const _0x459850=_0xcc508b[_0x2b2c5c];if(!_0x459850)return'';let _0x508216='';_0x508216+=_0x459850[_0x3b1bfd(0x945)];for(const _0x5d081c of _0x459850[_0x3b1bfd(0xa90)]){for(const _0x3fe1c0 of _0x5d081c[_0x3b1bfd(0x8d0)]){[0x6c,0x198][_0x3b1bfd(0x87d)](_0x3fe1c0[_0x3b1bfd(0x72d)])&&(_0x508216+='\x0a',_0x508216+=_0x3fe1c0['parameters'][0x0]);}}return _0x508216;}}else{if(!VisuMZ[_0x3b1bfd(0x781)]['TpbActiveChangeEnabled'])return![];const _0x53b214=$gameParty[_0x3b1bfd(0x12b)]()[_0x3b1bfd(0x416)](_0x2f1b8c=>_0x2f1b8c[_0x3b1bfd(0x8df)]()&&_0x2f1b8c['canInput']());return _0x53b214[_0x3b1bfd(0x1a0)]>0x0&&BattleManager[_0x3b1bfd(0x157)]()!==_0x53b214[_0x53b214[_0x3b1bfd(0x1a0)]-0x1];}},Scene_Battle['prototype']['performTpbActiveCheckSwitch']=function(){const _0xac50b4=_0x35b5eb,_0x47f4a3=BattleManager[_0xac50b4(0x157)](),_0x274f99=_0x47f4a3[_0xac50b4(0x691)]();if(_0x274f99)_0x274f99['stepBack']();const _0x53cbbd=$gameParty[_0xac50b4(0x12b)]()[_0xac50b4(0x416)](_0x50407e=>_0x50407e[_0xac50b4(0x8df)]()&&_0x50407e['canInput']()),_0x2ad045=_0x53cbbd[_0xac50b4(0x57e)](_0x47f4a3),_0x12a526=_0x53cbbd[_0x2ad045+0x1];BattleManager['_currentActor']=_0x12a526||null;if(_0x12a526)_0x12a526[_0xac50b4(0x2a0)](_0xac50b4(0x35e));_0x47f4a3[_0xac50b4(0x2a0)](_0xac50b4(0x84d)),this['changeInputWindow']();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x3cc)]=function(){const _0x49f4be=_0x35b5eb;this[_0x49f4be(0x69a)]['setup'](),this['_actorCommandWindow'][_0x49f4be(0x4cc)]();if(!VisuMZ[_0x49f4be(0x781)][_0x49f4be(0x17c)])return;if(Imported[_0x49f4be(0xa9e)]&&BattleManager[_0x49f4be(0x311)]())return;if(BattleManager['_currentActor']){BattleManager[_0x49f4be(0xafe)][_0x49f4be(0x2a0)](_0x49f4be(0x84d));const _0x16a99f=BattleManager['_currentActor'][_0x49f4be(0x691)]();if(_0x16a99f)_0x16a99f[_0x49f4be(0x9d6)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x3ea)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x94f)],Scene_Battle[_0x35b5eb(0x73b)]['createHelpWindow']=function(){const _0x1bba0b=_0x35b5eb;VisuMZ[_0x1bba0b(0x781)][_0x1bba0b(0x3ea)]['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x35b5eb(0x73b)]['createHelpWindowBattleCore']=function(){const _0x94c30f=_0x35b5eb;this[_0x94c30f(0xa76)][_0x94c30f(0x6db)](this[_0x94c30f(0x874)]),this['_partyCommandWindow']['setHelpWindow'](this['_helpWindow']);},Scene_Battle[_0x35b5eb(0x73b)]['battleLayoutStyle']=function(){const _0x746770=_0x35b5eb;if($gameTemp[_0x746770(0x68b)]!==undefined)return $gameTemp[_0x746770(0x68b)];if(this[_0x746770(0x92d)])return this[_0x746770(0x92d)];return this[_0x746770(0x92d)]=VisuMZ[_0x746770(0x781)]['Settings'][_0x746770(0x842)][_0x746770(0x606)][_0x746770(0x210)]()[_0x746770(0x54d)](),this[_0x746770(0x92d)]===_0x746770(0x13f)&&!Imported[_0x746770(0x9b4)]&&(this['_battleLayoutStyle']=_0x746770(0x472)),this['_battleLayoutStyle'];},VisuMZ['BattleCore'][_0x35b5eb(0x9a5)]=Scene_Battle[_0x35b5eb(0x73b)]['windowAreaHeight'],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x332)]=function(){const _0x7d6d56=_0x35b5eb,_0x922c2b=this[_0x7d6d56(0xd6)]();switch(_0x922c2b){case _0x7d6d56(0x8d0):return this[_0x7d6d56(0xb29)](Math['max'](0x1,$gameParty[_0x7d6d56(0x2da)]()),!![]);break;default:return VisuMZ[_0x7d6d56(0x781)][_0x7d6d56(0x9a5)][_0x7d6d56(0x541)](this);break;}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x7b8)]=Scene_Battle[_0x35b5eb(0x73b)]['helpWindowRect'],Scene_Battle['prototype'][_0x35b5eb(0xb37)]=function(){const _0x35279d=_0x35b5eb,_0x339ff0=this[_0x35279d(0xd6)]();switch(_0x339ff0){case _0x35279d(0x390):return this[_0x35279d(0xacc)]();break;case'default':case _0x35279d(0x8d0):case'xp':case _0x35279d(0xf2):default:return VisuMZ[_0x35279d(0x781)][_0x35279d(0x7b8)]['call'](this);break;}},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x8ce)]=function(){const _0x103b36=_0x35b5eb,_0x59577a=this[_0x103b36(0xd6)]();switch(_0x59577a){case'xp':case _0x103b36(0xf2):return this[_0x103b36(0xee)]();break;case _0x103b36(0x390):return this['statusWindowRectBorderStyle']();break;case _0x103b36(0x472):case _0x103b36(0x8d0):default:return this[_0x103b36(0x846)]();break;}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x8d6)]=Scene_Battle[_0x35b5eb(0x73b)]['partyCommandWindowRect'],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x862)]=function(){const _0x1b77fe=_0x35b5eb,_0x5d303f=this[_0x1b77fe(0xd6)]();switch(_0x5d303f){case'xp':case'portrait':return this[_0x1b77fe(0x566)]();break;case'border':return this['partyCommandWindowRectBorderStyle']();case'default':case _0x1b77fe(0x8d0):default:return this[_0x1b77fe(0x506)]();break;}},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x506)]=function(){const _0x21a700=_0x35b5eb,_0x340413=VisuMZ[_0x21a700(0x781)]['Settings'][_0x21a700(0x842)],_0x539160=_0x340413[_0x21a700(0x41d)]||0xc0,_0x3e9907=this['windowAreaHeight'](),_0x1283c0=this[_0x21a700(0x76c)]()?Graphics[_0x21a700(0x1b4)]-_0x539160:0x0,_0x3d0f76=Graphics[_0x21a700(0x197)]-_0x3e9907;return new Rectangle(_0x1283c0,_0x3d0f76,_0x539160,_0x3e9907);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x83d)]=function(){const _0x16e0b5=_0x35b5eb;return this[_0x16e0b5(0x862)]();},VisuMZ['BattleCore'][_0x35b5eb(0x873)]=Scene_Battle[_0x35b5eb(0x73b)]['updateStatusWindowPosition'],Scene_Battle['prototype']['updateStatusWindowPosition']=function(){const _0x50eaa1=_0x35b5eb,_0x30d6f9=this['battleLayoutStyle']();switch(_0x30d6f9){case'xp':case _0x50eaa1(0xf2):case'border':break;case _0x50eaa1(0x472):case'list':default:VisuMZ[_0x50eaa1(0x781)][_0x50eaa1(0x873)]['call'](this);break;}},VisuMZ[_0x35b5eb(0x781)]['Scene_Battle_startActorSelection']=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x9b6)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x9b6)]=function(){const _0x443ef6=_0x35b5eb;VisuMZ['BattleCore']['Scene_Battle_startActorSelection'][_0x443ef6(0x541)](this),this[_0x443ef6(0x5fa)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x971)]=Scene_Battle['prototype'][_0x35b5eb(0x73c)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x73c)]=function(){const _0x173e57=_0x35b5eb;VisuMZ[_0x173e57(0x781)]['Scene_Battle_startEnemySelection'][_0x173e57(0x541)](this),this['_enemyWindow'][_0x173e57(0x164)](),this[_0x173e57(0x5fa)]();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x5fa)]=function(){const _0x2fb010=_0x35b5eb,_0x5cb3db=this['battleLayoutStyle']();['xp',_0x2fb010(0xf2),_0x2fb010(0x390)][_0x2fb010(0x87d)](_0x5cb3db)&&this[_0x2fb010(0xa76)][_0x2fb010(0x4cc)](),(_0x5cb3db==='border'||this[_0x2fb010(0xc6)]())&&(this['_skillWindow'][_0x2fb010(0x4cc)](),this['_itemWindow'][_0x2fb010(0x4cc)]());},VisuMZ['BattleCore']['Scene_Battle_onActorOk']=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x42e)],Scene_Battle['prototype']['onActorOk']=function(){const _0x1e763b=_0x35b5eb;VisuMZ[_0x1e763b(0x781)][_0x1e763b(0x33e)]['call'](this),this[_0x1e763b(0xaac)]();},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xa4f)]=function(){const _0x58c8b6=_0x35b5eb;return[_0x58c8b6(0x8c1),'guard',_0x58c8b6(0x41e)][_0x58c8b6(0x87d)](this['_actorCommandWindow'][_0x58c8b6(0x90c)]());},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xe3)]=Scene_Battle[_0x35b5eb(0x73b)]['onActorCancel'],Scene_Battle['prototype'][_0x35b5eb(0x570)]=function(){const _0x186443=_0x35b5eb;this[_0x186443(0xa4f)]()?_0x186443(0x35b)===_0x186443(0x644)?_0x24ebf4[_0x186443(0x71a)]=!![]:(this[_0x186443(0x8f5)][_0x186443(0x756)](),this[_0x186443(0xae7)][_0x186443(0x2e4)](),this[_0x186443(0xa76)][_0x186443(0x352)]()):VisuMZ[_0x186443(0x781)]['Scene_Battle_onActorCancel'][_0x186443(0x541)](this),this[_0x186443(0x117)]();},VisuMZ['BattleCore'][_0x35b5eb(0x78e)]=Scene_Battle['prototype'][_0x35b5eb(0x8e0)],Scene_Battle['prototype'][_0x35b5eb(0x8e0)]=function(){const _0x212949=_0x35b5eb;VisuMZ[_0x212949(0x781)]['Scene_Battle_onEnemyOk']['call'](this),this[_0x212949(0xaac)]();},VisuMZ['BattleCore'][_0x35b5eb(0x7e8)]=Scene_Battle[_0x35b5eb(0x73b)]['onEnemyCancel'],Scene_Battle['prototype'][_0x35b5eb(0xa1f)]=function(){const _0x4ded86=_0x35b5eb;if(this[_0x4ded86(0xa4f)]()){if(_0x4ded86(0x5cd)===_0x4ded86(0x49a))return _0x30c175['getDefeatedEnemies']()[_0x4ded86(0x87d)](this[_0x4ded86(0x6e5)]);else this[_0x4ded86(0x8f5)][_0x4ded86(0x756)](),this[_0x4ded86(0x8b0)][_0x4ded86(0x2e4)](),this[_0x4ded86(0xa76)][_0x4ded86(0x352)]();}else VisuMZ[_0x4ded86(0x781)][_0x4ded86(0x7e8)][_0x4ded86(0x541)](this);this[_0x4ded86(0x117)]();},Scene_Battle[_0x35b5eb(0x73b)]['okTargetSelectionVisibility']=function(){const _0xaeaf7c=_0x35b5eb,_0x10e8f0=this['battleLayoutStyle']();if(_0x10e8f0===_0xaeaf7c(0x390)||this[_0xaeaf7c(0xc6)]()){if(_0xaeaf7c(0x1da)===_0xaeaf7c(0x114))_0x40187f['BattleCore'][_0xaeaf7c(0x9bc)]&&_0x5708ad[_0xaeaf7c(0x781)][_0xaeaf7c(0x9bc)]['call'](this,_0x34c698),_0x414a26[_0xaeaf7c(0x781)][_0xaeaf7c(0x2b7)](_0x6b3741),_0x39d0c8[_0xaeaf7c(0x781)]['Parse_Notetags_Targets'](_0x27d681);else{this['_skillWindow'][_0xaeaf7c(0x1e0)]();this[_0xaeaf7c(0x771)][_0xaeaf7c(0x5af)]&&this[_0xaeaf7c(0x771)]['show']();this[_0xaeaf7c(0x743)][_0xaeaf7c(0x1e0)]();if(this[_0xaeaf7c(0x743)][_0xaeaf7c(0x5af)]){if(_0xaeaf7c(0x559)!=='ElKmd'){if(!this['_shadowSprite'])return;this[_0xaeaf7c(0xa3c)]['y']=this[_0xaeaf7c(0x740)]-this['y']-0x2;}else this[_0xaeaf7c(0x743)][_0xaeaf7c(0x756)]();}}}},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x117)]=function(){const _0x1568b4=_0x35b5eb,_0x1fd4b3=this[_0x1568b4(0xd6)]();if(['xp','portrait',_0x1568b4(0x390)]['includes'](_0x1fd4b3)){if(_0x1568b4(0x2fa)!=='wQFXi')this[_0x1568b4(0xa76)]['open']();else{const _0x2e9880=_0xdf76cf[_0x1568b4(0x7fd)];if(_0x2e9880[_0x1568b4(0x111)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x1ebf00=_0x33b3e9(_0x1927ee['$1']),_0x35b3e0=_0x28f85c[_0x1568b4(0x781)][_0x1568b4(0x82f)](_0x2edaa3,_0x1568b4(0x1bf));_0x6b970e[_0x1568b4(0x781)][_0x1568b4(0x47c)](_0x1ebf00,_0x35b3e0);}if(_0x2e9880['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x1e5a61=_0x19dc87(_0x1eff29['$1']),_0x1cfdd1=_0x19cd4f[_0x1568b4(0x781)][_0x1568b4(0x82f)](_0x17c2d1,_0x1568b4(0x404));_0x3fe3d2[_0x1568b4(0x781)][_0x1568b4(0x73e)](_0x1e5a61,_0x1cfdd1);}}}this[_0x1568b4(0xaac)]();},Scene_Battle['prototype'][_0x35b5eb(0x846)]=function(){const _0xabf79c=_0x35b5eb,_0x5a9532=VisuMZ[_0xabf79c(0x781)][_0xabf79c(0x3cb)][_0xabf79c(0x842)],_0x21ee6b=Window_BattleStatus[_0xabf79c(0x73b)][_0xabf79c(0x83f)](),_0x3bdafd=Graphics[_0xabf79c(0x1b4)]-(_0x5a9532[_0xabf79c(0x41d)]||0xc0),_0x2bbf18=this[_0xabf79c(0x332)]()+_0x21ee6b,_0xa2477b=this[_0xabf79c(0x76c)]()?0x0:Graphics[_0xabf79c(0x1b4)]-_0x3bdafd,_0x40fb1c=Graphics['boxHeight']-_0x2bbf18+_0x21ee6b;return new Rectangle(_0xa2477b,_0x40fb1c,_0x3bdafd,_0x2bbf18);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xee)]=function(){const _0x3eb26a=_0x35b5eb,_0x5066b8=Window_BattleStatus[_0x3eb26a(0x73b)][_0x3eb26a(0x83f)](),_0x555af7=Graphics['boxWidth'],_0x348686=this[_0x3eb26a(0x332)]()+_0x5066b8,_0x1aaa3b=0x0,_0xb96371=Graphics[_0x3eb26a(0x197)]-_0x348686+_0x5066b8;return new Rectangle(_0x1aaa3b,_0xb96371,_0x555af7,_0x348686);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x566)]=function(){const _0xbbce0d=_0x35b5eb,_0x3e8ff1=Graphics[_0xbbce0d(0x1b4)]/0x2,_0x10ad32=this[_0xbbce0d(0xb29)](VisuMZ[_0xbbce0d(0x781)][_0xbbce0d(0x3cb)]['BattleLayout']['XPActorCommandLines'],!![]),_0x4a0c2b=Math[_0xbbce0d(0x3d5)]((Graphics['boxWidth']-_0x3e8ff1)/0x2),_0x2510e1=Graphics[_0xbbce0d(0x197)]-_0x10ad32-this[_0xbbce0d(0xee)]()[_0xbbce0d(0x491)];return new Rectangle(_0x4a0c2b,_0x2510e1,_0x3e8ff1,_0x10ad32);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xacc)]=function(){const _0x54fab4=_0x35b5eb,_0x465377=Graphics[_0x54fab4(0x91c)],_0x2d18eb=Math[_0x54fab4(0x3d5)]((Graphics['boxWidth']-_0x465377)/0x2),_0x55563a=this[_0x54fab4(0x824)](),_0x453244=(Graphics[_0x54fab4(0x491)]-Graphics[_0x54fab4(0x197)])/-0x2;return new Rectangle(_0x2d18eb,_0x453244,_0x465377,_0x55563a);},Scene_Battle['prototype'][_0x35b5eb(0x2b9)]=function(){const _0x4a0052=_0x35b5eb,_0x4f9a92=Graphics[_0x4a0052(0x91c)],_0x2f1edd=Math[_0x4a0052(0x3d5)]((Graphics[_0x4a0052(0x1b4)]-_0x4f9a92)/0x2),_0x5d8694=this['calcWindowHeight'](0x4,!![]),_0x450a50=Graphics[_0x4a0052(0x197)]-_0x5d8694+(Graphics[_0x4a0052(0x491)]-Graphics[_0x4a0052(0x197)])/0x2;return new Rectangle(_0x2f1edd,_0x450a50,_0x4f9a92,_0x5d8694);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x7d7)]=function(){const _0x4711a0=_0x35b5eb,_0x49fe31=Math[_0x4711a0(0xaaf)](Graphics['width']/0x3),_0x16398a=this[_0x4711a0(0x76c)]()?(Graphics[_0x4711a0(0x91c)]+Graphics[_0x4711a0(0x1b4)])/0x2-_0x49fe31:(Graphics['width']-Graphics[_0x4711a0(0x1b4)])/-0x2,_0x32d521=this[_0x4711a0(0xacc)](),_0xd07111=_0x32d521['y']+_0x32d521[_0x4711a0(0x491)],_0x29584d=this[_0x4711a0(0x2b9)](),_0x57fa30=_0x29584d['y']-_0xd07111;return new Rectangle(_0x16398a,_0xd07111,_0x49fe31,_0x57fa30);},Scene_Battle['prototype'][_0x35b5eb(0xb01)]=function(){const _0x37eaa2=_0x35b5eb,_0x5c906c=Math[_0x37eaa2(0x43d)](Graphics['width']/0x3),_0x4be051=Math[_0x37eaa2(0x3d5)]((Graphics[_0x37eaa2(0x1b4)]-_0x5c906c)/0x2),_0x383bf3=this['partyCommandWindowRectBorderStyle'](),_0x3583f7=_0x383bf3['y'],_0x1d4562=_0x383bf3[_0x37eaa2(0x491)];return new Rectangle(_0x4be051,_0x3583f7,_0x5c906c,_0x1d4562);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x2a1)]=function(){const _0x228ab4=_0x35b5eb;this[_0x228ab4(0x225)]['y']=this[_0x228ab4(0x874)]['y']+this['_helpWindow'][_0x228ab4(0x491)];if(this[_0x228ab4(0x76c)]()){if('ZsWEt'==='VhbBF'){if(this[_0x228ab4(0x157)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x55c616(_0x3f243c['$1']);else{if(this[_0x228ab4(0x157)]()[_0x228ab4(0x7fd)][_0x228ab4(0x111)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0xd49461(_0x4dd917['$1']);}return 0x0;}else this['battleLayoutStyle']()===_0x228ab4(0x390)?this['_cancelButton']['x']=0x8:_0x228ab4(0x27f)===_0x228ab4(0x1c7)?_0x1d3024['actionBattleCoreJS'](_0x228ab4(0x3a1)):this[_0x228ab4(0x225)]['x']=-this[_0x228ab4(0x225)][_0x228ab4(0x91c)]-0x4;}else{if('NBEEd'!=='NBEEd'){if(!_0xd43baa[_0x228ab4(0x9b9)]()&&this[_0x228ab4(0x62e)]===_0x1f1038){const _0x397eaf=_0x5c5aad[_0x228ab4(0x73b)][_0x228ab4(0xd6)]();['default',_0x228ab4(0x8d0),_0x228ab4(0xf2),_0x228ab4(0x390)]['includes'](_0x397eaf)&&(this['opacity']=0x0);}}else this[_0x228ab4(0x225)]['x']=Graphics['width']-(Graphics[_0x228ab4(0x91c)]-Graphics[_0x228ab4(0x1b4)])/0x2-this[_0x228ab4(0x225)][_0x228ab4(0x91c)]-0x4;}},VisuMZ['BattleCore'][_0x35b5eb(0x4fd)]=Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x6ff)],Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x6ff)]=function(){const _0x385711=_0x35b5eb;if(this[_0x385711(0xd6)]()===_0x385711(0x390))return this[_0x385711(0xb01)]();else return this[_0x385711(0xc6)]()?this[_0x385711(0xa18)]():VisuMZ[_0x385711(0x781)][_0x385711(0x4fd)][_0x385711(0x541)](this);},VisuMZ[_0x35b5eb(0x781)]['Scene_Battle_itemWindowRect']=Scene_Battle['prototype'][_0x35b5eb(0x279)],Scene_Battle['prototype'][_0x35b5eb(0x279)]=function(){const _0x3250bb=_0x35b5eb;if(this[_0x3250bb(0xd6)]()===_0x3250bb(0x390))return this[_0x3250bb(0xb01)]();else{if(this['isSkillItemWindowsMiddle']())return this[_0x3250bb(0xa18)]();else{if(_0x3250bb(0x775)!==_0x3250bb(0x775))this[_0x3250bb(0x7c7)](_0x3250bb(0x736),_0x1fc47a);else return VisuMZ[_0x3250bb(0x781)]['Scene_Battle_itemWindowRect']['call'](this);}}},Scene_Battle[_0x35b5eb(0x73b)]['isSkillItemWindowsMiddle']=function(){const _0x1fbd2a=_0x35b5eb;return VisuMZ[_0x1fbd2a(0x781)][_0x1fbd2a(0x3cb)][_0x1fbd2a(0x842)][_0x1fbd2a(0x4a7)];},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xa18)]=function(){const _0x30825d=_0x35b5eb,_0x873438=Sprite_Button[_0x30825d(0x73b)]['blockWidth']()*0x2+0x4;let _0x54d5b4=Graphics['boxWidth']-_0x873438;Imported[_0x30825d(0x268)]&&SceneManager[_0x30825d(0xe5)]()&&(_0x54d5b4+=_0x873438);const _0x235efd=this[_0x30825d(0x7a9)](),_0x3455bf=Graphics[_0x30825d(0x197)]-_0x235efd-this['statusWindowRect']()[_0x30825d(0x491)]+Window_BattleStatus['prototype'][_0x30825d(0x83f)](),_0xea0ed8=0x0;return new Rectangle(_0xea0ed8,_0x235efd,_0x54d5b4,_0x3455bf);},Scene_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x3c9)]=function(){const _0x52a077=_0x35b5eb;if(!VisuMZ[_0x52a077(0x781)][_0x52a077(0x3cb)][_0x52a077(0xac3)][_0x52a077(0x458)])return;this['_enemyNameContainer']=new Sprite(),this[_0x52a077(0x91f)]['x']=this['_windowLayer']['x'],this[_0x52a077(0x91f)]['y']=this[_0x52a077(0x84c)]['y'];const _0xf13288=this[_0x52a077(0x85e)][_0x52a077(0x57e)](this[_0x52a077(0x84c)]);this[_0x52a077(0x52e)](this[_0x52a077(0x91f)],_0xf13288);for(let _0x405d18=0x0;_0x405d18<0x8;_0x405d18++){const _0x575727=new Window_EnemyName(_0x405d18);this[_0x52a077(0x91f)][_0x52a077(0x835)](_0x575727);}},Sprite_Battler['_motionSpeed']=VisuMZ['BattleCore']['Settings']['Actor'][_0x35b5eb(0xb0f)],VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xf8)]=Sprite_Battler['prototype']['initMembers'],Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x186)]=function(){const _0x545268=_0x35b5eb;VisuMZ['BattleCore']['Sprite_Battler_initMembers'][_0x545268(0x541)](this),this[_0x545268(0x392)]();if(this[_0x545268(0x62e)]===Sprite_Enemy)this[_0x545268(0x59d)]();this[_0x545268(0x61a)]();},Sprite_Battler[_0x35b5eb(0x73b)]['initMembersBattleCore']=function(){const _0x2d4195=_0x35b5eb;this['_baseX']=0x0,this['_baseY']=0x0,this[_0x2d4195(0x9a0)]=0x0,this[_0x2d4195(0x645)]=0x0,this['_floatDuration']=0x0,this[_0x2d4195(0x7ae)]=0x0,this[_0x2d4195(0x7a1)]=_0x2d4195(0x62b),this[_0x2d4195(0x9fe)]=0x0,this[_0x2d4195(0x4c3)]=0x0,this[_0x2d4195(0x596)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x2d4195(0x735)]=0xff,this[_0x2d4195(0x3ba)]=0x0,this[_0x2d4195(0x92a)]=0x0,this['_opacityEasing']='Linear',this[_0x2d4195(0x6ae)]=0x0,this[_0x2d4195(0x362)]=0x0,this[_0x2d4195(0x534)]=0x0,this['_angleWholeDuration']=0x0,this[_0x2d4195(0x405)]=_0x2d4195(0x62b),this[_0x2d4195(0x32f)]=!![],this[_0x2d4195(0x9cf)]=0x0,this[_0x2d4195(0x639)]=0x0,this[_0x2d4195(0x167)]=0x0,this[_0x2d4195(0x696)]=0x0,this['_skewDuration']=0x0,this['_skewWholeDuration']=0x0,this[_0x2d4195(0x684)]='Linear',this[_0x2d4195(0x364)]=0x1,this[_0x2d4195(0x779)]=0x1,this[_0x2d4195(0x6eb)]=0x1,this[_0x2d4195(0x752)]=0x1,this[_0x2d4195(0xa25)]=0x0,this['_growWholeDuration']=0x0,this[_0x2d4195(0x2e9)]=_0x2d4195(0x62b),this[_0x2d4195(0x523)]=0x1,this[_0x2d4195(0x7cd)]=0x0,this[_0x2d4195(0x575)]=0x0,this['_homeDuration']=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']=_0x2d4195(0x62b);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x59d)]=function(){const _0x52b7ad=_0x35b5eb;this[_0x52b7ad(0xa3c)]=new Sprite(),this[_0x52b7ad(0xa3c)]['bitmap']=ImageManager[_0x52b7ad(0x4e7)](_0x52b7ad(0x1a5)),this[_0x52b7ad(0xa3c)]['bitmap'][_0x52b7ad(0x306)]=VisuMZ[_0x52b7ad(0x781)][_0x52b7ad(0x3cb)][_0x52b7ad(0xb22)][_0x52b7ad(0x10d)],this[_0x52b7ad(0xa3c)][_0x52b7ad(0xabd)]['x']=0.5,this[_0x52b7ad(0xa3c)][_0x52b7ad(0xabd)]['y']=0.5,this[_0x52b7ad(0xa3c)]['y']=-0x2,this['_shadowSprite'][_0x52b7ad(0x17f)]=![],this[_0x52b7ad(0x835)](this['_shadowSprite']);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x61a)]=function(){const _0x3b402e=_0x35b5eb;this['_distortionSprite']=new Sprite(),this[_0x3b402e(0xa26)][_0x3b402e(0xabd)]['x']=0.5,this[_0x3b402e(0xa26)][_0x3b402e(0xabd)]['y']=0.5,this[_0x3b402e(0x835)](this['_distortionSprite']);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x74f)]=function(){const _0x1d7a4e=_0x35b5eb;if(!this[_0x1d7a4e(0xa26)])return;if(this[_0x1d7a4e(0xa3c)]){if(_0x1d7a4e(0x304)===_0x1d7a4e(0x6c4))this[_0x1d7a4e(0x403)](),this[_0x1d7a4e(0x34e)]();else{const _0x50bdea=this[_0x1d7a4e(0x5d6)](this['_distortionSprite']);this[_0x1d7a4e(0x52e)](this[_0x1d7a4e(0xa3c)],_0x50bdea),this[_0x1d7a4e(0x360)]();}}this[_0x1d7a4e(0x548)]&&this[_0x1d7a4e(0xa26)][_0x1d7a4e(0x835)](this[_0x1d7a4e(0x548)]),this[_0x1d7a4e(0x7a6)]&&this[_0x1d7a4e(0xa26)]['addChild'](this[_0x1d7a4e(0x7a6)]),this[_0x1d7a4e(0x3d4)]&&(_0x1d7a4e(0x16a)!==_0x1d7a4e(0x16a)?_0x3985d1=_0xe1684a>=_0xd4c48b?_0x318a21:_0xef68a8:this[_0x1d7a4e(0xa26)][_0x1d7a4e(0x835)](this[_0x1d7a4e(0x3d4)])),this[_0x1d7a4e(0x36f)]&&this[_0x1d7a4e(0xa26)]['addChild'](this[_0x1d7a4e(0x36f)]);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x360)]=function(){const _0x7705d6=_0x35b5eb;if(!this['_shadowSprite'])return;if(this[_0x7705d6(0xb0d)]&&this['_battler'][_0x7705d6(0x250)]()){if(_0x7705d6(0x13b)!==_0x7705d6(0x227)){const _0x682620=this[_0x7705d6(0xa3c)][_0x7705d6(0x89a)];this['_shadowSprite'][_0x7705d6(0x154)](0x0,0x0,_0x682620[_0x7705d6(0x91c)],_0x682620[_0x7705d6(0x491)]);}else _0xb93b69[_0x7705d6(0x9b7)](_0x2215fb);}else this['_shadowSprite']['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x35b5eb(0x1e6)]=function(){const _0x50d325=_0x35b5eb;if(SceneManager[_0x50d325(0x3a2)]()){if(_0x50d325(0xa9f)===_0x50d325(0xa9f))return SceneManager['_scene'][_0x50d325(0x254)]['_damageContainer'];else{const _0x5932b4=_0x25983f[_0x4aebf9];if(!_0x5932b4)return![];if(_0x5932b4[_0x50d325(0x8d0)][_0x50d325(0x1a0)]<=0x1)return![];return!![];}}else{if(_0x50d325(0x23d)===_0x50d325(0x23d))return this['parent'];else _0x1f78bc*=this[_0x50d325(0xa5b)]();}},Sprite_Battler[_0x35b5eb(0x73b)]['setupTextPopup']=function(_0x2d97f6,_0x2dcf7a){const _0x563cd3=_0x35b5eb;if(!this[_0x563cd3(0xb0d)][_0x563cd3(0x498)]())return;const _0x38ef11=VisuMZ[_0x563cd3(0x781)]['Settings'][_0x563cd3(0x165)],_0x19e7d0=new Sprite_Damage();_0x19e7d0['_duration']=_0x38ef11[_0x563cd3(0x383)],this[_0x563cd3(0x9d0)](_0x19e7d0),_0x19e7d0[_0x563cd3(0x448)](_0x2d97f6,_0x2dcf7a),this[_0x563cd3(0x112)](_0x19e7d0);},Sprite_Battler[_0x35b5eb(0x73b)]['setupIconTextPopup']=function(_0x26951a,_0x2e71e5,_0x389f9a){const _0x4e76be=_0x35b5eb;if(!this[_0x4e76be(0xb0d)][_0x4e76be(0x498)]())return;const _0x5bcd52=VisuMZ['BattleCore'][_0x4e76be(0x3cb)][_0x4e76be(0x165)],_0x258063=new Sprite_Damage();_0x258063['_duration']=_0x5bcd52['PopupDuration'],this[_0x4e76be(0x9d0)](_0x258063),_0x258063['setupIconTextPopup'](_0x26951a,_0x2e71e5,_0x389f9a),this['addDamageSprite'](_0x258063);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x7db)]=function(){const _0x759f3b=_0x35b5eb;if(!this[_0x759f3b(0xb0d)][_0x759f3b(0x934)]())return;while(this['_battler']['isDamagePopupRequested']()){this[_0x759f3b(0xb0d)][_0x759f3b(0x498)]()&&this[_0x759f3b(0x4ff)]();}this[_0x759f3b(0xb0d)]['clearDamagePopup'](),this['_battler'][_0x759f3b(0xdb)]();},Sprite_Battler['prototype'][_0x35b5eb(0x4ff)]=function(){const _0x19e4a7=_0x35b5eb,_0x3a387d=VisuMZ[_0x19e4a7(0x781)][_0x19e4a7(0x3cb)][_0x19e4a7(0x165)],_0x3b8411=new Sprite_Damage();_0x3b8411[_0x19e4a7(0x765)]=_0x3a387d['PopupDuration'],this[_0x19e4a7(0x9d0)](_0x3b8411),_0x3b8411['setup'](this[_0x19e4a7(0xb0d)]),_0x3b8411[_0x19e4a7(0xb2e)](this[_0x19e4a7(0xb0d)]),this[_0x19e4a7(0x112)](_0x3b8411);},Sprite_Battler['prototype'][_0x35b5eb(0x112)]=function(_0x5e06ce){const _0x16cf37=_0x35b5eb;this[_0x16cf37(0xa39)][_0x16cf37(0x7c7)](_0x5e06ce);if(this[_0x16cf37(0x5d4)]()){if('Gwkik'===_0x16cf37(0x4d7)){if(!_0x596e12[_0x16cf37(0x9b9)]())return;const _0x598c60=this[_0x16cf37(0x691)]();if(!_0x598c60)return;_0x598c60[_0x16cf37(0x357)](_0x420eae,_0x5a3675,_0x289d97);}else SceneManager[_0x16cf37(0x885)][_0x16cf37(0x8f5)]['addDamageSprite'](_0x5e06ce,this[_0x16cf37(0xb0d)]);}else{this['damageContainer']()['addChild'](_0x5e06ce);if(SceneManager[_0x16cf37(0x725)]())_0x5e06ce[_0x16cf37(0xac1)]['x']=-0x1;}},Sprite_Battler['prototype'][_0x35b5eb(0x5d4)]=function(){const _0x570e5d=_0x35b5eb;return!$gameSystem['isSideView']()&&this[_0x570e5d(0xb0d)]&&this['_battler']['isActor']();},Sprite_Battler[_0x35b5eb(0x73b)]['sortDamageSprites']=function(_0x4376e8){const _0x176c00=_0x35b5eb;this[_0x176c00(0x24f)](_0x4376e8,!![]);const _0x59bf24=VisuMZ[_0x176c00(0x781)][_0x176c00(0x3cb)]['Damage'],_0x312817=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x59bf24[_0x176c00(0x7d0)]){if('kQiaO'!==_0x176c00(0x1db))for(const _0x374d6f of _0x1b71a1){const _0x1bce25=_0x51f904[0x0][_0x176c00(0x4ed)](_0x374d6f[0x0],_0x121acb[0x0]),_0xe3b263=_0x5e00f2[0x1][_0x176c00(0x4ed)](_0x374d6f[0x1],_0x239537[0x1])[_0x176c00(0x54d)](),_0x2ffd7f=new _0x2b568e(_0x2d7d56[_0x176c00(0x4ed)](_0xe3b263),'i');_0x40a94a[_0x1bce25]=_0x2ffd7f;}else for(const _0x3a4a02 of this['_damages']){_0x3a4a02['x']+=_0x59bf24[_0x176c00(0x409)]*_0x312817,_0x3a4a02['y']+=_0x59bf24[_0x176c00(0x34b)];}}else{const _0x1cf22c=this[_0x176c00(0xa39)][this['_damages']['length']-0x1];_0x1cf22c&&(_0x176c00(0x1b6)===_0x176c00(0x1b6)?(_0x4376e8['x']=_0x1cf22c['x']+_0x59bf24[_0x176c00(0x409)]*_0x312817,_0x4376e8['y']=_0x1cf22c['y']+_0x59bf24['PopupShiftY']):(_0x6c2704+=_0x1fe207[_0x176c00(0xa6f)]()?-_0x136dcf:_0x12bb38,_0x20538c+=_0x500435[_0x176c00(0xa6f)]()?-_0x154f6e:_0x4e70e7));}},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x24f)]=function(_0x301a1c,_0x4da901){const _0x4c8db5=_0x35b5eb,_0x5361b5=SceneManager[_0x4c8db5(0x725)]()?-0x1:0x1;let _0x12f089=this[_0x4c8db5(0x74d)];_0x12f089+=this[_0x4c8db5(0x7aa)]();let _0x30c830=this[_0x4c8db5(0x740)];const _0x4a587d=this['_distortionSprite'][_0x4c8db5(0xac1)]['y'];_0x30c830+=this[_0x4c8db5(0x8d8)]();const _0x2376bd=SceneManager[_0x4c8db5(0x885)][_0x4c8db5(0x8f5)];if(_0x2376bd&&this[_0x4c8db5(0x47b)]===_0x2376bd){_0x12f089+=_0x2376bd['x']-this['damageOffsetX']();const _0x555524=_0x2376bd[_0x4c8db5(0x3b4)]()*0x3/0x4;_0x30c830=_0x2376bd['y']+_0x555524,_0x30c830=Math[_0x4c8db5(0x4bc)](_0x30c830,_0x2376bd['y']+this['y']-this[_0x4c8db5(0x491)]+_0x555524);}_0x301a1c['x']=Math[_0x4c8db5(0x3d5)](_0x12f089+this[_0x4c8db5(0x782)]()*_0x5361b5),_0x301a1c['y']=Math['round'](_0x30c830+this['damageOffsetY']());},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x6d2)]=Sprite_Battler['prototype'][_0x35b5eb(0x782)],Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x782)]=function(){const _0x21fa4e=_0x35b5eb;let _0x111e7f=VisuMZ['BattleCore'][_0x21fa4e(0x6d2)][_0x21fa4e(0x541)](this),_0x501a95=VisuMZ[_0x21fa4e(0x781)]['Settings'][_0x21fa4e(0x165)][_0x21fa4e(0x637)]||0x0;return Math[_0x21fa4e(0x3d5)](_0x111e7f+_0x501a95);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xaa8)]=Sprite_Battler['prototype'][_0x35b5eb(0x27e)],Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x27e)]=function(){const _0x5265c2=_0x35b5eb;let _0x57e392=VisuMZ[_0x5265c2(0x781)][_0x5265c2(0xaa8)]['call'](this);switch(VisuMZ['BattleCore'][_0x5265c2(0x3cb)]['Damage'][_0x5265c2(0x868)]){case _0x5265c2(0x767):_0x57e392-=this[_0x5265c2(0x491)]*this['scale']['y'];break;case _0x5265c2(0x321):_0x57e392-=this[_0x5265c2(0x491)]*this[_0x5265c2(0xac1)]['y']*0.5;break;}let _0x1b1a94=VisuMZ[_0x5265c2(0x781)][_0x5265c2(0x3cb)][_0x5265c2(0x165)][_0x5265c2(0xa33)]||0x0;return Math[_0x5265c2(0x3d5)](_0x57e392+_0x1b1a94);},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x782)]=function(){const _0xcbfa1c=_0x35b5eb;return Sprite_Battler['prototype'][_0xcbfa1c(0x782)]['call'](this);},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x27e)]=function(){const _0x1c861d=_0x35b5eb;return Sprite_Battler[_0x1c861d(0x73b)][_0x1c861d(0x27e)][_0x1c861d(0x541)](this);},Sprite_Battler['prototype'][_0x35b5eb(0x82b)]=function(_0x46cf20){const _0xdd413c=_0x35b5eb;this[_0xdd413c(0x5d4)]()?SceneManager[_0xdd413c(0x885)][_0xdd413c(0x8f5)]['removeDamageSprite'](_0x46cf20):'jBXfh'==='jBXfh'?(this[_0xdd413c(0x1e6)]()[_0xdd413c(0x798)](_0x46cf20),this['_damages']['remove'](_0x46cf20),_0x46cf20[_0xdd413c(0x327)]()):this['_pattern']=(this[_0xdd413c(0xa02)]+0x1)%0x4;},VisuMZ[_0x35b5eb(0x781)]['Sprite_Battler_setHome']=Sprite_Battler['prototype'][_0x35b5eb(0x94c)],Sprite_Battler[_0x35b5eb(0x73b)]['setHome']=function(_0x4e5fb9,_0x66e962){const _0x151e5f=_0x35b5eb,_0x315227=VisuMZ['BattleCore'][_0x151e5f(0x3cb)];if(this['constructor']===Sprite_Actor){if('MFrzN'===_0x151e5f(0x91b))_0x4e5fb9+=_0x315227['Actor'][_0x151e5f(0x67f)]||0x0,_0x66e962+=_0x315227[_0x151e5f(0xb22)][_0x151e5f(0x3d9)]||0x0;else{if(_0x24f4d2===_0x2f0c51[_0x151e5f(0x157)]())return![];}}else this[_0x151e5f(0x62e)]===Sprite_Enemy&&(_0x4e5fb9+=_0x315227[_0x151e5f(0xac3)][_0x151e5f(0x67f)]||0x0,_0x66e962+=_0x315227[_0x151e5f(0xac3)][_0x151e5f(0x3d9)]||0x0);this['_battler']&&(_0x151e5f(0x92f)===_0x151e5f(0x92f)?(_0x4e5fb9=this['_battler']['_forcedHomeX']??_0x4e5fb9,_0x66e962=this[_0x151e5f(0xb0d)][_0x151e5f(0x185)]??_0x66e962):_0x225304=!_0x1bb971),VisuMZ[_0x151e5f(0x781)]['Sprite_Battler_setHome']['call'](this,_0x4e5fb9,_0x66e962),this[_0x151e5f(0x7cd)]=this[_0x151e5f(0x82d)],this[_0x151e5f(0x575)]=this[_0x151e5f(0x56d)],this['_homeDuration']=0x0,this[_0x151e5f(0x4b5)]=0x0,this[_0x151e5f(0xa4a)]=_0x151e5f(0x62b);},VisuMZ['BattleCore'][_0x35b5eb(0xaeb)]=Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x9de)],Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x9de)]=function(){const _0x378321=_0x35b5eb;VisuMZ['BattleCore'][_0x378321(0xaeb)][_0x378321(0x541)](this);if(!this['_battler']&&this[_0x378321(0x19c)]){if('YIgsg'===_0x378321(0x35a))this[_0x378321(0x19c)][_0x378321(0x17f)]=![];else return _0x343022[_0x378321(0x691)]()['_baseX']-_0x2114e7[_0x378321(0x691)]()[_0x378321(0x74d)];}},VisuMZ['BattleCore'][_0x35b5eb(0x14b)]=Sprite_Battler['prototype'][_0x35b5eb(0xf9)],Sprite_Battler[_0x35b5eb(0x73b)]['updateMain']=function(){const _0x504039=_0x35b5eb;this[_0x504039(0x850)](),this[_0x504039(0x422)](),this[_0x504039(0x412)](),this[_0x504039(0x662)](),this[_0x504039(0xa97)](),VisuMZ[_0x504039(0x781)][_0x504039(0x14b)][_0x504039(0x541)](this);if(this['constructor']===Sprite_Enemy)this[_0x504039(0x896)]();},VisuMZ[_0x35b5eb(0x781)]['Sprite_Battler_updatePosition']=Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x5fc)],Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x5fc)]=function(){const _0x22977c=_0x35b5eb;this[_0x22977c(0x5e2)](),VisuMZ['BattleCore'][_0x22977c(0x3fc)]['call'](this),this[_0x22977c(0x64f)](),this[_0x22977c(0x34f)]();},Sprite_Battler[_0x35b5eb(0x73b)]['startHomeMove']=function(_0xcbd036,_0x211067,_0x3a005a,_0x1af9bc){const _0x38e8a6=_0x35b5eb;(this[_0x38e8a6(0x7cd)]!==_0xcbd036||this[_0x38e8a6(0x575)]!==_0x211067)&&(this['_targetHomeX']=_0xcbd036,this[_0x38e8a6(0x575)]=_0x211067,this[_0x38e8a6(0x294)]=_0x3a005a,this[_0x38e8a6(0x4b5)]=_0x3a005a,this[_0x38e8a6(0xa4a)]=_0x1af9bc,_0x3a005a<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler['prototype'][_0x35b5eb(0x5e2)]=function(){const _0x186312=_0x35b5eb;if(this['_homeDuration']<=0x0)return;const _0x3e8feb=this[_0x186312(0x294)],_0x5e88de=this[_0x186312(0x4b5)],_0x7341f6=this[_0x186312(0xa4a)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x186312(0xad0)!==_0x186312(0xb00))this[_0x186312(0x82d)]=this[_0x186312(0x5c7)](this['_homeX'],this[_0x186312(0x7cd)],_0x3e8feb,_0x5e88de,_0x7341f6),this['_homeY']=this[_0x186312(0x5c7)](this[_0x186312(0x56d)],this[_0x186312(0x575)],_0x3e8feb,_0x5e88de,_0x7341f6);else{if(_0x6898b5[_0x186312(0x254)][_0x186312(0x877)]())return!![];this[_0x186312(0x996)]='';}}else this[_0x186312(0x82d)]=(this[_0x186312(0x82d)]*(_0x3e8feb-0x1)+this['_targetHomeX'])/_0x3e8feb,this[_0x186312(0x56d)]=(this[_0x186312(0x56d)]*(_0x3e8feb-0x1)+this[_0x186312(0x575)])/_0x3e8feb;this[_0x186312(0x294)]--;if(this[_0x186312(0x294)]<=0x0)this[_0x186312(0xcf)]();},Sprite_Battler[_0x35b5eb(0x73b)]['onHomeMoveEnd']=function(){const _0x1c3909=_0x35b5eb;this[_0x1c3909(0x82d)]=this[_0x1c3909(0x7cd)],this[_0x1c3909(0x56d)]=this[_0x1c3909(0x575)];},Sprite_Battler['prototype']['updatePositionBattleCore']=function(){const _0x170dd1=_0x35b5eb;this[_0x170dd1(0x74d)]=this['x'],this['_baseY']=this['y'],this['updateFloat'](),this[_0x170dd1(0x442)](),this['x']+=this[_0x170dd1(0x7aa)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x170dd1(0x568)](),this['x']=Math[_0x170dd1(0xaaf)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x7aa)]=function(){let _0x34474d=0x0;return _0x34474d;},Sprite_Battler['prototype'][_0x35b5eb(0x8d8)]=function(){const _0x413c46=_0x35b5eb;let _0x4fd820=0x0;return this[_0x413c46(0xb0d)]&&!this[_0x413c46(0xb0d)][_0x413c46(0x123)]()&&(_0x4fd820-=this[_0x413c46(0x9a0)],_0x4fd820-=this[_0x413c46(0x9fe)]),_0x4fd820;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x568)]=function(){const _0x2371e3=_0x35b5eb;let _0x29776d=0x0;if(this['_distortionSprite']&&this[_0x2371e3(0x62e)]!==Sprite_SvEnemy){const _0x494b27=this[_0x2371e3(0xa26)][_0x2371e3(0xac1)]['y'];_0x29776d-=(_0x494b27-0x1)*this[_0x2371e3(0x491)];}return _0x29776d;},Sprite_Battler['prototype']['updateFlip']=function(){const _0xc4d2a5=_0x35b5eb,_0xdad903=this[_0xc4d2a5(0xb0d)]&&this['_battler'][_0xc4d2a5(0x670)]();this[_0xc4d2a5(0x523)]=(_0xdad903?-0x1:0x1)*Math[_0xc4d2a5(0x88a)](this[_0xc4d2a5(0xac1)]['x']);},Sprite_Battler['prototype'][_0x35b5eb(0x956)]=function(_0x2f5abe,_0x475673,_0x1d5d1d){const _0x12721a=_0x35b5eb;if(!this[_0x12721a(0x5a6)]())return;if(this[_0x12721a(0x645)]===_0x2f5abe)return;this[_0x12721a(0x645)]=_0x2f5abe,this['_floatDuration']=_0x475673,this[_0x12721a(0x7ae)]=_0x475673,this[_0x12721a(0x7a1)]=_0x1d5d1d||_0x12721a(0x62b);if(_0x475673<=0x0)this['_floatHeight']=_0x2f5abe;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x9ad)]=function(){const _0x53deb4=_0x35b5eb;if(this['_floatDuration']<=0x0)return;const _0x3634ea=this[_0x53deb4(0x7d3)],_0x170089=this['_floatWholeDuration'],_0x48417a=this[_0x53deb4(0x7a1)];Imported['VisuMZ_0_CoreEngine']?this[_0x53deb4(0x9a0)]=this[_0x53deb4(0x5c7)](this[_0x53deb4(0x9a0)],this[_0x53deb4(0x645)],_0x3634ea,_0x170089,_0x48417a):_0x53deb4(0x687)===_0x53deb4(0x687)?this['_floatHeight']=(this['_floatHeight']*(_0x3634ea-0x1)+this[_0x53deb4(0x645)])/_0x3634ea:_0x579212=_0x511881[this[_0x53deb4(0xb1c)][_0x3c0178]['ext']];this[_0x53deb4(0x7d3)]--;if(this[_0x53deb4(0x7d3)]<=0x0)this[_0x53deb4(0x8e7)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x8e7)]=function(){const _0x2b3158=_0x35b5eb;this[_0x2b3158(0x9a0)]=this[_0x2b3158(0x645)];},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x917)]=function(){const _0x18723d=_0x35b5eb;return this[_0x18723d(0x7d3)]>0x0;},Sprite_Battler['prototype'][_0x35b5eb(0xb18)]=function(_0x2b6f40,_0x32c5b3){const _0x35c54b=_0x35b5eb;if(!this[_0x35c54b(0x5a6)]())return;if(_0x32c5b3<=0x0)return;this['_jumpMaxHeight']=_0x2b6f40,this[_0x35c54b(0x596)]=_0x32c5b3,this['_jumpWholeDuration']=_0x32c5b3;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x442)]=function(){const _0x76dcdd=_0x35b5eb;if(this['_jumpDuration']<=0x0)return;const _0x16611d=this['_jumpWholeDuration']-this[_0x76dcdd(0x596)],_0x145c46=this[_0x76dcdd(0x79d)]/0x2,_0x4f6edd=this[_0x76dcdd(0x4c3)],_0x6913b3=-_0x4f6edd/Math[_0x76dcdd(0x5ad)](_0x145c46,0x2);this['_jumpHeight']=_0x6913b3*Math[_0x76dcdd(0x5ad)](_0x16611d-_0x145c46,0x2)+_0x4f6edd,this['_jumpDuration']--;if(this[_0x76dcdd(0x596)]<=0x0)return this[_0x76dcdd(0xa29)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xa29)]=function(){const _0xb8572a=_0x35b5eb;this[_0xb8572a(0x9fe)]=0x0;},Sprite_Battler['prototype'][_0x35b5eb(0x29b)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x357)]=function(_0xe7d27f,_0x185e02,_0x1af53a){const _0x50b5e0=_0x35b5eb;if(this[_0x50b5e0(0x735)]===_0xe7d27f)return;this[_0x50b5e0(0x735)]=_0xe7d27f,this[_0x50b5e0(0x3ba)]=_0x185e02,this[_0x50b5e0(0x92a)]=_0x185e02,this[_0x50b5e0(0xa0a)]=_0x1af53a||'Linear';if(_0x185e02<=0x0)this[_0x50b5e0(0x1be)]=_0xe7d27f;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x34f)]=function(){const _0x38a310=_0x35b5eb;if(this[_0x38a310(0x62e)][_0x38a310(0x945)]===_0x38a310(0x2db))return;if(this['_opacityDuration']<=0x0)return;const _0xe3ec5e=this[_0x38a310(0x3ba)],_0xaaea6b=this[_0x38a310(0x92a)],_0x2c92dd=this[_0x38a310(0xa0a)];if(Imported['VisuMZ_0_CoreEngine'])'wGAvF'!=='wGAvF'?_0x21f6bb[_0x38a310(0x781)]['Game_Action_setGuard'][_0x38a310(0x541)](this):this[_0x38a310(0x1be)]=this[_0x38a310(0x5c7)](this[_0x38a310(0x1be)],this[_0x38a310(0x735)],_0xe3ec5e,_0xaaea6b,_0x2c92dd);else{if(_0x38a310(0xac6)==='EempO')return _0x2b4fa5[_0x38a310(0x781)][_0x38a310(0x3cb)][_0x38a310(0xac3)]['NameAlwaysSelectOnly']?this['_battler']['isSelected']():_0x11206e['_scene'][_0x38a310(0x8b0)]&&_0x30832f[_0x38a310(0x885)][_0x38a310(0x8b0)]['active']&&_0x8bfd3f[_0x38a310(0x885)][_0x38a310(0x8b0)][_0x38a310(0x11f)][_0x38a310(0x87d)](this[_0x38a310(0xb0d)]);else this[_0x38a310(0x1be)]=(this[_0x38a310(0x1be)]*(_0xe3ec5e-0x1)+this[_0x38a310(0x735)])/_0xe3ec5e;}this['_opacityDuration']--;if(this[_0x38a310(0x3ba)]<=0x0)this['onOpacityEnd']();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x6ef)]=function(){const _0x3cfb6f=_0x35b5eb;this[_0x3cfb6f(0x1be)]=this['_targetOpacity'];},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x92c)]=function(){const _0x5e02a8=_0x35b5eb;return this[_0x5e02a8(0x3ba)]>0x0;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x896)]=function(){const _0x2e55fb=_0x35b5eb;this['_shadowSprite'][_0x2e55fb(0x17f)]=this[_0x2e55fb(0xb0d)][_0x2e55fb(0xae6)](),this[_0x2e55fb(0x13c)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x13c)]=function(){const _0x4c1ccb=_0x35b5eb;if(!this[_0x4c1ccb(0xa3c)])return;this[_0x4c1ccb(0xa3c)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xb1a)]=function(){const _0xf681b1=_0x35b5eb;if(!this[_0xf681b1(0xb0d)])return;this[_0xf681b1(0x1c4)]=this[_0xf681b1(0xb0d)][_0xf681b1(0x2fe)](),this[_0xf681b1(0xa8d)]=this['_battler'][_0xf681b1(0x66e)]();},Game_BattlerBase[_0x35b5eb(0x73b)]['battlerShadowScaleX']=function(){const _0xd29cc=_0x35b5eb,_0x27a1f0=this['isActor']()?this[_0xd29cc(0x157)]():this['enemy']();if(_0x27a1f0){const _0x4074c7=_0x27a1f0[_0xd29cc(0x7fd)];if(_0x4074c7[_0xd29cc(0x111)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x4074c7[_0xd29cc(0x111)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x35b5eb(0x73b)][_0x35b5eb(0x66e)]=function(){const _0x1081a1=_0x35b5eb,_0x52484d=this[_0x1081a1(0xa6f)]()?this['actor']():this[_0x1081a1(0x81d)]();if(_0x52484d){const _0x15ee69=_0x52484d[_0x1081a1(0x7fd)];if(_0x15ee69[_0x1081a1(0x111)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x1081a1(0x50e)==='fkaau'?Number(RegExp['$1'])*0.01:this[_0x1081a1(0x64d)]&&this[_0x1081a1(0x64d)][_0x1081a1(0xae6)]();else{if(_0x15ee69[_0x1081a1(0x111)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler['prototype'][_0x35b5eb(0x850)]=function(){const _0x152b96=_0x35b5eb;if(this[_0x152b96(0x62e)]===Sprite_SvEnemy)return;this[_0x152b96(0x6ce)](),this[_0x152b96(0xaba)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xaba)]=function(){const _0x163e3a=_0x35b5eb,_0x4d50e2=this['_distortionSprite'];_0x4d50e2&&('hKQWL'===_0x163e3a(0xb27)?(_0x4d50e2[_0x163e3a(0xac1)]['x']=this[_0x163e3a(0x2a2)](),_0x4d50e2[_0x163e3a(0xac1)]['y']=this[_0x163e3a(0x354)]()):this[_0x163e3a(0x7fe)](_0x163e3a(0x1be)));},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x2a2)]=function(){const _0x47728a=_0x35b5eb;let _0x547893=0x1;return _0x547893*=this[_0x47728a(0x523)],_0x547893*=this[_0x47728a(0x364)],_0x547893;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x354)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x667)]=function(){const _0x295635=_0x35b5eb;return this[_0x295635(0x91c)]*this[_0x295635(0x2a2)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x9d9)]=function(){const _0x1e3803=_0x35b5eb;return this[_0x1e3803(0x491)]*this[_0x1e3803(0x354)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x42b)]=function(_0x2208fd,_0x4d7a5b,_0x17c83c,_0x36d541){const _0x40dcc5=_0x35b5eb;if(!this[_0x40dcc5(0x5a6)]())return;if(!this[_0x40dcc5(0xa26)])return;if(this[_0x40dcc5(0x6eb)]===_0x2208fd&&this[_0x40dcc5(0x752)]===_0x4d7a5b)return;this[_0x40dcc5(0x6eb)]=_0x2208fd,this[_0x40dcc5(0x752)]=_0x4d7a5b,this[_0x40dcc5(0xa25)]=_0x17c83c,this[_0x40dcc5(0xa32)]=_0x17c83c,this[_0x40dcc5(0x2e9)]=_0x36d541||'Linear',_0x17c83c<=0x0&&(this[_0x40dcc5(0x364)]=this[_0x40dcc5(0x6eb)],this['_growY']=this[_0x40dcc5(0x752)]);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x6ce)]=function(){const _0x5ad6ef=_0x35b5eb;if(this[_0x5ad6ef(0xa25)]<=0x0)return;if(!this[_0x5ad6ef(0xa26)])return;const _0xf32cb3=this['_growDuration'],_0x8c0338=this[_0x5ad6ef(0xa32)],_0x1b326f=this[_0x5ad6ef(0x2e9)];Imported['VisuMZ_0_CoreEngine']?_0x5ad6ef(0x3b5)!==_0x5ad6ef(0x229)?(this[_0x5ad6ef(0x364)]=this[_0x5ad6ef(0x5c7)](this[_0x5ad6ef(0x364)],this[_0x5ad6ef(0x6eb)],_0xf32cb3,_0x8c0338,_0x1b326f),this[_0x5ad6ef(0x779)]=this[_0x5ad6ef(0x5c7)](this['_growY'],this[_0x5ad6ef(0x752)],_0xf32cb3,_0x8c0338,_0x1b326f)):_0x4949de[_0x5ad6ef(0x5fd)]([_0x1aa656]):(this[_0x5ad6ef(0x364)]=(this['_growX']*(_0xf32cb3-0x1)+this['_targetGrowX'])/_0xf32cb3,this[_0x5ad6ef(0x779)]=(this[_0x5ad6ef(0x779)]*(_0xf32cb3-0x1)+this[_0x5ad6ef(0x752)])/_0xf32cb3);this[_0x5ad6ef(0xa25)]--;if(this[_0x5ad6ef(0xa25)]<=0x0)this[_0x5ad6ef(0x12f)]();},Sprite_Battler[_0x35b5eb(0x73b)]['onGrowEnd']=function(){const _0x1b360c=_0x35b5eb;this[_0x1b360c(0x364)]=this[_0x1b360c(0x6eb)],this[_0x1b360c(0x779)]=this[_0x1b360c(0x752)];},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x3a7)]=function(){return this['_growDuration']>0x0;},Sprite_Battler['prototype'][_0x35b5eb(0x5f1)]=function(_0x2517e9,_0x1474ca,_0x118bea,_0x16d606){const _0x3a51a5=_0x35b5eb;if(!this['canMove']())return;if(!this[_0x3a51a5(0xa26)])return;if(this[_0x3a51a5(0x167)]===_0x2517e9&&this['_targetSkewY']===_0x1474ca)return;this[_0x3a51a5(0x167)]=_0x2517e9,this[_0x3a51a5(0x696)]=_0x1474ca,this['_skewDuration']=_0x118bea,this['_skewWholeDuration']=_0x118bea,this[_0x3a51a5(0x684)]=_0x16d606||_0x3a51a5(0x62b),_0x118bea<=0x0&&(this[_0x3a51a5(0xa26)]['skew']['x']=this['_targetSkewX'],this[_0x3a51a5(0xa26)][_0x3a51a5(0x65d)]['y']=this['_targetSkewY']);},Sprite_Battler['prototype'][_0x35b5eb(0x422)]=function(){const _0x4038fa=_0x35b5eb;if(this['_skewDuration']<=0x0)return;if(!this[_0x4038fa(0xa26)])return;const _0x4bd3c1=this[_0x4038fa(0x80d)],_0x523947=this[_0x4038fa(0xb1f)],_0x977bf6=this[_0x4038fa(0x684)],_0x57c271=this[_0x4038fa(0xa26)];Imported[_0x4038fa(0x268)]?_0x4038fa(0x144)!==_0x4038fa(0x144)?this[_0x4038fa(0x7c7)](_0x4038fa(0x3f0),_0x4038fa(0x40b)[_0x4038fa(0x4ed)](_0xf2a168['battleDisplayText'](_0x544623))):(_0x57c271[_0x4038fa(0x65d)]['x']=this['applyEasing'](_0x57c271[_0x4038fa(0x65d)]['x'],this['_targetSkewX'],_0x4bd3c1,_0x523947,_0x977bf6),_0x57c271[_0x4038fa(0x65d)]['y']=this[_0x4038fa(0x5c7)](_0x57c271[_0x4038fa(0x65d)]['y'],this[_0x4038fa(0x696)],_0x4bd3c1,_0x523947,_0x977bf6)):(_0x57c271[_0x4038fa(0x65d)]['x']=(_0x57c271['skew']['x']*(_0x4bd3c1-0x1)+this[_0x4038fa(0x167)])/_0x4bd3c1,_0x57c271[_0x4038fa(0x65d)]['y']=(_0x57c271[_0x4038fa(0x65d)]['y']*(_0x4bd3c1-0x1)+this[_0x4038fa(0x696)])/_0x4bd3c1);this[_0x4038fa(0x80d)]--;if(this['_skewDuration']<=0x0)this[_0x4038fa(0x15d)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x15d)]=function(){const _0x2e0514=_0x35b5eb;this[_0x2e0514(0xa26)]['skew']['x']=this[_0x2e0514(0x167)],this['_distortionSprite'][_0x2e0514(0x65d)]['y']=this[_0x2e0514(0x696)];},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x75f)]=function(){const _0x3eb835=_0x35b5eb;return this[_0x3eb835(0x80d)]>0x0;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x590)]=function(_0x1265a4,_0x12a577,_0x4ef1a0,_0x5b0d16){const _0x50703b=_0x35b5eb;if(!this['canMove']())return;if(!this[_0x50703b(0xa26)])return;if(this[_0x50703b(0x362)]===_0x1265a4)return;this['_targetAngle']=_0x1265a4,this[_0x50703b(0x534)]=_0x12a577,this[_0x50703b(0x9ee)]=_0x12a577,this[_0x50703b(0x405)]=_0x4ef1a0||_0x50703b(0x62b),this['_angleRevertOnFinish']=_0x5b0d16,this[_0x50703b(0x32f)]===undefined&&(this[_0x50703b(0x32f)]=!![]),_0x12a577<=0x0&&(this[_0x50703b(0x6ae)]=_0x1265a4,this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this[_0x50703b(0x6ae)]=0x0));},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x412)]=function(){const _0xe7721=_0x35b5eb;this[_0xe7721(0x636)](),this[_0xe7721(0x449)]();},Sprite_Battler[_0x35b5eb(0x73b)]['updateAngleCalculations']=function(){const _0x13851b=_0x35b5eb;if(this[_0x13851b(0x534)]<=0x0)return;const _0x28af0e=this[_0x13851b(0x534)],_0x758c94=this[_0x13851b(0x9ee)],_0xd99b46=this[_0x13851b(0x405)];Imported[_0x13851b(0x268)]?this[_0x13851b(0x6ae)]=this[_0x13851b(0x5c7)](this[_0x13851b(0x6ae)],this[_0x13851b(0x362)],_0x28af0e,_0x758c94,_0xd99b46):this[_0x13851b(0x6ae)]=(this[_0x13851b(0x6ae)]*(_0x28af0e-0x1)+this['_targetAngle'])/_0x28af0e;this[_0x13851b(0x534)]--;if(this[_0x13851b(0x534)]<=0x0)this[_0x13851b(0xa5a)]();},Sprite_Battler['prototype']['onAngleEnd']=function(){const _0x310fd7=_0x35b5eb;this[_0x310fd7(0x6ae)]=this[_0x310fd7(0x362)];if(this[_0x310fd7(0x32f)]){if('CWYaP'===_0x310fd7(0x704)){const _0x213574=_0x310fd7(0xa63)[_0x310fd7(0x4ed)](_0x55f96f);_0x244268[_0x310fd7(0x781)]['JS'][_0x2b818a]=new _0x4cb915(_0x213574);}else this['_targetAngle']=0x0,this['_currentAngle']=0x0;}},Sprite_Battler[_0x35b5eb(0x73b)]['isSpinning']=function(){const _0x22dbcf=_0x35b5eb;return this[_0x22dbcf(0x534)]>0x0;},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x449)]=function(){const _0x1380a8=_0x35b5eb;if(!this['_distortionSprite'])return;const _0x42ac08=this[_0x1380a8(0x6ae)],_0x4e2cc5=this[_0x1380a8(0xac1)]['x'],_0x30cb9e=this['_battler']['isActor']()?-0x1:0x1;this[_0x1380a8(0xa26)][_0x1380a8(0x313)]=_0x42ac08*_0x4e2cc5*_0x30cb9e;const _0x26f0f6=this[_0x1380a8(0xa26)]['scale']['y'];this[_0x1380a8(0xa26)]['y']=this['height']*-0.5*(0x2-_0x26f0f6),this[_0x1380a8(0xa26)]['y']=Math['ceil'](this[_0x1380a8(0xa26)]['y']);const _0x4b1f90=[this['_mainSprite'],this['_svBattlerSprite'],this[_0x1380a8(0x36f)]];for(const _0x4c6944 of _0x4b1f90){if(_0x1380a8(0x789)!==_0x1380a8(0x789))_0x5da733=_0x327204[_0x1380a8(0x6df)];else{if(!_0x4c6944)continue;_0x4c6944['y']=this[_0x1380a8(0x491)]*0.5;}}this[_0x1380a8(0xa3c)]&&(this[_0x1380a8(0x1c4)]=this[_0x1380a8(0x1c4)]??0x1,this[_0x1380a8(0xa8d)]=this[_0x1380a8(0xa8d)]??0x1,this['_shadowSprite'][_0x1380a8(0xac1)]['x']=this['_distortionSprite'][_0x1380a8(0xac1)]['x']*this[_0x1380a8(0x1c4)],this[_0x1380a8(0xa3c)][_0x1380a8(0xac1)]['y']=this[_0x1380a8(0xa26)][_0x1380a8(0xac1)]['y']*this['_shadowScaleY']);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0xa8b)]=Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x69d)],Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x69d)]=function(){const _0x3c7e20=_0x35b5eb;VisuMZ[_0x3c7e20(0x781)][_0x3c7e20(0xa8b)][_0x3c7e20(0x541)](this);if(VisuMZ['BattleCore'][_0x3c7e20(0x3cb)][_0x3c7e20(0x478)][_0x3c7e20(0x694)]){if(_0x3c7e20(0x525)!==_0x3c7e20(0x49d))this[_0x3c7e20(0xb11)]();else return _0x5d417a['BattleCore'][_0x3c7e20(0x411)][_0x3c7e20(0x541)](this,_0x35d478);}},VisuMZ['BattleCore'][_0x35b5eb(0xf6)]=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x9fd)],Sprite_Enemy['prototype'][_0x35b5eb(0x9fd)]=function(){const _0x1b2015=_0x35b5eb;VisuMZ[_0x1b2015(0x781)]['Settings'][_0x1b2015(0x478)]['ShowEnemyGauge']&&(_0x1b2015(0x3b2)==='IDMdY'?(_0x57882a[_0x1b2015(0x73b)][_0x1b2015(0x255)]['call'](this,_0x5a1318),this[_0x1b2015(0x897)](this[_0x1b2015(0xa03)]()),this[_0x1b2015(0x129)]()):this[_0x1b2015(0xb11)]()),VisuMZ[_0x1b2015(0x781)][_0x1b2015(0xf6)][_0x1b2015(0x541)](this);},Sprite_Battler[_0x35b5eb(0x73b)]['createHpGaugeSprite']=function(){const _0x16cbd7=_0x35b5eb;if(!ConfigManager[_0x16cbd7(0x777)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x75b6aa=VisuMZ[_0x16cbd7(0x781)][_0x16cbd7(0x3cb)]['HpGauge'],_0x590465=new Sprite_HpGauge();_0x590465[_0x16cbd7(0xabd)]['x']=_0x75b6aa[_0x16cbd7(0x927)],_0x590465['anchor']['y']=_0x75b6aa[_0x16cbd7(0x749)],_0x590465[_0x16cbd7(0xac1)]['x']=_0x590465['scale']['y']=_0x75b6aa[_0x16cbd7(0x274)],this[_0x16cbd7(0x19c)]=_0x590465,this[_0x16cbd7(0x835)](this[_0x16cbd7(0x19c)]),Spriteset_Battle[_0x16cbd7(0x2f8)]&&BattleManager['addChildToUiContainer'](this['_hpGaugeSprite']);},VisuMZ[_0x35b5eb(0x781)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x6f5)],Sprite_Battler['prototype'][_0x35b5eb(0x6f5)]=function(_0x5ec5c9){const _0x18f6fb=_0x35b5eb,_0xfb1501=this[_0x18f6fb(0xb0d)];VisuMZ['BattleCore'][_0x18f6fb(0x818)][_0x18f6fb(0x541)](this,_0x5ec5c9),this[_0x18f6fb(0x8c8)](_0x5ec5c9);if(_0xfb1501!==_0x5ec5c9)this[_0x18f6fb(0xb1a)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x8c8)]=function(_0x944ee9){const _0x39ae6b=_0x35b5eb;if(!_0x944ee9)return;if(!this['_hpGaugeSprite'])return;if(_0x944ee9[_0x39ae6b(0xa6f)]()){}else{if(_0x944ee9[_0x39ae6b(0x65c)]()){if(this[_0x39ae6b(0x62e)]===Sprite_SvEnemy&&!_0x944ee9['hasSvBattler']())return;}}this['_hpGaugeSprite'][_0x39ae6b(0x65b)](_0x944ee9,'hp');},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x8c2)]=function(){const _0x368f3d=_0x35b5eb;return this[_0x368f3d(0xb0d)]&&this[_0x368f3d(0xb0d)][_0x368f3d(0x8c2)]();},Sprite_Battler[_0x35b5eb(0x73b)]['updateStaticSvBattlerFrames']=function(){const _0x460187=_0x35b5eb,_0xbecaf8=this[_0x460187(0x3d4)]['bitmap'];if(!_0xbecaf8)return;const _0x3ae9f0=_0xbecaf8[_0x460187(0x91c)];let _0x1e2ec9=_0xbecaf8[_0x460187(0x491)];if(this[_0x460187(0xb0d)][_0x460187(0x1b2)]()){if(this[_0x460187(0xa7c)])_0x1e2ec9=Math['max'](0x0,this['_frame'][_0x460187(0x491)]-0x4);}this['_mainSprite'][_0x460187(0x154)](0x0,0x0,_0x3ae9f0,_0x1e2ec9),this['setFrame'](0x0,0x0,_0x3ae9f0,_0x1e2ec9);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0xa97)]=function(){const _0x56a4e5=_0x35b5eb;if(!this[_0x56a4e5(0xb0d)])return;if(!this[_0x56a4e5(0x19c)])return;const _0x15a3c0=VisuMZ[_0x56a4e5(0x781)][_0x56a4e5(0x3cb)][_0x56a4e5(0x478)],_0x1fbb79=this['_hpGaugeSprite'];_0x1fbb79[_0x56a4e5(0x17f)]=this[_0x56a4e5(0x5de)]();const _0x149f17=_0x15a3c0['OffsetX'],_0x398ea7=_0x15a3c0[_0x56a4e5(0x3d9)];_0x1fbb79['x']=_0x149f17,_0x1fbb79['x']+=this[_0x56a4e5(0xb0d)][_0x56a4e5(0xe2)](),_0x1fbb79['y']=-this[_0x56a4e5(0x491)]+_0x398ea7,_0x1fbb79['y']+=this[_0x56a4e5(0xb0d)][_0x56a4e5(0x8db)](),Spriteset_Battle[_0x56a4e5(0x2f8)]&&SceneManager[_0x56a4e5(0x885)][_0x56a4e5(0x254)]&&(_0x1fbb79['x']+=this['x'],_0x1fbb79['y']+=this['y']);},Sprite_Battler['prototype'][_0x35b5eb(0x5de)]=function(){const _0x454d61=_0x35b5eb;if(!this[_0x454d61(0xb0d)])return![];if(this[_0x454d61(0xb0d)]['isActor']())return!![];if(this['_battler'][_0x454d61(0x760)]())return![];if(this[_0x454d61(0x1be)]<=0x0)return![];const _0x45ad6b=this[_0x454d61(0xb0d)][_0x454d61(0x81d)]()['note'];if(_0x45ad6b['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x45ad6b[_0x454d61(0x111)](/<HIDE HP GAUGE>/i))return![];const _0x517a61=VisuMZ['BattleCore'][_0x454d61(0x3cb)][_0x454d61(0x478)];if(_0x517a61[_0x454d61(0x2bb)]){if(_0x517a61[_0x454d61(0x1fa)]&&BattleManager['isBattleTest']())return!![];if(this['_battler']['_visualHpGauge_JustDied'])return![];return this['_battler'][_0x454d61(0x7ef)]();}return!![];},VisuMZ['BattleCore'][_0x35b5eb(0x9a4)]=Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x298)],Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x298)]=function(){const _0x586adb=_0x35b5eb;if(!this[_0x586adb(0xb0d)])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x586adb(0x781)][_0x586adb(0x9a4)][_0x586adb(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x33f)]=Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x413)],Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x413)]=function(_0x180f93,_0x42eb91,_0x41183f){const _0x3549e3=_0x35b5eb;this[_0x3549e3(0x5a6)]()&&VisuMZ[_0x3549e3(0x781)][_0x3549e3(0x33f)][_0x3549e3(0x541)](this,_0x180f93,_0x42eb91,_0x41183f);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x5a6)]=function(){const _0x512023=_0x35b5eb;if(this[_0x512023(0xb0d)]&&this[_0x512023(0xb0d)][_0x512023(0x1b2)]())return![];if(this[_0x512023(0xb0d)]&&!this[_0x512023(0xb0d)][_0x512023(0x271)]())return![];return $gameSystem[_0x512023(0x9b9)]();},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x2ed)]=function(){},Sprite_Battler[_0x35b5eb(0x73b)]['stepBack']=function(){const _0x3099fe=_0x35b5eb;this[_0x3099fe(0x413)](0x0,0x0,0xc);},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x149)]=function(){},Sprite_Battler[_0x35b5eb(0x73b)][_0x35b5eb(0x1bd)]=function(){const _0x58debf=_0x35b5eb,_0x4d310a=VisuMZ['BattleCore']['Settings'][_0x58debf(0xb22)],_0x400be8=this['_battler']&&this[_0x58debf(0xb0d)][_0x58debf(0xa6f)]()?0x1:-0x1,_0x2ef1ac=this[_0x58debf(0x74d)]-this['_homeX']+_0x400be8*_0x4d310a[_0x58debf(0x2d6)],_0x36cda9=this[_0x58debf(0x740)]-this['_homeY']+_0x400be8*_0x4d310a[_0x58debf(0x253)],_0x59d455=_0x4d310a[_0x58debf(0x8f0)];this[_0x58debf(0x413)](_0x2ef1ac,_0x36cda9,_0x59d455);},VisuMZ[_0x35b5eb(0x781)]['Sprite_Actor_initMembers']=Sprite_Actor['prototype']['initMembers'],Sprite_Actor[_0x35b5eb(0x73b)]['initMembers']=function(){const _0x26f54e=_0x35b5eb;VisuMZ[_0x26f54e(0x781)][_0x26f54e(0x5a5)][_0x26f54e(0x541)](this),this[_0x26f54e(0x74f)]();},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x63b)]=function(){const _0x3b821c=_0x35b5eb;return this[_0x3b821c(0xa26)]||this[_0x3b821c(0x3d4)]||this;},VisuMZ['BattleCore'][_0x35b5eb(0x8f3)]=Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x248)],Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x248)]=function(){},Sprite_Actor['prototype'][_0x35b5eb(0x252)]=function(_0x49958f){const _0x11fdb6=_0x35b5eb;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x49958f)return;if(!_0x49958f[_0x11fdb6(0x5a6)]())return;VisuMZ[_0x11fdb6(0x781)][_0x11fdb6(0x8f3)][_0x11fdb6(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x585)]=Sprite_Actor[_0x35b5eb(0x73b)]['setActorHome'],Sprite_Actor['prototype'][_0x35b5eb(0x16e)]=function(_0x26dd01){const _0x442d64=_0x35b5eb;VisuMZ[_0x442d64(0x781)][_0x442d64(0x3cb)][_0x442d64(0xb22)][_0x442d64(0x647)]?VisuMZ[_0x442d64(0x781)][_0x442d64(0x3cb)]['Actor'][_0x442d64(0x647)]['call'](this,_0x26dd01):'vLMmX'==='xwvFE'?_0x3e8f15[_0x442d64(0x781)]['JS'][_0x3fade6][_0x442d64(0x541)](this,this,this,_0x10cb61,0x0):VisuMZ[_0x442d64(0x781)]['Sprite_Actor_setActorHome'][_0x442d64(0x541)](this,_0x26dd01);},VisuMZ['BattleCore'][_0x35b5eb(0xaa6)]=Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x6f5)],Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x6f5)]=function(_0x911a92){const _0x514eca=_0x35b5eb;VisuMZ['BattleCore'][_0x514eca(0xaa6)]['call'](this,_0x911a92),this['setBattlerBattleCore'](_0x911a92);},Sprite_Actor[_0x35b5eb(0x73b)]['setBattlerBattleCore']=function(_0x2c1272){const _0x59b9d8=_0x35b5eb;if(!_0x2c1272)return;if(!this['_mainSprite'])return;this[_0x59b9d8(0x3d4)][_0x59b9d8(0xabd)]['x']=this[_0x59b9d8(0x238)]['svBattlerAnchorX'](),this['_mainSprite']['anchor']['y']=this[_0x59b9d8(0x238)][_0x59b9d8(0x4a3)](),this[_0x59b9d8(0x360)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x8a7)]=Sprite_Actor['prototype'][_0x35b5eb(0x9de)],Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x9de)]=function(){const _0x29bddc=_0x35b5eb;VisuMZ[_0x29bddc(0x781)]['Sprite_Actor_update']['call'](this),this[_0x29bddc(0x238)]&&(this['updateStateSprite'](),this[_0x29bddc(0x34e)]());},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x713)]=Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xe6)],Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xe6)]=function(){const _0x59767e=_0x35b5eb;VisuMZ[_0x59767e(0x781)][_0x59767e(0x713)]['call'](this),this[_0x59767e(0x3d4)]&&this[_0x59767e(0x3d4)][_0x59767e(0x89a)]&&this['_battler']&&(this[_0x59767e(0x3d4)][_0x59767e(0x89a)][_0x59767e(0x306)]!==this[_0x59767e(0xb0d)][_0x59767e(0x231)]()&&(this[_0x59767e(0x3d4)][_0x59767e(0x89a)]['smooth']=this['_battler'][_0x59767e(0x231)]()));},VisuMZ['BattleCore']['Sprite_Actor_updateShadow']=Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x896)],Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x896)]=function(){const _0x59f7d4=_0x35b5eb;VisuMZ[_0x59f7d4(0x781)][_0x59f7d4(0x1a7)][_0x59f7d4(0x541)](this),this[_0x59f7d4(0x6d4)]();},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x6d4)]=function(){const _0x8854dd=_0x35b5eb;if(!this[_0x8854dd(0x3d4)])return;if(!this[_0x8854dd(0xa3c)])return;this[_0x8854dd(0x360)](),this['updateShadowPosition']();},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x403)]=function(){const _0x300b7d=_0x35b5eb;this[_0x300b7d(0xb15)][_0x300b7d(0xac1)]['x']=0x1/(this['scale']['x']||0.001),this[_0x300b7d(0xb15)][_0x300b7d(0xac1)]['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x34e)]=function(){const _0x1d3975=_0x35b5eb;if(!$gameSystem[_0x1d3975(0x9b9)]()&&this[_0x1d3975(0x62e)]===Sprite_Actor){const _0x48c68a=Scene_Battle['prototype'][_0x1d3975(0xd6)]();[_0x1d3975(0x472),_0x1d3975(0x8d0),_0x1d3975(0xf2),'border']['includes'](_0x48c68a)&&('LWHSG'!==_0x1d3975(0xae1)?this[_0x1d3975(0xbe)]['visible']=this[_0x1d3975(0x1e5)]():this[_0x1d3975(0x1be)]=0x0);}},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x1d2)]=function(){const _0x145fb2=_0x35b5eb,_0x2013ab=this['_actor'];if(_0x2013ab){const _0x5dc614=_0x2013ab[_0x145fb2(0x259)]();if(_0x2013ab[_0x145fb2(0x38e)]()||_0x2013ab[_0x145fb2(0x7f0)]())this[_0x145fb2(0x5d1)]('walk');else{if(_0x5dc614===0x3)this[_0x145fb2(0x5d1)](_0x145fb2(0x9e4));else{if(_0x5dc614===0x2)this[_0x145fb2(0x5d1)](_0x145fb2(0x571));else{if(this[_0x145fb2(0x342)])'vlBrg'===_0x145fb2(0x8c0)?this[_0x145fb2(0x5d1)]('escape'):[0x6c,0x198][_0x145fb2(0x87d)](_0x2ca27e['code'])&&(_0x51accf+='\x0a',_0x2798a7+=_0x17825f[_0x145fb2(0x75c)][0x0]);else{if(_0x2013ab[_0x145fb2(0x139)]())this[_0x145fb2(0x5d1)](_0x145fb2(0x17d));else{if(_0x2013ab[_0x145fb2(0x55d)]())_0x145fb2(0x1ec)!==_0x145fb2(0x25d)?this[_0x145fb2(0x5d1)](_0x145fb2(0x29d)):(_0x29cc53[_0x145fb2(0x781)][_0x145fb2(0xfc)]&&_0xef8e5b['BattleCore']['ParseStateNotetags'][_0x145fb2(0x541)](this,_0x17d6a1),_0x39b8a5[_0x145fb2(0x781)][_0x145fb2(0x3ce)](_0xc40cac));else{if(_0x2013ab['isGuard']()||_0x2013ab[_0x145fb2(0x911)]())this[_0x145fb2(0x5d1)](_0x145fb2(0x6de));else{if(_0x5dc614===0x1)this[_0x145fb2(0x5d1)](_0x145fb2(0x1c8));else{if(_0x2013ab['isDying']())_0x145fb2(0x2bc)==='SHOrJ'?this[_0x145fb2(0x5d1)](_0x145fb2(0x66d)):_0x560625[_0x145fb2(0x781)][_0x145fb2(0x4ca)][_0x145fb2(0x541)](this);else{if(_0x2013ab[_0x145fb2(0x9cc)]())this['startMotion'](_0x145fb2(0x7b9));else _0x2013ab['currentAction']()?this[_0x145fb2(0x5d1)]('wait'):this[_0x145fb2(0x5d1)](_0x145fb2(0x7b9));}}}}}}}}}}},Sprite_Actor[_0x35b5eb(0x73b)]['retreat']=function(){const _0x17653a=0xa,_0x3ed723=0x12c*_0x17653a,_0x3186d2=0x1e*_0x17653a;this['startMove'](_0x3ed723,0x0,_0x3186d2);},Sprite_Actor[_0x35b5eb(0x73b)]['onMoveEnd']=function(){const _0x696557=_0x35b5eb;Sprite_Battler['prototype']['onMoveEnd'][_0x696557(0x541)](this);},Sprite_Actor[_0x35b5eb(0x73b)]['motionSpeed']=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x35b5eb(0x73b)]['animationWait']=function(){const _0x2e88b6=_0x35b5eb;return Sprite_Battler[_0x2e88b6(0xa72)];},Sprite_Actor['prototype']['setupMotion']=function(){},Sprite_Actor[_0x35b5eb(0x73b)]['setupWeaponAnimation']=function(){},Sprite_Actor[_0x35b5eb(0x73b)]['updateMotionCount']=function(){const _0x3394ff=_0x35b5eb;if(this[_0x3394ff(0x8af)]&&++this['_motionCount']>=this[_0x3394ff(0xad4)]()){if(this[_0x3394ff(0x8af)]['loop'])this[_0x3394ff(0xa02)]=(this[_0x3394ff(0xa02)]+0x1)%0x4;else this[_0x3394ff(0xa02)]<0x2?this[_0x3394ff(0xa02)]++:_0x3394ff(0x21b)!==_0x3394ff(0x21b)?this['startMotion'](_0x3394ff(0x17d)):this['refreshMotion']();this[_0x3394ff(0x314)]=0x0;}},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x2ce)]=function(_0x37d63f){const _0x5e2d04=_0x35b5eb;if(_0x37d63f==='victory')this[_0x5e2d04(0x4f6)]=!![];if(this[_0x5e2d04(0xb0d)]&&this[_0x5e2d04(0xb0d)]['isDead']()){this[_0x5e2d04(0x8af)]=Sprite_Actor[_0x5e2d04(0x2a7)][_0x5e2d04(0x9e4)];return;}const _0x41e776=Sprite_Actor[_0x5e2d04(0x2a7)][_0x37d63f];this[_0x5e2d04(0x8af)]=_0x41e776,this[_0x5e2d04(0x314)]=0x0,this[_0x5e2d04(0xa02)]=0x0;},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x410)]=function(_0x249d90){const _0x468731=_0x35b5eb;if(this[_0x468731(0x8c2)]())return;this['adjustWeaponSpriteOffset'](),this['_weaponSprite']['setup'](_0x249d90),this['_actor']['clearWeaponAnimation']();},Sprite_Actor[_0x35b5eb(0x73b)]['adjustWeaponSpriteOffset']=function(){const _0x375caf=_0x35b5eb;let _0x4b620b=-0x10,_0xc35ba=this[_0x375caf(0x491)]*0.5;const _0x587578=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x5c7876=this[_0x375caf(0xb0d)][_0x375caf(0x46d)]()[_0x375caf(0x3dd)](_0x1b5636=>_0x1b5636&&_0x1b5636[_0x375caf(0x7fd)][_0x375caf(0x111)](_0x587578)?Number(RegExp['$1']):0x0),_0x3fbd1d=this['_battler'][_0x375caf(0x46d)]()[_0x375caf(0x3dd)](_0x492bd9=>_0x492bd9&&_0x492bd9[_0x375caf(0x7fd)][_0x375caf(0x111)](_0x587578)?Number(RegExp['$2']):0x0);_0x4b620b=_0x5c7876[_0x375caf(0x469)]((_0x1f9764,_0x36ea09)=>_0x1f9764+_0x36ea09,_0x4b620b),_0xc35ba=_0x3fbd1d['reduce']((_0x58488f,_0x1ba7e9)=>_0x58488f+_0x1ba7e9,_0xc35ba),this[_0x375caf(0x7a6)]['x']=_0x4b620b,this[_0x375caf(0x7a6)]['y']=_0xc35ba,this[_0x375caf(0x7a6)]['update']();},Sprite_Weapon[_0x35b5eb(0x73b)][_0x35b5eb(0x65b)]=function(_0x12c305){const _0x279d2c=_0x35b5eb;this[_0x279d2c(0x60a)]=_0x12c305,this['_animationCount']=-0x1,this[_0x279d2c(0xa02)]=0x0,this[_0x279d2c(0x205)](),this['updateFrame']();},Sprite_Actor[_0x35b5eb(0x73b)]['updateTargetPosition']=function(){},Sprite_Actor['prototype']['stepForward']=function(){const _0x29b02e=_0x35b5eb,_0x176da7=VisuMZ[_0x29b02e(0x781)][_0x29b02e(0x3cb)]['ActionSequence'],_0x2955d5=_0x176da7[_0x29b02e(0xf7)],_0x1a2563=_0x176da7[_0x29b02e(0x9ff)],_0x379c3e=_0x176da7[_0x29b02e(0xa48)];this[_0x29b02e(0x413)](-_0x2955d5,-_0x1a2563,_0x379c3e);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x9ea)]=Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xd5)],Sprite_Actor['prototype']['updateFrame']=function(){const _0x355510=_0x35b5eb;if(this[_0x355510(0x8c2)]())'dyoRI'===_0x355510(0xad7)?this['_attackAnimationId']=_0x207adf(_0x9436ac['$1']):this[_0x355510(0x4aa)]();else{if(_0x355510(0x51c)!==_0x355510(0x51c)){const _0x1503cc=_0x3967ec[_0x355510(0x781)]['Settings']['BattleLayout'];if(_0x1503cc[_0x355510(0x529)]){const _0x3b7d90=new _0x525a01();_0x3b7d90[_0x355510(0x89a)]=_0x26936c['loadSystem'](_0x1503cc[_0x355510(0x529)]),_0x3b7d90['x']=_0x1503cc[_0x355510(0x37d)]||0x0,_0x3b7d90['y']=_0x1503cc[_0x355510(0x985)]||0x0,this[_0x355510(0x759)](_0x3b7d90),this[_0x355510(0x9eb)]=_0x3b7d90;}if(_0x1503cc[_0x355510(0x485)]){const _0x3eeb54=new _0x41bcb4();_0x3eeb54[_0x355510(0x89a)]=_0x44f745[_0x355510(0x4e7)](_0x1503cc['StatusWindowAttachmentFront']),_0x3eeb54['x']=_0x1503cc[_0x355510(0x23c)]||0x0,_0x3eeb54['y']=_0x1503cc[_0x355510(0x3d6)]||0x0,this['addChild'](_0x3eeb54),this['_frontAttachmentSprite']=_0x3eeb54;}}else this[_0x355510(0xaad)](),VisuMZ[_0x355510(0x781)][_0x355510(0x9ea)][_0x355510(0x541)](this);}},Sprite_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0xaad)]=function(){const _0x429831=_0x35b5eb;if(this[_0x429831(0xb0d)]&&this[_0x429831(0xb0d)]['_freezeMotionData']){const _0x3dbb80=this[_0x429831(0xb0d)][_0x429831(0x9c2)];this['_motion']=Sprite_Actor[_0x429831(0x2a7)][_0x3dbb80[_0x429831(0x889)]],this[_0x429831(0xa02)]=_0x3dbb80[_0x429831(0x8dd)];const _0x4c22e2=this[_0x429831(0x7a6)];_0x4c22e2[_0x429831(0x346)](_0x3dbb80[_0x429831(0x8c4)],_0x3dbb80['pattern']),this[_0x429831(0x815)]();}},Sprite_Weapon['prototype'][_0x35b5eb(0x346)]=function(_0xd0e461,_0x4c17f7){const _0x1b6615=_0x35b5eb;this['_weaponImageId']=_0xd0e461,this[_0x1b6615(0xada)]=-Infinity,this[_0x1b6615(0xa02)]=_0x4c17f7,this[_0x1b6615(0x205)](),this['updateFrame']();},Sprite_Enemy[_0x35b5eb(0x73b)]['initMembers']=function(){const _0x4bc472=_0x35b5eb;Sprite_Battler[_0x4bc472(0x73b)][_0x4bc472(0x186)][_0x4bc472(0x541)](this),this[_0x4bc472(0x64d)]=null,this['_appeared']=![],this[_0x4bc472(0x260)]='',this[_0x4bc472(0x488)]=0x0,this[_0x4bc472(0x12c)]=null,this[_0x4bc472(0x8d5)]=0x0,this[_0x4bc472(0x894)]=0x0,this[_0x4bc472(0x25c)](),this[_0x4bc472(0x9fd)]();},VisuMZ[_0x35b5eb(0x781)]['Sprite_Enemy_update']=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x9de)],Sprite_Enemy[_0x35b5eb(0x73b)]['update']=function(){const _0x280558=_0x35b5eb;VisuMZ[_0x280558(0x781)]['Sprite_Enemy_update'][_0x280558(0x541)](this),this[_0x280558(0x360)]();},Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x25c)]=function(){const _0x4ce679=_0x35b5eb;this['_mainSprite']=new Sprite(),this[_0x4ce679(0x3d4)][_0x4ce679(0xabd)]['x']=0.5,this['_mainSprite'][_0x4ce679(0xabd)]['y']=0x1,this['addChild'](this[_0x4ce679(0x3d4)]),this[_0x4ce679(0x74f)]();},Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x63b)]=function(){const _0x3b6274=_0x35b5eb;return this[_0x3b6274(0xa26)]||this['_mainSprite']||this;},Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x205)]=function(_0x5ee880){const _0x32985a=_0x35b5eb;this[_0x32985a(0x89a)]=new Bitmap(0x1,0x1);if(this[_0x32985a(0xae6)]()){const _0x532498=this[_0x32985a(0x64d)][_0x32985a(0x4b9)]();this[_0x32985a(0x89a)]=new Bitmap(_0x532498[_0x32985a(0x91c)],_0x532498[_0x32985a(0x491)]),this['_mainSprite'][_0x32985a(0x89a)]=new Bitmap(0x1,0x1);}else $gameSystem[_0x32985a(0x9b9)]()?(this[_0x32985a(0x3d4)][_0x32985a(0x89a)]=ImageManager[_0x32985a(0x3b6)](_0x5ee880),this['_mainSprite'][_0x32985a(0x89a)][_0x32985a(0x7ea)](this[_0x32985a(0x54c)][_0x32985a(0x4eb)](this))):(this[_0x32985a(0x3d4)]['bitmap']=ImageManager[_0x32985a(0x308)](_0x5ee880),this[_0x32985a(0x3d4)][_0x32985a(0x89a)][_0x32985a(0x7ea)](this[_0x32985a(0x54c)][_0x32985a(0x4eb)](this)));},Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x54c)]=function(){const _0x3d9a8d=_0x35b5eb,_0x5656a9=this[_0x3d9a8d(0x3d4)]['bitmap'];_0x5656a9&&(_0x3d9a8d(0x27a)!=='jJTkO'?(_0x354646--,_0x482ca4++):this['bitmap']=new Bitmap(_0x5656a9[_0x3d9a8d(0x91c)],_0x5656a9[_0x3d9a8d(0x491)]));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x2f2)]=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x1eb)],Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x1eb)]=function(_0x3d8b22){const _0xe9353f=_0x35b5eb;this['_mainSprite']&&(_0xe9353f(0x103)==='DBpMy'?this['_mainSprite']['setHue'](_0x3d8b22):this[_0xe9353f(0x67a)](_0xe9353f(0x21d)));},VisuMZ[_0x35b5eb(0x781)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x678)],Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x678)]=function(){const _0x5b7ffb=_0x35b5eb;this[_0x5b7ffb(0x3c5)]()?VisuMZ[_0x5b7ffb(0x781)][_0x5b7ffb(0x4ca)]['call'](this):(this[_0x5b7ffb(0x906)]=!this[_0x5b7ffb(0x64d)][_0x5b7ffb(0x760)](),!this['_appeared']&&(this[_0x5b7ffb(0x1be)]=0x0));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x18a)]=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x6e6)],Sprite_Enemy['prototype'][_0x35b5eb(0x6e6)]=function(){const _0x43c57d=_0x35b5eb;if(this[_0x43c57d(0x3c5)]())VisuMZ[_0x43c57d(0x781)]['Sprite_Enemy_updateCollapse'][_0x43c57d(0x541)](this);},Sprite_Enemy['prototype'][_0x35b5eb(0xd5)]=function(){const _0x3f100a=_0x35b5eb;Sprite_Battler[_0x3f100a(0x73b)][_0x3f100a(0xd5)][_0x3f100a(0x541)](this);const _0x5da526=this[_0x3f100a(0x63b)]()||this;if(!_0x5da526)return;if(!_0x5da526[_0x3f100a(0x89a)]){if(_0x3f100a(0x194)!==_0x3f100a(0x703))_0x5da526[_0x3f100a(0x89a)]=new Bitmap(this[_0x3f100a(0x91c)],this[_0x3f100a(0x491)]);else{if(this[_0x3f100a(0x538)]()>=0x1)return!![];return this[_0x3f100a(0x4b9)]()[_0x3f100a(0x71a)];}}this['_effectType']==='bossCollapse'?this['_mainSprite']['setFrame'](0x0,0x0,this[_0x3f100a(0x3d4)][_0x3f100a(0x91c)],this[_0x3f100a(0x8d5)]):_0x5da526['setFrame'](0x0,0x0,_0x5da526['bitmap']['width'],this[_0x3f100a(0x89a)][_0x3f100a(0x491)]);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x85a)]=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x3af)],Sprite_Enemy['prototype'][_0x35b5eb(0x3af)]=function(){const _0x543b64=_0x35b5eb;if(this[_0x543b64(0x3c5)]())VisuMZ[_0x543b64(0x781)][_0x543b64(0x85a)][_0x543b64(0x541)](this);},Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x298)]=function(){const _0x52b113=_0x35b5eb;return Sprite_Battler[_0x52b113(0x73b)][_0x52b113(0x298)][_0x52b113(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x54e)]=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x403)],Sprite_Enemy[_0x35b5eb(0x73b)]['updateStateSprite']=function(){const _0x48501c=_0x35b5eb;VisuMZ[_0x48501c(0x781)]['Sprite_Enemy_updateStateSprite'][_0x48501c(0x541)](this),this[_0x48501c(0x5e9)]();},Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x5e9)]=function(){const _0x2c3ad3=_0x35b5eb,_0xa2c069=VisuMZ[_0x2c3ad3(0x781)][_0x2c3ad3(0x3cb)]['Enemy'];if(_0xa2c069[_0x2c3ad3(0x624)]&&!_0xa2c069[_0x2c3ad3(0x458)]){if(_0x2c3ad3(0x212)===_0x2c3ad3(0x212)){this[_0x2c3ad3(0x59a)][_0x2c3ad3(0x1be)]=0x0;return;}else _0x6aad37&&_0x17e8d2[_0x2c3ad3(0xa6f)]()&&_0x1dc2f7[_0x2c3ad3(0x8e9)](),this['callNextMethod']();}this[_0x2c3ad3(0x59a)]['x']=0x0,this[_0x2c3ad3(0x59a)]['x']+=this[_0x2c3ad3(0xb0d)][_0x2c3ad3(0xe2)](),this[_0x2c3ad3(0x59a)]['y']=-this['bitmap'][_0x2c3ad3(0x491)]-this[_0x2c3ad3(0x59a)][_0x2c3ad3(0x491)]-0x4,this[_0x2c3ad3(0x59a)]['y']+=this['_battler']['battleUIOffsetY'](),this[_0x2c3ad3(0x59a)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x2c3ad3(0x59a)][_0x2c3ad3(0xac1)]['y']=0x1/(this[_0x2c3ad3(0xac1)]['y']||0.001),this[_0x2c3ad3(0xae6)]()&&(this['_svBattlerSprite'][_0x2c3ad3(0xb15)][_0x2c3ad3(0xac1)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x2c3ad3(0x548)][_0x2c3ad3(0xb15)][_0x2c3ad3(0xac1)]['y']=0x1/(this[_0x2c3ad3(0xac1)]['y']||0.001));},VisuMZ[_0x35b5eb(0x781)]['Sprite_Enemy_setBattler']=Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x6f5)],Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0x6f5)]=function(_0x2d0f7d){const _0xb57e22=_0x35b5eb;VisuMZ[_0xb57e22(0x781)]['Sprite_Enemy_setBattler'][_0xb57e22(0x541)](this,_0x2d0f7d),this[_0xb57e22(0x1ca)](_0x2d0f7d);},Sprite_Enemy['prototype'][_0x35b5eb(0x1ca)]=function(_0x3272a2){const _0x104306=_0x35b5eb;!this[_0x104306(0x548)]&&('UZFmO'!==_0x104306(0x630)?(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x3272a2),this[_0x104306(0x74f)]()):_0x20ea29[_0x104306(0x781)][_0x104306(0x50b)][_0x104306(0x541)](this,_0x34b043)),this['_svBattlerSprite']['setBattler'](_0x3272a2);},Sprite_Enemy[_0x35b5eb(0x73b)][_0x35b5eb(0xae6)]=function(){const _0x4e6e3b=_0x35b5eb;return this['_enemy']&&this[_0x4e6e3b(0x64d)][_0x4e6e3b(0xae6)]();},Sprite_Enemy[_0x35b5eb(0x73b)]['allowCollapse']=function(){const _0x1da536=_0x35b5eb;if(this[_0x1da536(0xae6)]())return this[_0x1da536(0x64d)]['allowCollapse']();else{if(_0x1da536(0x741)!==_0x1da536(0x825))return!![];else _0x77753e[_0x1da536(0x781)][_0x1da536(0x7e8)][_0x1da536(0x541)](this);}},Sprite_Enemy['prototype']['refreshMotion']=function(){const _0x577b86=_0x35b5eb;if(this[_0x577b86(0xae6)]()){if('Avksk'!==_0x577b86(0x907))this['_svBattlerSprite'][_0x577b86(0x1d2)]();else return _0x18ad92[_0x577b86(0x781)][_0x577b86(0x3cb)][_0x577b86(0x165)][_0x577b86(0xa7d)][_0x577b86(0x541)](this,_0x50162e,_0xa36cd);}},Sprite_Enemy['prototype'][_0x35b5eb(0x2ce)]=function(_0x288655){const _0x6cff22=_0x35b5eb;if(this[_0x6cff22(0xae6)]())this['_svBattlerSprite'][_0x6cff22(0x2ce)](_0x288655);},Sprite_Enemy[_0x35b5eb(0x73b)]['forceWeaponAnimation']=function(_0xed3e3d){const _0x5b8579=_0x35b5eb;if(this[_0x5b8579(0xae6)]())this[_0x5b8579(0x548)]['forceWeaponAnimation'](_0xed3e3d);},Sprite_Enemy['prototype'][_0x35b5eb(0x2ed)]=function(){const _0x4d7322=_0x35b5eb,_0x462d81=VisuMZ[_0x4d7322(0x781)][_0x4d7322(0x3cb)]['ActionSequence'],_0x5f3593=_0x462d81[_0x4d7322(0xf7)],_0x26a436=_0x462d81['StepDistanceY'],_0x388203=_0x462d81[_0x4d7322(0xa48)];this[_0x4d7322(0x413)](_0x5f3593,_0x26a436,_0x388203);};function Sprite_SvEnemy(){const _0x31599f=_0x35b5eb;this[_0x31599f(0x255)](...arguments);}Sprite_SvEnemy[_0x35b5eb(0x73b)]=Object[_0x35b5eb(0x800)](Sprite_Actor[_0x35b5eb(0x73b)]),Sprite_SvEnemy['prototype']['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(_0x16cef3){const _0x4a9a1d=_0x35b5eb;Sprite_Actor[_0x4a9a1d(0x73b)][_0x4a9a1d(0x255)][_0x4a9a1d(0x541)](this,_0x16cef3),this['scale']['x']=-0x1,this[_0x4a9a1d(0xb15)][_0x4a9a1d(0xac1)]['x']=-0x1;},Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x59d)]=function(){},Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x248)]=function(){},Sprite_SvEnemy['prototype']['setActorHome']=function(_0xe16762){},Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x896)]=function(){},Sprite_SvEnemy['prototype']['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x35b5eb(0x73b)]['updateStateSprite']=function(){const _0x3e6488=_0x35b5eb;this[_0x3e6488(0xb15)]['visible']=![];},Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0xe6)]=function(){const _0x446c52=_0x35b5eb;Sprite_Battler[_0x446c52(0x73b)][_0x446c52(0xe6)]['call'](this);const _0x24b950=this[_0x446c52(0x238)][_0x446c52(0x5e4)]();this['_battlerName']!==_0x24b950&&(this['_battlerName']=_0x24b950,this[_0x446c52(0x3d4)][_0x446c52(0x89a)]=ImageManager[_0x446c52(0x355)](_0x24b950)),this[_0x446c52(0x3d4)]&&this[_0x446c52(0x3d4)][_0x446c52(0x89a)]&&this['_battler']&&(this[_0x446c52(0x3d4)]['bitmap'][_0x446c52(0x306)]!==this[_0x446c52(0xb0d)][_0x446c52(0x231)]()&&(this[_0x446c52(0x3d4)][_0x446c52(0x89a)]['smooth']=this[_0x446c52(0xb0d)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x149)]=function(){},Sprite_SvEnemy['prototype'][_0x35b5eb(0x413)]=function(_0x3aff34,_0x51f860,_0x51a191){const _0x2fd74a=_0x35b5eb;if(this[_0x2fd74a(0x47b)])this[_0x2fd74a(0x47b)][_0x2fd74a(0x413)](_0x3aff34,_0x51f860,_0x51a191);},Sprite_SvEnemy['prototype'][_0x35b5eb(0x1d2)]=function(){const _0x4d9f5c=_0x35b5eb,_0x1796a5=this[_0x4d9f5c(0x238)];if(_0x1796a5){const _0x35b9c1=_0x1796a5['stateMotionIndex']();if(_0x1796a5[_0x4d9f5c(0x38e)]()||_0x1796a5[_0x4d9f5c(0x7f0)]())this[_0x4d9f5c(0x5d1)](_0x4d9f5c(0x7b9));else{if(_0x35b9c1===0x3)this[_0x4d9f5c(0x5d1)](_0x4d9f5c(0x9e4));else{if(_0x35b9c1===0x2)this[_0x4d9f5c(0x5d1)](_0x4d9f5c(0x571));else{if(_0x1796a5[_0x4d9f5c(0x55d)]())this[_0x4d9f5c(0x5d1)]('chant');else{if(_0x1796a5[_0x4d9f5c(0x80f)]()||_0x1796a5[_0x4d9f5c(0x911)]())this[_0x4d9f5c(0x5d1)](_0x4d9f5c(0x6de));else{if(_0x35b9c1===0x1)this[_0x4d9f5c(0x5d1)](_0x4d9f5c(0x1c8));else{if(_0x1796a5['isDying']())this['startMotion'](_0x4d9f5c(0x66d));else _0x1796a5['isUndecided']()?this[_0x4d9f5c(0x5d1)](_0x4d9f5c(0x7b9)):_0x4d9f5c(0x975)===_0x4d9f5c(0x975)?this[_0x4d9f5c(0x5d1)](_0x1796a5[_0x4d9f5c(0x4b9)]()[_0x4d9f5c(0x6f2)]||_0x4d9f5c(0x7b9)):this[_0x4d9f5c(0x9dd)]();}}}}}}}},Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x3d7)]=function(){const _0x5d90f0=_0x35b5eb;return this[_0x5d90f0(0x47b)]?this[_0x5d90f0(0x47b)]['_offsetX']===0x0&&this['parent'][_0x5d90f0(0xa19)]===0x0:!![];},Sprite_SvEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x662)]=function(){},VisuMZ[_0x35b5eb(0x781)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation[_0x35b5eb(0x73b)][_0x35b5eb(0xac9)],Sprite_Animation['prototype'][_0x35b5eb(0xac9)]=function(_0x26ed70){const _0x80570a=_0x35b5eb;if(_0x26ed70['_distortionSprite'])return this[_0x80570a(0x8cb)](_0x26ed70);else{if(_0x80570a(0xa5c)!=='AxqHM')_0x56aba9['isAttack']()&&_0x5d351[_0x80570a(0xa6f)]()&&this['push']('setActiveWeaponSet',_0x23dd0e,_0x5bc0e9),_0x3f61dd[_0x80570a(0x5d3)]()[_0x80570a(0xaae)]<0x0?this[_0x80570a(0x902)](_0x277aba,_0x7ae428,_0x511f5c):this[_0x80570a(0x5d5)](_0x5454e6,_0x213f64,_0x5cf198);else return VisuMZ['BattleCore'][_0x80570a(0x22c)][_0x80570a(0x541)](this,_0x26ed70);}},Sprite_Animation[_0x35b5eb(0x73b)]['targetDistortionSpritePosition']=function(_0x1dbf6e){const _0x450dc7=_0x35b5eb;let _0x2066fe=_0x1dbf6e['x'],_0x550f3a=_0x1dbf6e['y'],_0xb73ba7=_0x1dbf6e['height'],_0x2ef0a4=_0x1dbf6e[_0x450dc7(0xa26)]['scale']['y'];_0x1dbf6e['x']=_0x1dbf6e[_0x450dc7(0x74d)]+_0x1dbf6e[_0x450dc7(0x7aa)](),_0x1dbf6e['y']=_0x1dbf6e[_0x450dc7(0x740)]+_0x1dbf6e[_0x450dc7(0x8d8)](),_0x1dbf6e[_0x450dc7(0x491)]*=_0x2ef0a4;let _0x3b87b5=VisuMZ[_0x450dc7(0x781)][_0x450dc7(0x22c)][_0x450dc7(0x541)](this,_0x1dbf6e);return _0x1dbf6e['x']=_0x2066fe,_0x1dbf6e['y']=_0x550f3a,_0x1dbf6e[_0x450dc7(0x491)]=_0xb73ba7,_0x3b87b5;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x727)]=Sprite_AnimationMV['prototype'][_0x35b5eb(0x5fc)],Sprite_AnimationMV[_0x35b5eb(0x73b)][_0x35b5eb(0x5fc)]=function(){const _0x234e33=_0x35b5eb;VisuMZ['BattleCore'][_0x234e33(0x727)]['call'](this);if(this[_0x234e33(0x3b3)][_0x234e33(0x5d9)]===0x3){if(this['x']===0x0)this['x']=Math[_0x234e33(0x3d5)](Graphics['width']/0x2);if(this['y']===0x0)this['y']=Math[_0x234e33(0x3d5)](Graphics['height']/0x2);}},Sprite_Damage[_0x35b5eb(0x73b)][_0x35b5eb(0xb2e)]=function(_0x586241){const _0x1664a9=_0x35b5eb,_0x3a3cd3=_0x586241[_0x1664a9(0xb2d)]()||_0x586241[_0x1664a9(0x59e)]();if(_0x3a3cd3[_0x1664a9(0x2cd)]||_0x3a3cd3['evaded'])this[_0x1664a9(0x381)]=0x0,this[_0x1664a9(0x658)]();else{if(_0x3a3cd3[_0x1664a9(0xae5)]){if(_0x1664a9(0x439)==='AGmYs')this[_0x1664a9(0x381)]=_0x3a3cd3[_0x1664a9(0x490)]>=0x0?0x0:0x1,this[_0x1664a9(0x1c1)](_0x3a3cd3[_0x1664a9(0x490)]);else{const _0x1aee11=this[_0x1664a9(0x23f)]['shift'](),_0x2b16f4=_0x1aee11[0x0];return _0x2b16f4[_0x1664a9(0x113)]=_0x2b16f4[_0x1664a9(0x113)]||[],_0x2b16f4[_0x1664a9(0x113)][0x0]=_0x1aee11[0x1],_0x2b16f4;}}else{if(_0x586241[_0x1664a9(0x6fe)]()&&_0x3a3cd3[_0x1664a9(0x1ee)]!==0x0){if(_0x1664a9(0x453)===_0x1664a9(0x453))this[_0x1664a9(0x381)]=_0x3a3cd3['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x3a3cd3[_0x1664a9(0x1ee)]);else{const _0x3b0b28=this[_0x1664a9(0x5d3)]()[_0x1664a9(0xab6)];if(_0x3b0b28[_0x1664a9(0x111)](/RANDOM/i))return![];if(_0x3b0b28[_0x1664a9(0x111)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3b0b28[_0x1664a9(0x111)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return _0xd6189b[_0x1664a9(0x781)][_0x1664a9(0x483)][_0x1664a9(0x541)](this);}}}}_0x3a3cd3['critical']&&this[_0x1664a9(0x2e6)]();},Sprite_Damage[_0x35b5eb(0x73b)][_0x35b5eb(0x65b)]=function(_0x4920a7){},Sprite_Damage['prototype']['createDigits']=function(_0x4ad2f1){const _0x40d18e=_0x35b5eb;let _0x2d56ee=this[_0x40d18e(0x6a9)](_0x4ad2f1);const _0x71a415=this[_0x40d18e(0xaf0)](),_0x4ecfc1=Math[_0x40d18e(0xaaf)](_0x71a415*0.75);for(let _0xbc27ff=0x0;_0xbc27ff<_0x2d56ee[_0x40d18e(0x1a0)];_0xbc27ff++){if(_0x40d18e(0xa8e)!=='nHvoy'){const _0x414081=this['createChildSprite'](_0x4ecfc1,_0x71a415);_0x414081['bitmap'][_0x40d18e(0x891)](_0x2d56ee[_0xbc27ff],0x0,0x0,_0x4ecfc1,_0x71a415,'center'),_0x414081['x']=(_0xbc27ff-(_0x2d56ee['length']-0x1)/0x2)*_0x4ecfc1,_0x414081['dy']=-_0xbc27ff;}else return _0x292c21[_0x40d18e(0x781)][_0x40d18e(0x3cb)][_0x40d18e(0x93c)][_0x40d18e(0x3b8)];}},Sprite_Damage[_0x35b5eb(0x73b)][_0x35b5eb(0x6a9)]=function(_0x213868){const _0x8677ed=_0x35b5eb;let _0x149b98=Math['abs'](_0x213868)[_0x8677ed(0x226)]();this[_0x8677ed(0x6b8)]()&&(_0x149b98=VisuMZ['GroupDigits'](_0x149b98));const _0x5ab71e=VisuMZ[_0x8677ed(0x781)][_0x8677ed(0x3cb)][_0x8677ed(0x165)];let _0x2c9e58='',_0x16c198='';switch(this[_0x8677ed(0x381)]){case 0x0:_0x2c9e58=_0x5ab71e[_0x8677ed(0x854)]||_0x8677ed(0x680),_0x16c198=TextManager['hp'];if(_0x213868===0x0)_0x2c9e58='%1';break;case 0x1:_0x2c9e58=_0x5ab71e[_0x8677ed(0x57f)]||'+%1',_0x16c198=TextManager['hp'];break;case 0x2:_0x2c9e58=_0x5ab71e[_0x8677ed(0xb17)]||_0x8677ed(0x519),_0x16c198=TextManager['mp'];break;case 0x3:_0x2c9e58=_0x5ab71e[_0x8677ed(0x750)]||_0x8677ed(0x1bc),_0x16c198=TextManager['mp'];break;}return _0x2c9e58[_0x8677ed(0x4ed)](_0x149b98,_0x16c198)[_0x8677ed(0x54d)]();},Sprite_Damage[_0x35b5eb(0x73b)][_0x35b5eb(0x6b8)]=function(){const _0x5d1779=_0x35b5eb;return Imported[_0x5d1779(0x268)]?VisuMZ[_0x5d1779(0x32a)][_0x5d1779(0x3cb)][_0x5d1779(0x217)][_0x5d1779(0x69f)]:![];},Sprite_Damage[_0x35b5eb(0x73b)]['setupCriticalEffect']=function(){const _0x2f163d=_0x35b5eb,_0x58d942=VisuMZ[_0x2f163d(0x781)][_0x2f163d(0x3cb)][_0x2f163d(0x165)];this[_0x2f163d(0xa13)]=_0x58d942[_0x2f163d(0xa66)][_0x2f163d(0x4b1)](0x0),this['_flashDuration']=_0x58d942['CriticalDuration'];},Sprite_Damage[_0x35b5eb(0x73b)][_0x35b5eb(0x448)]=function(_0x2a594f,_0x343826){const _0x27d343=_0x35b5eb;this['_flashColor']=_0x343826['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x27d343(0x622)](this[_0x27d343(0xa13)]),this['_flashDuration']=_0x343826['flashDuration']||0x0;const _0x51b2cd=this[_0x27d343(0xaf0)](),_0x1fe454=Math[_0x27d343(0xaaf)](_0x51b2cd*0x1e),_0x4d4a71=this[_0x27d343(0x1ea)](_0x1fe454,_0x51b2cd);_0x4d4a71['bitmap'][_0x27d343(0x300)]=ColorManager[_0x27d343(0xa7e)](_0x343826[_0x27d343(0x300)]),_0x4d4a71['bitmap'][_0x27d343(0x891)](_0x2a594f,0x0,0x0,_0x1fe454,_0x51b2cd,_0x27d343(0x321)),_0x4d4a71['dy']=0x0;},Sprite_Damage[_0x35b5eb(0x73b)][_0x35b5eb(0x772)]=function(_0x4ac709,_0x2a839c,_0x2de734){const _0x2f4bc8=_0x35b5eb,_0x27aba0=Math['max'](this[_0x2f4bc8(0xaf0)](),ImageManager['iconHeight']),_0x540ee2=Math['floor'](_0x27aba0*0x1e),_0x24281f=this[_0x2f4bc8(0x1ea)](_0x540ee2,_0x27aba0),_0xcc6753=ImageManager['iconWidth']/0x2,_0x3bc801=_0x24281f['bitmap'][_0x2f4bc8(0x813)](_0x2a839c+'\x20');_0x24281f[_0x2f4bc8(0x89a)][_0x2f4bc8(0x300)]=ColorManager['getColor'](_0x2de734['textColor']),_0x24281f[_0x2f4bc8(0x89a)]['drawText'](_0x2a839c,_0xcc6753,0x0,_0x540ee2-_0xcc6753,_0x27aba0,_0x2f4bc8(0x321));const _0x4b2312=Math[_0x2f4bc8(0x3d5)]((_0x27aba0-ImageManager['iconHeight'])/0x2),_0x34d273=_0x540ee2/0x2-ImageManager[_0x2f4bc8(0x71c)]-_0x3bc801/0x2+_0xcc6753/0x2,_0x404842=ImageManager[_0x2f4bc8(0x4e7)](_0x2f4bc8(0x7d2)),_0x1c98da=ImageManager[_0x2f4bc8(0x71c)],_0x52f3d6=ImageManager[_0x2f4bc8(0x83b)],_0x4a4b00=_0x4ac709%0x10*_0x1c98da,_0x5e44c0=Math[_0x2f4bc8(0xaaf)](_0x4ac709/0x10)*_0x52f3d6;_0x24281f[_0x2f4bc8(0x89a)][_0x2f4bc8(0x4cb)](_0x404842,_0x4a4b00,_0x5e44c0,_0x1c98da,_0x52f3d6,_0x34d273,_0x4b2312),this[_0x2f4bc8(0xa13)]=_0x2de734[_0x2f4bc8(0x547)]||[0x0,0x0,0x0,0x0],this[_0x2f4bc8(0xa13)]=JsonEx[_0x2f4bc8(0x622)](this[_0x2f4bc8(0xa13)]),this[_0x2f4bc8(0x1a9)]=_0x2de734['flashDuration']||0x0,_0x24281f['dy']=0x0;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x7bd)]=Sprite_StateIcon[_0x35b5eb(0x73b)]['updateFrame'],Sprite_StateIcon[_0x35b5eb(0x73b)][_0x35b5eb(0xd5)]=function(){const _0x35b6d3=_0x35b5eb;VisuMZ['BattleCore'][_0x35b6d3(0x7bd)][_0x35b6d3(0x541)](this),this['opacity']=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x35b5eb(0x781)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x35b5eb(0x73b)][_0x35b5eb(0x205)],Sprite_Weapon[_0x35b5eb(0x73b)][_0x35b5eb(0x205)]=function(){const _0x3960fd=_0x35b5eb;VisuMZ[_0x3960fd(0x781)][_0x3960fd(0xa28)]['call'](this),this[_0x3960fd(0x89a)]&&('ksjgw'===_0x3960fd(0x8d9)?_0x38937c['BattleCore']['Settings']['Actor'][_0x3960fd(0x647)]['call'](this,_0x2f641f):this[_0x3960fd(0x89a)][_0x3960fd(0x306)]=VisuMZ[_0x3960fd(0x781)]['Settings'][_0x3960fd(0xb22)][_0x3960fd(0x10d)]);};function Sprite_HpGauge(){const _0x539567=_0x35b5eb;this[_0x539567(0x255)](...arguments);}function _0x2f15(){const _0x420320=['kJklz','updateEffectContainers','isNonSubmenuCancel','isSkill','expTotal','frontviewSpriteY','isBuffAffected','displayCurrentState','JYqID','mcUMW','isStatusAffected','performAttackSlot','AsUser','onAngleEnd','expRate','AxqHM','ARRAYSTR','BattleManager_selectNextCommand','mhNNu','CmdTextAutoBattle','HBxdT','LastSelected','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','STRUCT','adjustFlippedBattlefield','CriticalColor','htRiO','AllowRandomSpeed','svAnchorX','_actionBattlers','KvwEI','isTpb','SaOWB','isFriendly','isActor','contentsOpacity','Elements','_motionSpeed','JS\x20%1END\x20ACTION','setBattleZoom','VariableDmg','_actorCommandWindow','AttachStateOffsetX','Game_Map_battleback1Name','bBWYh','cmSPa','CommandAddOptions','_frame','VarianceFormulaJS','getColor','CalcEscapeRatioJS','AttachStateOffsetY','JS\x20%1START\x20BATTLE','getNextSubject','KpdfV','CJncv','ShowCurrentState','GUARD','move','bYLps','arPenFlat','_borderPortraitDuration','Sprite_Actor_createStateSprite','createBattleFieldBattleCore','_shadowScaleY','svpXg','autoBattle','pages','friendsUnit','PrioritySortActive','clearRect','isFightCommandEnabled','ActSeq_Camera_FocusTarget','VisuMZ_3_ActSeqProjectiles','updateHpGaugePosition','BattleManager_processDefeat','effect','gainFullActionsPTB','validTargets','Targets2','FPChL','VisuMZ_2_BattleSystemCTB','HpOeC','4408uiVsEw','ActSeq_Weapon_SetActiveWeapon','setBattleCameraPoint','BravePoints','wjAbI','ActSeq_Movement_Skew','Sprite_Actor_setBattler','Game_Action_apply','Sprite_Battler_damageOffsetY','ArRedFlat','setHandler','alterType','okTargetSelectionVisibility','applyFreezeMotionFrames','animationId','floor','battleback1Name','NUM','isForRandomBattleCore','onDisabledPartyCommandSelection','%1EndActionJS','swing','scope','JCtjJ','isCancelled','gainHp','finalizeScale','cancel','ActionCount','anchor','wePDo','TPKzS','zTmdM','scale','Formula','Enemy','alive\x20battlers\x20not\x20user','StartTurnShow','xyLlg','Game_Battler_clearDamagePopup','Debuffs','targetSpritePosition','isHiddenSkill','ActSeq_Element_Clear','helpWindowRectBorderStyle','_lastEnemy','VariableID','encounterList','pMHPW','base','ULCvn','ActSeq_Zoom_Reset','motionSpeed','Game_Action_applyGlobal','setupChild','OmwJw','subject','svAnchorY','_animationCount','HnnmY','eipVn','_battleCoreBattleStartEvent','battleJump','isBattleRefreshRequested','itemHit','LWHSG','_handlers','ActSeq_DB_DragonbonesMotionAni','requestPointAnimation','hpAffected','hasSvBattler','_actorWindow','drawItemImageXPStyle','registerDefeatedEnemy','oBgeQ','Sprite_Battler_update','_battlerContainer','backColor','evaded','isSTB','fontSize','setBattlerFacePoint','die','maxCommands','actorId','sliceMax','command339','TpGaugeOffsetY','enemyNames','isAnyoneSpinning','ulZvr','qRrzK','pDBpn','Game_BattlerBase_isStateResist','_currentActor','Scene_Battle_terminate','NjwPI','skillItemWindowRectBorderStyle','moveBattlerDistance','Game_Map_battleback2Name','vOfdr','isFlipped','AllowCollapse','pop','createDamageContainer','ActSeq_Mechanics_StbExtraAction','JIVNB','_wtypeIDs','battleSys','_battler','DpFkv','MotionSpeed','uatJw','createHpGaugeSprite','oQfJM','isFrameVisible','displayTpDamage','_stateSprite','process_VisuMZ_BattleCore_CommonEventKeys','mpDamageFmt','startJump','getConfigValue','updateShadowScale','tdfAw','_list','onBattleEnd','FaceAway','_skewWholeDuration','isActiveTpb','686983usakec','Actor','jgdov','spell','glDyj','randomTargets','hKQWL','VisuMZ_2_BattleSystemETB','calcWindowHeight','isFastForward','_immortal','CjVQh','getNextDamagePopup','setupBattleCore','Window_BattleLog_displayEvasion','NwUCH','createAttachmentSprites','yaBJK','gPlhC','ActSeq_Set_FinishAction','gWKcm','nFfii','helpWindowRect','left','createTroopNote','Amp','UNTITLED','performAction','checkSceneBattleTransitionable','qynmo','setHalfActionsPTB','isForOne','gainCurrentActionsFTB','fKhLN','_cursorArea','nqstb','StatusWindowSkinHide','compareEnemySprite','dKVoH','CopyCombatLog','GniRj','MpGaugeOffsetX','isSkillItemWindowsMiddle','nQApR','maxCols','updateBattlebackBitmap2','ShuffleArray','index','SkillItemBorderCols','applyForcedGameTroopSettingsBattleCore','Skill-%1-%2','onHomeMoveEnd','StatusWindowSkinFilename','user','Game_BattlerBase_die','_ptbActionCost','power','updateFrame','battleLayoutStyle','Scene_Battle_start','QhTBj','SuUEQ','removeAnimation','clearResult','NameOffsetX','oQvgA','icon','uiMenuStyle','Game_Action_makeTargets','canGuard','battleUIOffsetX','Scene_Battle_onActorCancel','setBattlerFlip','isSideButtonLayout','updateBitmap','Mute','performMoveToTargets','BattleManager_inputtingAction','Game_Battler_startTpbTurn','displayChangedBuffs','ActionCenteredName','showHelpWindow','statusWindowRectXPStyle','DIzKA','PostStartBattleJS','ActSeq_Mechanics_PtbFullHalfAction','portrait','registerCommand','clamp','ShowPortraitsBorderStyle','Sprite_Enemy_createStateIconSprite','StepDistanceX','Sprite_Battler_initMembers','updateMain','displayActionResults','createActorCommandWindow','ParseStateNotetags','setFullActionsPTB','CastPhysical','DistanceY','ActSeq_Animation_WaitForAnimation','_updateCursorFilterArea','jBJcn','DBpMy','attackStatesRate','NqOrF','moveBattlerHomeToPoint','PreApplyAsUserJS','Window_BattleLog_clear','Window_BattleLog_performActionStart','ElementStatusCore','Scene_Battle_updateBattleProcess','changeCtbChargeTime','SmoothImage','WJHFL','FullActions','ActSeq_Mechanics_BoostPointsStoreData','match','addDamageSprite','_actions','gDUVK','Game_System_initialize','contents','cancelTargetSelectionVisibility','AttackAnimation','ActSeq_Projectile_Picture','oecQF','tone','ActSeq_Zoom_WaitForZoom','BpWAP','DamageDisplay','_enemies','BattleManager_makeActionOrders','WaitForSkew','changeBattlerOpacity','isBattlerGrounded','AGI','replace','ffyUv','turn','updateStateIconSprite','refresh','process_VisuMZ_BattleCore_DamageStyles','aliveMembers','_effectType','toUseBoostPoints','battleZoom','onGrowEnd','svBattlerAnchorX','ActSeq_Element_AddElements','cqLeO','performSTBExploiter','Mirror','isImmortal','updateActors','ActSeq_Motion_WaitMotionFrame','createAutoBattleWindow','isCharging','requestDragonbonesAnimation','yLSvu','updateShadowPosition','BattleLogRectJS','alive\x20enemies\x20not\x20target','sideview_ui','getEnemyIdWithName','BattleLog','status','dTSNX','QyixN','loadWindowskin','xyNhR','criticalDmgRate','itemEffectAddNormalState','retreat','StartName','Sprite_Battler_updateMain','applyTargetFilters','DualWield','addSingleSkillCommand','command301','ActSeq_Animation_ShowAnimation','makeHpDamageText','context','createInnerPortrait','setFrame','Window_BattleStatus_drawItemImage','Scene_Party','actor','Game_Action_itemHit','createEnemies','Armor-%1-%2','Rniaj','mDFmJ','onSkewEnd','battlelog','updatePadding','alive\x20actors\x20not\x20user','WNYUU','Frame','Game_Action_itemEffectAddNormalState','autoSelect','Damage','ueFWl','_targetSkewX','removeBuffsAuto','changeAtbCastTime','HJxQx','isStateResist','cVjZp','setBattleSkew','setActorHome','BattleManager_isTpbMainPhase','isOTB','BjGsC','MHgyh','_animationContainer','2835PWvBOu','adjustPosition_ScaleDown','actorCommandEscape','isClicked','startInput','vcZIC','Window_BattleLog_update','addAutoBattleCommand','TpbActiveChangeEnabled','wait','innerHeight','visible','isMeleeMultiTargetAction','splice','BattleManager_startInput','_uiContainer','isSkipPartyCommandWindow','_forcedHomeY','initMembers','EnbKf','Destination','dead\x20battlers','Sprite_Enemy_updateCollapse','tKbXs','%1StartTurnJS','victory','options','UUExZ','updateEffectsContainer','TKdnW','PartyCmd','damageFlat','kPlbL','lPMVD','Game_Action_evalDamageFormula','boxHeight','textWidth','Immortal','requestFauxAnimation','makeCommandList','_hpGaugeSprite','sliceMin','isItemCommandEnabled','bbsZM','length','Scene_Map_initializeAfter','battlerSprites','battleCoreResumeLaunchBattle','_cursorSprite','Shadow2','SNvNV','Sprite_Actor_updateShadow','<CUSTOM\x20ACTION\x20SEQUENCE>','_flashDuration','CGrgd','performReflection','NameOffsetY','TimeScale','ActSeq_Mechanics_AddState','STPwt','ShowCosts','alive\x20friends\x20not\x20target','isDead','revertTpbCachedActor','boxWidth','drawEnemyName','lqWNY','ActSeq_Mechanics_Immortal','cTrkv','cancelButtonText','MANUAL','ripZA','+%1\x20MP','stepFlinch','opacity','Targets','performDamage','createDigits','_defeatedEnemies','substitute','_shadowScaleX','jump','BattleManager_onEscapeFailure','cvLEz','abnormal','ActSeq_Horror_GlitchRemove','setSvBattlerSprite','AddOption','inputtingAction','ActSeq_Movement_Opacity','removeBuff','aOKiT','Filename','FaceDirection','refreshMotion','jifxL','updateAttachedSprites','makeActionListAutoAttack','ActSeq_Mechanics_PtbConvert','hNURE','Window_BattleLog_displayMiss','JfUXh','JLmDg','kQiaO','aRtTP','ActSeq_Motion_RefreshMotion','process_VisuMZ_BattleCore_jsFunctions','ParseItemNotetags','open','glitch','ActSeq_Mechanics_BreakShieldReset','not\x20focus','gvKbK','isOpen','damageContainer','Scene_Battle_createCancelButton','Window_BattleLog_performAction','removeState','createChildSprite','setHue','KItOW','changeTurnOrderByCTB','mpDamage','GkCkq','Game_Battler_clearMotion','WARiX','_lastAction','NMOZe','type','TnrKT','canInput','MP_Flat','BaseTroopIDs','_baseLineStack','BTestBypass','isForAll','SkillItemStandardCols','CreateCommonEventKeys','actorCommandAutoBattle','TSkrd','setHorrorEffectSettings','jHXCM','BattleManager_startBattle','placeGauge','updateWeather','loadBitmap','Opacity','xyLwY','DFbxh','callOptions','createPartyCommandWindowBattleCore','CusEC','Game_Battler_regenerateAll','_active','deadMembers','StartTurnWait','toLowerCase','updateEventMain','WNoaq','Scene_ItemBase_applyItem','changeWeather','addGeneralOptions','Oanpk','QoL','BYyIK','ActSeq_Target_PrevTarget','ActSeq_Movement_Float','GFjyK','Game_Battler_makeSpeed','damage','Game_Actor_setup','SvMotionIdleMass-%1-%2','removedStateObjects','isTpbMainPhase','Scene_Battle_commandFight','qMCBH','rlmor','_cancelButton','toString','yDCCm','createBattleUIOffsetY','mkacb','VisuMZ_1_SkillsStatesCore','onDatabaseLoaded','Sprite_Animation_targetSpritePosition','BattleManager_endAction','string','coreEngineRepositionEnemies','alterActionCostPTB','battlerSmoothImage','Skills','TPB','getTraitSetKeys','isCommandEnabled','AGscl','obkQz','_actor','commandStyle','ActSeq_Mechanics_BreakShieldChange','TpbGaugeOffsetY','StatusWindowAttachmentFrontOffsetX','QEUGe','_back2Sprite','_forcedBattlers','exit','_allTargets','isMeleeSingleTargetAction','VisuMZ_3_ActSeqImpact','bottom','isForOpponentBattleCore','Scene_Battle_stop','PostStartActionJS','moveToStartPosition','mESoa','removeOnceParallelInterpreter','jNjNW','BattleManager_startAction','Game_Battler_onBattleStart','drawIcon','alignBattleCoreDamageSprite','svBattlerShadowVisible','PeBbN','moveToStartPositionBattleCore','FlinchDistanceY','_spriteset','initialize','ActionEndUpdate','cameraDuration','Class-%1-%2','stateMotionIndex','OTUJX','ShowWeapon','createMainSprite','YiLFw','AutoBattleMsg','WaitForSpin','_battlerName','timeScale','fSOzj','placeTimeGauge','action','_visualHpGauge_JustDied','ActSeq_DB_DragonbonesTimeScale','angleDuration','VisuMZ_0_CoreEngine','ActSeq_BattleLog_WaitForBattleLog','Game_Temp_requestAnimation','addItemCommand','ActSeq_BattleLog_WaitForNewLine','displayMiss','_targetIndex','selectNextCommand','Window_Options_addGeneralOptions','canBattlerMove','DefaultStyle','popBaseLine','Scale','addTextToCombatLog','startBattle','ALL\x20SKILLS','wIUSB','itemWindowRect','jJTkO','WlXQH','restore','ScaleUp','damageOffsetY','BCzrv','Scene_Map_updateCallMenu','fxuOY','PreStartBattleJS','getCommonEventIdWithName','mtgSO','VtWbM','cIiuz','ActSeq_Mechanics_PtbAlterCost','Game_Troop_setup','isSceneChanging','setupBattleCoreData','createCancelButton','lcXFa','ATTACK','applyGlobalCommonEventNotetags','PostEndTurnJS','BattleManager_checkBattleEnd','Game_Action_itemEffectAddAttackState','PreStartTurnJS','wlGGS','_homeDuration','checkTpbInputClose','updateBattlebackBitmap1','turnOrderChangeOTB','isMoving','clearHorrorEffects','requestAnimation','isJumping','clearElementChanges','chant','XFPdf','PreApplyAsTargetJS','setActionState','repositionCancelButtonBorderStyle','mainSpriteScaleX','max','currentAction','makeSpeed','isCommonEventReserved','MOTIONS','fPjsU','BoostPoints','flashDuration','lCqVg','changePaintOpacity','MaxLines','battleMembers','clearForcedGameTroopSettingsBattleCore','ActSeq_Mechanics_BtbGain','updateOnceParallelInterpreters','PARTY','visibilityState','start','Window_BattleLog_performDamage','hhhFG','Parse_Notetags_Action','ActSeq_Mechanics_ActionEffect','statusWindowRectBorderStyle','9FSPdME','RequiresDefeat','SHOrJ','_battleCoreForcedElements','isOptionsCommandAdded','adjustPosition_ScaleToFit','HZZeg','ActSeq_Horror_GlitchCreate','ActorCmd','oATdy','_commonEventIDs','vjImT','performFlinch','text\x20target','TdKUs','ActionEffect','Hnzyg','autoSelectPriority','1640877XePCNb','missed','forceMotion','_borderPortraitTargetX','YXBQW','qOifc','ffWup','createEnemyNames','cameraClamp','Vkqvu','FlinchDistanceX','initBattleCore','ActSeq_Impact_MotionTrailCreate','Window_BattleEnemy_initialize','maxBattleMembers','Sprite_SvEnemy','yEeon','WCfCZ','ActSeq_BattleLog_AddText','isTickBased','BattleManager_onEscapeSuccess','HkkcF','resizeWindowBorderStyle','AqoEw','hide','BattleManager_cancelActorInput','setupCriticalEffect','ActSeq_Mechanics_OnceParallel','battleAngle','_growEasing','onSelectAction','innerWidth','StyleName','stepForward','Victory','hhqAs','bDVoC','canAddSkillCommand','Sprite_Enemy_setHue','izdUj','DamageRate','padding','uiInputPosition','battleSpriteSkew','ANTI_TINT_UI','tLGaY','wFhPW','process_VisuMZ_BattleCore_Failsafes','PreDamageAsTargetJS','commandNameWindowDrawText','battlerShadowScaleX','oanXE','textColor','ikxXu','createBattleFieldContainer','evade','URPLN','DegKP','smooth','jvZYs','loadEnemy','performCastAnimation','onEncounterBattleCore','INvuw','removeImmortal','ActSeq_Impact_MotionTrailRemove','processVictory','CmdIconOptions','uSWJR','isCTB','_preBattleCommonEvent','angle','_motionCount','dead\x20friends','DefaultSoftCap','ZrKMd','changeCtbCastTime','FCUut','isAlwaysVisible','isETB','battleCommandIcon','MAXHP','performMoveToPoint','Targets1','#%1','center','getBattlePortraitOffsetX','ActionItemMsg','ActSeq_Mechanics_EtbAction','ztuIH','BattleManager_onEncounter','destroy','isAnyoneMoving','VisuMZ_2_BattleSystemPTB','CoreEngine','getNextSubjectFromPool','isPhysical','CmdIconFight','RNSFj','_angleRevertOnFinish','Window_BattleLog_performCollapse','rowSpacing','windowAreaHeight','VisuMZ_3_ActSeqCamera','Setting','StyleON','effects','BreakShields','isOptionsCommandEnabled','isDTB','JVEyS','log','_branch','gainMp','Scene_Battle_onActorOk','Sprite_Battler_startMove','waitForAnimation','ActSeq_Camera_FocusPoint','forceEscapeSprite','createLowerLayer','ysGHR','_autoBattle','freezeFrame','Game_Interpreter_PluginCommand','centerFrontViewSprite','DistanceX','ActionSkillMsg2','PopupShiftY','LCUQR','llSla','updateStyleOpacity','updateOpacity','SvBattlerSolo-%1-%2','HP_Flat','activate','_enemyIDs','mainSpriteScaleY','loadSvActor','KpxUC','startOpacity','gqeNu','ActSeq_Movement_WaitForJump','YIgsg','SLTsJ','CmdTextAlign','SkipPartyCmd','inputting','needsSelection','updateShadowVisibility','3556156lXYkEt','_targetAngle','prepareBorderActor','_growX','_tpbSceneChangeCacheActor','addCombatLogCommand','resizeWindowXPStyle','checkShowHideSwitchNotetags','addImmortal','allBattleMembers','WaitCount2','getBattlePortraitFilename','Window_SkillList_maxCols','getItemDamageAmountLabelBattleCore','_dragonbonesSpriteContainer','AS\x20USER','isBattleTest','Game_Action_setGuard','createWeather','kScCA','ActSeq_BattleLog_UI','applyGuard','ActSeq_Movement_WaitForSpin','createAnimationContainer','save','setupShockwaveImpactFilter','EFFECT_COMMON_EVENT','SceneManager_push','StatusWindowAttachmentBackOffsetX','ActSeq_Mechanics_CtbSpeed','_drawTextOutline','DefaultSoftScaler','_colorType','applyVariance','PopupDuration','addGuardCommand','SAamn','PtMZs','performActionStart','isOnCurrentMap','createActorCommandWindowBattleCore','_commonEventKey','onBattleStart','process_VisuMZ_BattleCore_PreBattleCommonEvent','BEXVy','isInputting','createAnimationSprite','border','onEncounter','initMembersBattleCore','hTSyl','Game_Battler_onTurnEnd','ieniH','chantStyle','ZuFfV','WIGji','initBattlePortrait','PhGof','random','isTurnBased','SKILLS','PRE-','windowPadding','Name','PreStartActionJS','isSceneBattle','actionEffect','LEFtL','isCertainHit','addSkillTypeCommand','isGrowing','numTargets','isEscapeCommandEnabled','usePremadeActionSequence','stop','VisuMZ_3_BoostAction','Scene_Boot_onDatabaseLoaded','PortraitScaleBorderStyle','updateBossCollapse','unchanged','Exploited','Wsgug','_animation','lineHeight','EGHuJ','loadSvEnemy','sPOZj','AutoBattleBgType','gqtjX','_opacityDuration','XPActorCommandLines','bdJJb','performActionEnd','applyGlobal','updateAttachmentSprites','rqmEU','lIFCV','XVGEr','UVoFW','return\x200','allowCollapse','ArPenRate','setTroopPage','isAnyoneSkewing','createEnemyNameContainer','resetResultSwitches','Settings','processActorCommandCancelTPB','Variable','Parse_Notetags_TraitObjects','getBattlePortraitOffsetY','_frontAttachmentSprite','value','wvzcD','VisuMZ_2_HorrorEffects','_mainSprite','round','StatusWindowAttachmentFrontOffsetY','inHomePosition','VisuMZ_1_ElementStatusCore','OffsetY','moVdI','gYXac','font','map','addEscapeCommand','isTriggered','displayReflectionPlayBack','addWeaponSwapCommand','battleFloat','isAlwaysHidden','alive\x20opponents\x20not\x20target','GEAaR','repeatTargets','toUpperCase','YWGpc','alive\x20actors\x20not\x20target','Scene_Battle_createHelpWindow','hue','bMziF','dRLmE','removedBuffs','CriticalDmgRate','addText','GroupDigits','ShowAddedBuff','NameFontSize','ResetOffset','Strength','requestRefresh','startTurn','makeActionList','Game_Interpreter_terminate','makeBattleCommand','PhokB','Sprite_Battler_updatePosition','Game_BattlerBase_initMembers','DamageStyles','getHardDamageCap','LiVnL','customDamageFormula','GuardFormulaJS','updateStateSprite','CommandVisible','_angleEasing','pJpup','xtxYg','itemLineRect','PopupShiftX','BattleManager_checkSubstitute','<CENTER>%1','Tralr','ActSeq_Mechanics_RemoveBuffDebuff','drawItemImageListStyle','makeActions','forceWeaponAnimation','Window_Options_statusText','updateSpin','startMove','ActSeq_Mechanics_DeathBreak','%1StartActionJS','filter','battleCamera','PFcKD','attackSkillId','RnOhV','Vdejn','Window_BattleLog_performReflection','CommandWidth','singleSkill','removeHorrorEffect','param','ActionSequence','updateSkew','repositionEnemiesByResolution','ShowFailure','refreshCursor','isPlaytest','createPartyCommandWindow','BattleEndEvent','GyRsB','createJS','startGrow','UaKQm','AutoMeleeAoE','onActorOk','gNufc','DistanceAdjust','CriticalDmgFlat','_isBattlerFlipped','ActSeq_Target_NextTarget','PreDamageJS','AntiTintUiElements','terminate','removeActor','needsSelectionBattleCore','AGmYs','BattleManager_updatePhase','needsActorInputCancel','CreateActionSequenceTargets','ceil','linkSprite','ZvmIS','lineRect','textBaseline','updateJump','_svBattlerData','pcTYI','IdJHh','PostRegenerateJS','FjPss','setupTextPopup','applyAngleChange','MAT','makeSuccess','command283','isBusy','createCommandNameWindow','XGgJS','Mechanics','WaitForScale','evalDamageFormulaBattleCore','XbGRf','PortraitScale','targetObjects','ShowMissEvasion','displaySubstitute','NameLegacy','optDisplayTp','dzldf','MP_Rate','ActSeq_Animation_AttackAnimation','_canLose','Window_BattleEnemy_show','WeaponTypeID','7433290HyBAaU','isIncludedInEnemyWindow','pneHY','PostApplyAsTargetJS','DpdZd','commandNameWindowDrawBackground','ixoCr','xmDEn','nEUyK','reduce','performMiss','checkSubstitute','eXOzB','traitObjects','createAllWindows','gdqps','BattleManager_processVictory','eCMEu','default','SkillsStatesCore','hierd','updateStart','changeInputWindow','Cmpdp','HpGauge','QLGtB','drawItemStyleIconText','parent','createTargetsJS','ylHZZ','EdZiK','Scene_Options','RevertAngle','_autoBattleWindow','battleCoreTpbMainPhase','Game_Action_needsSelection','dataId','StatusWindowAttachmentFront','SvMotionIdleSolo-%1-%2','drawTextEx','_battlerHue','showNormalAnimation','clearFreezeMotion','wQkIP','Interrupt','gaugeX','Window_PartyCommand_initialize','_cache','hpDamage','height','iconIndex','RZUge','Game_Action_isForRandom','_action','itemEffectAddAttackState','%1StartBattleJS','isSpriteVisible','PostDamageJS','wPFDP','updateCancel','setCustomDamageFormula','cqVho','clearFreezeMotionForWeapons','_actionInputIndex','ActSeq_Set_WholeActionSet','Duration','isPreviousSceneBattleTransitionable','svBattlerAnchorY','iterateBattler','oMFTO','alive\x20friends\x20not\x20user','SkillItemMiddleLayout','mainFontSize','ActSeq_Impact_ColorBreak','updateStaticSvBattlerFrames','ubSLU','Scene_Battle_selectPreviousCommand','doesPageHaveOnceParallelStart','drawItem','TpbGaugeOffsetX','BattleManager_initMembers','slice','resize','applyBattleCoreJS','shouldPopupDamage','_homeWholeDuration','DefaultHardCap','setText','clone','svBattlerData','9121dWkdlM','noise','min','HelpAutoBattle','getDamageStyle','commandNameWindowCenter','vWMCl','getAttackWeaponAnimationId','YaiXN','_jumpMaxHeight','uvbwC','BdVub','JLCoy','isATB','ReflectPlayback','ActSeq_Mechanics_OtbOrder','Sprite_Enemy_initVisibility','blt','close','lEjRL','ParseAllNotetags','refreshRequest','zHJlW','WLSyU','Actions','statusText','mhp','Scene_Battle_selectNextCommand','snapForBackground','iAYDk','FlashColor','formula','eyjWg','apply','onEscapeFailure','DEF','isQueueOptionsMenu','ActSeq_Element_ForceElements','EFsPX','Scene_Battle_createActorCommandWindow','jWXOy','isBattleCoreTargetScope','arRedFlat','endBattle','setupZoomBlurImpactFilter','loadSystem','remove','BattleStartEvent','lSheT','bind','eSCVT','format','magicReflection','getDualWieldTimes','freezeMotion','CounterPlayback','attackMotions','selectPreviousCommand','alive\x20enemies\x20not\x20user','Game_Battler_performActionStart','_checkOn','waitCount','Turns','statusTextAutoBattleStyle','battleCorePreBattleCommonEvent','duration','CipYZ','Scene_Battle_skillWindowRect','checkCacheKey','createDamageSprite','Direction','QuAzX','NameAlwaysHidden','autoMeleeMultiTargetActionSet','_regionBattleback1','process_VisuMZ_BattleCore_BaseTroops','partyCommandWindowRectDefaultStyle','vdiEF','Scene_Battle_startActorCommandSelection','Scene_Battle_logWindowRect','Scene_Battle_createAllWindows','ParseActorNotetags','Window_BattleLog_displayCritical','commandName','fkaau','actorCommandSingleSkill','CmdStyle','Window_BattleLog_popupDamage','enemyId','getBattlePortrait','Game_Action_numRepeats','Reveal','setupFont','priority','drawItemImage','-%1\x20MP','PcgSR','some','LvKNU','Window_BattleLog_performSubstitute','CheckSkillCommandShowSwitches','zejxa','counterAttack','clearMotion','getItemDamageAmountLabelOriginal','_flipScaleX','stbGainInstant','HgxOv','IconStypeMagic','AutoBattleRect','_activeWeaponSlot','StatusWindowAttachmentBack','itemRect','rOzOc','logWindowRect','isAnimationShownOnBattlePortrait','addChildAt','getSkillIdWithName','waitForJump','ActSeq_Animation_CastAnimation','FUNC','sJjkQ','_angleDuration','thrust','autoMeleeSingleTargetActionSet','PostEndBattleJS','collapseType','IconStypeNorm','clearBattlerMotionTrailData','ActionEnd','Axqmr','globalAlpha','Game_Troop_expTotal','LurVv','WtypeId','call','TPzin','ActSeq_Horror_TVRemove','Spriteset_Battle_update','isAttack','performActionMotions','flashColor','_svBattlerSprite','ktYJx','compatibilityVisible','setupActionSet','createEmptyBitmap','trim','Sprite_Enemy_updateStateSprite','addOnceParallelInterpreter','isDisplayEmergedEnemies','ShowRemovedBuff','dleiV','onEscapeSuccess','Game_Party_addActor','processAnimationRequests','oXJWn','_battlePortrait','Game_BattlerBase_canGuard','ElKmd','DamageFlat','pGcfe','ActSeq_Mechanics_StbRemoveExcessActions','isChanting','Parse_Notetags_Targets','isItem','_tpbState','kaXPR','drawItemBackground','COMBAT\x20LOG','MlNiN','isAnyoneChangingOpacity','partyCommandWindowRectXPStyle','cancelActorInput','extraPositionScaledY','SSjum','ActSeq_Movement_BattleStep','JSON','criticalHitRate','_homeY','bGKLE','dead\x20enemies','onActorCancel','sleep','ActSeq_Movement_WaitForSkew','Window_BattleLog_performActionEnd','lrnCe','_targetHomeY','addAutoBattleCommands','BattleVictoryJS','fnordAddedStates','_speed','Game_Battler_performEvasion','TextAlign','delay','ActSeq_Movement_FaceTarget','indexOf','hpHealingFmt','becomeSTBExploited','Window_BattleLog_performEvasion','isForOpponent','glHqf','PreDamage%1JS','Sprite_Actor_setActorHome','ApplyImmortal','keFKP','VisuMZ_2_BattleSystemOTB','anchorX','drain','dNKkp','OznvP','addBattleCoreAutoBattleStyleCommand','Djwbs','refreshBattlerMotions','startSpin','displayFailure','createBattleField','applyArmorModifiers','ANCpB','trueRandomTarget','_jumpDuration','PostStartTurnJS','contains','updateBorderSprite','_stateIconSprite','isDeathStateAffected','XhtWb','createShadowSprite','result','pushBaseLine','isOkEnabled','actorCommandCancelTPB','aEMoj','notFocusValid','YNeum','Sprite_Actor_initMembers','canMove','Item-%1-%2','EscapeFail','uaISJ','showAnimation','AJPfE','createBorderStylePortraitSprite','pow','gaugeLineHeight','active','AutoBattleCancel','isPartyTpbInputtable','ActSeq_Target_RandTarget','Spriteset_Battle_updateActors','alive\x20opponents','ResetFocus','applyData','Window_BattleLog_displayTpDamage','IXczM','clearBattleRefreshRequest','checkAutoCustomActionSequenceNotetagEffect','updateWaitMode','YpOAW','surprise','ActSeq_Impact_ShockwavePoint','Window_BattleLog_popBaseLine','onBattleStartOnceParallels','_forcedHomeX','rioFH','fldqN','Defeat','isAutoBattleCommandEnabled','ActSeq_Motion_ClearFreezeFrame','applyEasing','ActSeq_Mechanics_FtbAction','process_VisuMZ_BattleCore_Notetags','parseForcedGameTroopSettingsBattleCore','setHelpWindowItem','VisuMZ_2_DragonbonesUnion','uNSEG','opponentsUnit','%1EndBattleJS','OadOE','startMotion','drawItemStatusXPStyle','item','isShownOnBattlePortrait','wholeActionSet','getChildIndex','Mjnre','lvNXL','position','qWHjh','gZkWj','EebAb','_executedValue','isVisualHpGaugeDisplayed','command301_PreBattleEvent','lhWkk','_makeFontNameText','updateHomeMove','fight','svBattlerName','Game_Battler_performDamage','UAVYR','_actorSprites','PreEndBattleJS','updateStateSpriteBattleCore','attackAnimationIdSlot','makeTargets','addAnimationSpriteToContainer','JOLwR','createSeparateDamagePopups','kdtUc','checkTpbInputOpen','startSkew','isLearnedSkill','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','addedDebuffs','CmdIconItem','ShowFacesListStyle','ActSeq_Mechanics_CtbOrder','Window_ItemList_maxCols','Angle','makeTargetSelectionMoreVisible','clearActiveWeaponSet','updatePosition','command119','canEscape','CmdIconEscape','isForRandom','cwcMa','ITEM','placeActorName','NiBlN','showPortraits','Style','selectNextCommandTpb','_updateFilterArea','mrbss','_weaponImageId','isFTB','float','adjustPosition','regenerateAll','displayHpDamage','ActSeq_Movement_HomeMoveBy','zyDJZ','syvsJ','ActSeq_Impact_ShockwaveCenterTargets','Index','TP_Flat','ActSeq_Angle_WaitForAngle','setActiveWeaponSlot','EscapeSuccessJS','displayItemMessage','createDistortionSprite','qNfCQ','charging','addBuff','KSLto','updatePointAnimations','performCollapse','ShowCritical','makeDeepCopy','fnordRemovedStates','NameAttachStateIcon','canAlterActionCostPTB','ActSeq_Movement_HomeReset','fZpYG','PostEndActionJS','tvmom','PostApplyAsUserJS','Linear','performActionEndMembers','itemHeight','constructor','GRLkD','KWmYU','displayAction','attackStates','resetFontSettings','Slot','Game_Action_isForOpponent','updateAngleCalculations','PopupOffsetX','%1EndTurnJS','_skewY','canAttack','mainSprite','process_VisuMZ_BattleCore_TraitObject_Notetags','MDF','removeAnimationFromContainer','startDamagePopup','alive\x20battlers\x20not\x20target','Game_Action_setAttack','allowRandomSpeed','MotionIdle','dWWoo','_targetFloatHeight','irAzq','HomePosJS','FMLYz','NuEQX','updateCallMenu','autoBattleUseSkills','updateCommandNameWindow','_enemy','ConfigManager_applyData','updatePositionBattleCore','gCeih','NtyYk','bdjHV','ActSeq_Angle_Reset','placeStateIcon','onBattleEndBattleCore','alterPriority','getLastPluginCommandInterpreter','createMiss','lcwwE','ActSeq_Weapon_NextActiveWeapon','setup','isEnemy','skew','mXPWq','fngrW','GFnbE','Window_BattleLog_performMagicEvasion','updateFlip','ycVwg','_callSceneOptions','Enemy-%1-%2','skewBattler','mainSpriteWidth','animation','custom','Post','jumpBattler','EasingType','dying','battlerShadowScaleY','LuIuU','isBattlerFlipped','zoomDuration','waitForEffect','drawItemStatus','Battleback','addCommand','debuffAdd','performCounter','initVisibility','battleMove','requestMotion','PnVkD','Game_BattlerBase_addNewState','HAUuz','lqQHS','OffsetX','-%1','aJCVY','playOnceParallelTroopPage','hRLWA','_skewEasing','setupMotionBlurImpactFilter','setBattleCameraOffset','SFuqN','gainStoredBoostPoints','BMBwO','adjustPosition_ScaleUp','_forcedBattleLayout','setImmortal','spriteId','Game_Actor_makeActionList','ConvertParams','isAppeared','battler','PreEndTurnJS','addOptionsCommand','ShowActorGauge','sYsWF','_targetSkewY','VisuMZ_2_BattleSystemBTB','troop','Window_BattleLog_pushBaseLine','_partyCommandWindow','battleOpacity','bPVeg','createStateSprite','ConvertActionSequenceTarget','DigitGroupingDamageSprites','alterChange','Game_Battler_forceAction','KlXFJ','isActionSelectionValid','setSkill','setMoveEasingType','startTpbTurn','tQZtO','actionSplicePoint','createString','getSkillTypes','battleStatusWindowAnimationContainer','startWeaponAnimation','MotionType','_currentAngle','EnableSoftCap','ZlBhC','isForFriend','\x20to\x20%1\x20midbattle.','ParseWeaponNotetags','clearDamagePopup','isNextSceneBattleTransitionable','isMVAnimation','speed','useDigitGrouping','Urwdg','process_VisuMZ_BattleCore_PluginParams','numRepeats','BDqaM','_lines','DamageType%1','MAXMP','_armorPenetration','guardSkillId','#ffffff','ChangeOrderBy','ZsHRH','WEAPON\x20SWAP','TargetLocation','biIOb','ZgUGU','weatherType','messageSpeed','_tempActor','Game_BattlerBase_eraseState','ActSeq_Skew_WaitForSkew','updateGrow','CfnBI','faceRect','shadow','Sprite_Battler_damageOffsetX','_createCursorSprite','updateShadowBattleCore','bATPY','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','_updateCursorArea','applyImmortal','createContents','SDpLA','setHelpWindow','fittingHeight','StateIconOffsetX','guard','SideviewSelect','commandSymbol','_animationSprites','WaitForAnimation','updateRefresh','getFullActionsPTB','_enemyId','updateCollapse','SfZcm','isCustomBattleScope','_preemptive','getWtypeIdWithName','_targetGrowX','_escapeRatio','_multipliers','POST-','onOpacityEnd','ARRAYNUM','WaitForFloat','motionIdle','PzHRj','addShowHpGaugeCommand','setBattler','buffRemove','Game_Interpreter_command283','isDebuffAffected','PreEndActionJS','getMenuImage','processEscape','CSVhr','floatBattler','isAlive','skillWindowRect','logActionList','nameY','ArRedRate','twcGo','aRXfB','makeData','gVEbO','_commandNameWindow','_interpreter','BackColor','BattleDefeatJS','isSpinning','drawItemImagePortraitStyle','Game_BattlerBase_canAttack','relwd','addedStateObjects','vxqcS','DTB','command3011','Sprite_Actor_updateBitmap','OdrSb','FoNsu','aczSG','addedBuffs','startAction','reverse','collapse','redraw','iconWidth','PrPCu','preparePartyRefresh','parse','eXYGC','Game_Party_removeActor','updateBorderStyle','performWeaponAnimation','moveBattlerToPoint','isBattleFlipped','UfDDp','Sprite_AnimationMV_updatePosition','ActSeq_ChangeAngle','MIN_SAFE_INTEGER','updateVisibility','XGGAr','VisuMZ_4_CombatLog','code','jTpGi','setCursorRect','omKZS','startPartyCommandSelection','ActSeq_Movement_WaitForMovement','VariableHeal','performEvasion','_targetOpacity','performRecovery','_emptyBitmap','revealNewWeaknesses','putActiveBattlerOnTop','rXWrA','prototype','startEnemySelection','forceSelect','createCommandVisibleJS','mgPDM','_baseY','HHiQt','isOpponent','_itemWindow','PostApply%1JS','EmergeText','frameVisible','Scene_Battle_update','PostDamage%1JS','AnchorY','OffsetAdjust','ActSeq_Mechanics_EnemyEscape','attackAnimationId1','_baseX','VisuMZ_2_BattleSystemSTB','attachSpritesToDistortionSprite','mpHealingFmt','shift','_targetGrowY','wAYrE','alterCost','_battleCoreBattleResumeAfter','show','moveBattlerHomeDistance','drawItemStatusListStyle','addChildToBack','ParseEnemyNotetags','preemptive','parameters','battleSkew','commandStyleCheck','isSkewing','isHidden','_createEffectsContainer','AutoMeleeSolo','anchorY','ActSeq_Impact_ZoomBlurTargetCenter','_duration','message2','head','PrioritySortActors','HfiWf','States','rixiV','isRightInputMode','updateBattleProcess','equips','FollowTurn','ReflectAnimation','_skillWindow','setupIconTextPopup','VisuMZ_3_WeaknessDisplay','ActSeq_Mechanics_DamagePopup','ZXKxa','qPjwq','visualHpGauge','Weapon-%1-%2','_growY','casting','turnCount','ShowMpDmg','_displayBattleCoreTransitionErrorMsg','switchToWeaponType','traitSet','azcox','BattleCore','damageOffsetX','rdjPu','PHyJc','_subject','top','skewDuration','resetBreakShield','RVuyw','BStda','isConfused','weapons','process_VisuMZ_BattleCore_Action_Notetags','Scene_Battle_onEnemyOk','addFightCommand','clearBattleCoreData','ActSeq_Camera_Reset','canUseItemCommand','BjGZJ','HelpFight','DHSpI','_battleCoreNoElement','4715976cgpgcf','removeChild','KlhLM','waitForMovement','svShadow','VisuMZ_2_PartySystem','_jumpWholeDuration','EmLEJ','auto','Window_BattleLog_performCounter','_floatEasing','textAlign','actions','_methods','displayReflection','_weaponSprite','bitmapHeight','ConfigManager_makeData','helpAreaBottom','extraPositionX','Scene_Map_initialize','battleCommandName','onTurnEnd','_floatWholeDuration','arRedRate','ParseClassNotetags','Game_Action_clear','getStypeIdWithName','onBattleStartBattleCore','isPTB','MessageWait','FocusX','aEDNj','Scene_Battle_helpWindowRect','walk','members','hydRy','occasion','Sprite_StateIcon_updateFrame','DefeatEvent','addNewState','selectNextActor','AnimationID','removeStatesAuto','autoBattleWindowRect','_regionBattleback2','isNextScene','ActSeq_Movement_WaitForScale','push','_deathStateApplied','GADNI','_phase','jUdyJ','eLiMw','_targetHomeX','battleCameraData','ATK','NewPopupBottom','loadPicture','IconSet','_floatDuration','UgqxB','alphabetic','_totalValue','partyCommandWindowRectBorderStyle','isTeamBased','dVAAt','finishActorInput','setupDamagePopup','_requestRefresh','deathStateId','addCustomCommands','DakhD','PostDamageAsUserJS','ZFjdS','SwitchMissEvade','isBreakStunned','_enemySprites','ivgWV','itemCri','Game_Action_executeDamage','Scene_Battle_onEnemyCancel','_padding','addLoadListener','Game_Interpreter_updateWaitMode','updateUiContainerPosition','wtypeId','DsxuV','hasBeenDefeatedBefore','isActing','battleProjectiles','updatePhase','waitForFloat','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','Wave','setActiveWeaponSet','SwitchCritical','CZbdF','Game_Actor_equips','getInputButtonString','setBattlerMotionTrailData','startHomeMove','note','setWaitMode','_motionType','create','addChildToUiContainer','StateIconOffsetY','CastMagical','alterBreakShield','JS\x20%1END\x20TURN','Game_Enemy_setup','vRoSh','_weather','PerformAction','SvWeaponMass-%1-%2','_lastPluginCommandInterpreter','requestMotionRefresh','_skewDuration','lZwYo','isGuard','ActSeq_BattleLog_Refresh','State-%1-%2','setBattleAngle','measureTextWidth','eCAVw','adjustWeaponSpriteOffset','CmEyT','growBattler','Sprite_Battler_setBattler','TQQMD','ChargeRate','FocusY','STYPES','enemy','_linkedSprite','wnCAR','Game_Interpreter_command301','stateRate','EscapeFailureJS','isBattleSys','helpAreaHeight','udugW','origin','forceAction','updateCustomActionSequence','CriticalHitRateJS','alive\x20battlers','destroyDamageSprite','ActSeq_Movement_WaitForFloat','_homeX','_inputting','createKeyJS','battleEffect','NvkQo','weaponTypes','VisuMZ_2_WeaponSwapSystem','%1RegenerateJS','addChild','SceneManager_isSceneChanging','animationShouldMirror','softDamageCapRate','setupBattleback','ActSeq_Weapon_ClearActiveWeapon','iconHeight','SkewX','actorCommandWindowRect','dlwzA','extraHeight','isMagical','processDefeat','BattleLayout','finishActionSet','CalcActionSpeedJS','yGnQg','statusWindowRectDefaultStyle','process_VisuMZ_BattleCore_CreateRegExp','StatusWindowSelectableBackHide','command357','displayMpDamage','setGuard','_windowLayer','undecided','Spriteset_Battle_createBattleField','textSizeEx','updateScale','PWjrm','performTpbActiveCheckSwitch','removeDamageSprite','hpDamageFmt','makeTargetsBattleCore','nABGq','showEnemyAttackAnimation','actor%1-portrait','_item','Sprite_Enemy_updateBossCollapse','HitFlat','MpGaugeOffsetY','_indent','children','ActSeq_Motion_PerformAction','Point','isMagicSkill','partyCommandWindowRect','text','jHvFD','itemTextAlign','kTdXq','playEnemyAttack','PopupPosition','maxLines','XPActorDefaultHeight','ZqXzL','tmXib','WaitForCamera','criticalHitFlat','drawTextTopAligned','getAttackMotion','gbBnn','dead\x20actors','Scene_Battle_updateStatusWindowPosition','_helpWindow','Game_Map_setupBattleback','DpAQu','isAnyProjectilePresent','clearOnceParallelInterpreters','Game_Map_encounterList','battleGrow','ActSeq_Movement_Jump','slices','includes','qTZno','HelpEscape','movement','noSimilarSTypes','TextColor','vXaOK','JS\x20BATTLE\x20VICTORY','_scene','pointY','createAttachedSprites','prev\x20target','motionType','abs','ActSeq_BattleLog_Clear','mwdNx','endAction','UohbM','createUIContainer','regenerateAllBattleCore','drawText','XOoRx','isPartyCommandWindowDisabled','_shake','battleCommands','updateShadow','setBackgroundType','createEffectActionSet','_createClientArea','bitmap','_tempBattler','_damagePopupArray','WaitCount','unshift','QEFSh','randomInt','Buffs','_target','loadBattleback2','findTargetSprite','playCancel','changeAtbChargeTime','Sprite_Actor_update','_attackAnimationId','_skillIDs','iGZww','_damageContainer','Game_BattlerBase_refresh','jnrIW','gainCurrentActionsETB','_motion','_enemyWindow','skillTypes','displayBuffs','swapEnemyIDs','battleback2Name','WaitComplete','updateInterpreter','createActionSequenceProjectile','split','UOSls','ActSeq_Animation_PlayAtCoordinate','WaitForProjectile','DefaultDamageStyle','Game_Battler_onBattleEnd','LUK','_onceParallelInterpreters','vlBrg','attack','hasStaticSvBattler','displayBattleCoreTransitionErrorMsg','weaponImageId','JBvhN','skills','_text','setupHpGaugeSprite','battleSpin','ActSeq_Camera_Clamp','targetDistortionSpritePosition','ActSeq_Motion_FreezeMotionFrame','equipSlots','statusWindowRect','_logWindow','list','refreshStatusWindow','Window_BattleLog_displayActionResults','displayCritical','battleAnimation','_effectDuration','Scene_Battle_partyCommandWindowRect','Spriteset_Battle_createLowerLayer','extraPositionY','uRVUx','LbRnU','battleUIOffsetY','Shadow','pattern','CVQyO','isTpbCharged','onEnemyOk','checkShowHideBattleNotetags','10588FLYDbl','VisuMZ_2_BattleSystemATB','tpbActorSwitchConditionsMet','reserveCommonEvent','PreApply%1JS','onFloatEnd','missile','clearActiveWeaponSlot','_borderPortraitSprite','evbad','JumpToLabel','HpGaugeOffsetX','faqKO','Uvgea','FlinchDuration','addSkillCommands','DPrFD','Sprite_Actor_moveToStartPosition','IbDOh','_statusWindow','CmdIconAutoBattle','PostDamageAsTargetJS','ActSeq_Mechanics_Multipliers','transform','lWwLk','GeLwW','_battleCoreAddedElements','waitForNewLine','_tempEquipCheck','ChantStyle','CriticalHitRate','\x5cI[%1]%2','targetActionSet','qKjfW','xhRom','HalfActions','_appeared','lvrhv','charged','emerge','ActSeq_BattleLog_PushBaseLine','fillRect','currentSymbol','EmVlh','UESCi','setCommonEvent','Window_BattleStatus_initialize','isGuardWaiting','applySoftDamageCap','_cacheTextWidth','message4','Window_BattleLog_performRecovery','_back1Sprite','isFloating','autoBattleStyle','VisuMZ_1_MainMenuCore','performJump','MFrzN','width','drawActorFace','addBattleCoreAutoBattleStartupCommand','_enemyNameContainer','Window_BattleLog_displayMpDamage','escape','DisCR','lDhdw','efJev','gainBravePoints','frameCount','AnchorX','Radius','CriticalHitFlat','_opacityWholeDuration','saWyy','isChangingOpacity','_battleLayoutStyle','setValue','fzzlt','refreshActorPortrait','JtXet','AUTO\x20BATTLE','focus','isDamagePopupRequested','okwCd','critical','jyxwl','drawBackgroundRect','Window_BattleLog_displayCurrentState','getItemDamageAmountTextOriginal','PreRegenerateJS','AutoBattle','updateForceAction','Window_BattleLog_performMiss','ActSeq_Animation_ActionAnimation','adjustPosition_1for1','setVisibleUI','drawSkillCost','cHcxv','ShowSubstitute','name','right','Heqkx','processBorderActor','arPenRate','AutoNotetag','CastAnimation','setHome','filters','processRefresh','createHelpWindow','battlerName','ReSNW','WaitForMovement','okButtonText','bOnDG','LVCzt','startFloat','ShowPopup','BindCommonEventKeysForGroup','clearWeaponAnimation','_effectsContainer','ActSeq_Movement_HomeMoveToPoint','canUse','gxqgs','setSTBExploited','Window_BattleLog_refresh','performMagicEvasion','skill','StyleOFF','criticalDmgFlat','autoBattleAtStart','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','dragonbonesData','fQzLZ','commandAutoBattle','performSubstitute','processPostBattleCommonEvents','animationNextDelay','HelpItem','AsTarget','processRandomizedData','AdjustRect','_eventId','Scene_Battle_startEnemySelection','prxpt','STR','isAutoBattle','MLDgN','WaitForJump','AynmN','agbij','updateLink','iconText','OzCwb','isAnyoneFloating','applyHardDamageCap','ActSeq_Impact_MotionBlurTarget','hILOW','_tpbNeedsPartyCommand','faceWidth','DTiLy','regionId','RegExp','StatusWindowAttachmentBackOffsetY','currentExt','ActSeq_Movement_Scale','message1','applyItem','uaGqD','_dimmerSprite','PbsRw','ext','ActSeq_ChangeSkew','HNqEx','EFyeH','Override','concat','processBattleCoreJS','ForceRandom','3fvhPxv','_waitMode','createBattleUIOffsetX','_endBattle','Sprite_Battleback_adjustPosition','softDamageCap','Game_Action_isForFriend','PreDamageAsUserJS','ActSeq_Horror_NoiseRemove','Scene_Map_launchBattle','displayStartMessages','_floatHeight','TpGaugeOffsetX','clnWW','isBypassDamageCap','Sprite_Battler_isMoving','Scene_Battle_windowAreaHeight','BindCommonEventKeysForObj','ActSeq_Mechanics_BoostPointsChange','AS\x20TARGET','Window_ActorCommand_setup','PostApplyJS','onRegeneratePlayStateAnimation','WaitForEffect','updateFloat','endAnimation','isEffecting','OqMOg','maxItems','NJfml','updateHelp','VisuMZ_3_SideviewBattleUI','Window_BattleLog_displayFailure','startActorSelection','addState','dbzbD','isSideView','ConvertCount','description','ParseSkillNotetags','actionBattleCoreJS','ParseArmorNotetags','setupRgbSplitImpactFilter','_stypeIDs','isAnyoneJumping','_freezeMotionData','ActionStart','QfEKp','launchBattle','startActorCommandSelection','ForceDeath','applyResultSwitches','BattleManager_startTurn','TUwHX','FYdTh','isUndecided','isAnyoneGrowing','drawSingleSkillCost','_skewX','sortDamageSprites','createActors','_surprise','Text','spinBattler','canGuardBattleCore','stepBack','autoSelectLastSelected','isForFriendBattleCore','mainSpriteHeight','JS\x20%1DAMAGE\x20%2','ScCtD','addAttackCommand','addSingleSkillCommands','update','bwYgN','Scene_Battle_createPartyCommandWindow','UbapU','lukEffectRate','hardDamageCap','dead','isAnimationPlaying','mcRtq','CommonEventID','autoBattleStart','ActSeq_Mechanics_AnalyzeWeakness','Sprite_Actor_updateFrame','_backAttachmentSprite','performAttack','sort','_angleWholeDuration','updateAction','_flinched','changeBattlebacks','OLPKn','Scene_Battle_initialize','uOgWU','callOkHandler','gWCgJ','JS\x20ESCAPE\x20FAILURE','ActionAnimation','ActSeq_Motion_MotionType','drawItemStyleIcon','SlotID','cfQab','createStateIconSprite','_jumpHeight','StepDistanceY','executeDamage','dimColor2','_pattern','bgType','CurrentTurn','oqPKq','ActSeq_Mechanics_VariablePopup','weatherPower','JS\x20%1REGENERATE','PreApplyJS','_opacityEasing','useItem','callUpdateHelp','Scene_Battle_startPartyCommandSelection','cpVDy','compareBattlerSprites','getAttackMotionSlot','ARRAYFUNC','isCustomActionSequence','_flashColor','Height','displayCounter','rmbvs','_lineHeight','skillItemWindowRectMiddle','_offsetY','callNextMethod','_customDamageFormula','VisuMZ_2_BattleSystemFTB','isWaiting','CheckMapBattleEventValid','onEnemyCancel','HIzYe','ActSeq_Mechanics_SwapWeapon','evalDamageFormula','Window_ActorCommand_initialize','ActSeq_Camera_Offset','_growDuration','_distortionSprite','_createCursorArea','Sprite_Weapon_loadBitmap','onJumpEnd','EVAL','ActSeq_Mechanics_TextPopup','tpbCommandFight','gainHalfActionsPTB','makeTargetSprites','siUhl','ActSeq_Movement_FaceDirection','SkewY','_growWholeDuration','PopupOffsetY','applyDamageCaps','ELIFp','getDefeatedEnemies','clear','damageRate','_damages','basicGaugesY','_updateClientArea','_shadowSprite','Pre','attackAnimationId2','JS\x20%1APPLY\x20%2','WaitCount1','gradientFillRect','inBattle','battleDisplayText','ptLfa','_battleField','bKbIE','displayEvasion','StepDuration','HpGaugeOffsetY','_homeEasing','_reflectionTarget','_enemyID'];_0x2f15=function(){return _0x420320;};return _0x2f15();}Sprite_HpGauge[_0x35b5eb(0x73b)]=Object[_0x35b5eb(0x800)](Sprite_Gauge[_0x35b5eb(0x73b)]),Sprite_HpGauge['prototype'][_0x35b5eb(0x62e)]=Sprite_HpGauge,Sprite_HpGauge[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(){const _0x367877=_0x35b5eb;Sprite_Gauge['prototype']['initialize'][_0x367877(0x541)](this);},Sprite_HpGauge[_0x35b5eb(0x73b)][_0x35b5eb(0x48d)]=function(){return 0x0;},Sprite_HpGauge[_0x35b5eb(0x73b)][_0x35b5eb(0x71b)]=function(){const _0x48b253=_0x35b5eb;this[_0x48b253(0x89a)][_0x48b253(0xa37)]();const _0x1fea8b=this['currentValue']();!isNaN(_0x1fea8b)&&this['drawGauge']();};function Sprite_EnemyName(){const _0x130bb1=_0x35b5eb;this[_0x130bb1(0x255)](...arguments);}function _0x1d81(_0x8c9bd8,_0x5a69e4){const _0x2f1594=_0x2f15();return _0x1d81=function(_0x1d817b,_0x8b6ece){_0x1d817b=_0x1d817b-0xbb;let _0x471ee5=_0x2f1594[_0x1d817b];return _0x471ee5;},_0x1d81(_0x8c9bd8,_0x5a69e4);}Sprite_EnemyName[_0x35b5eb(0x73b)]=Object['create'](Sprite_Name[_0x35b5eb(0x73b)]),Sprite_EnemyName['prototype']['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x35b5eb(0x73b)]['initialize']=function(){const _0x4ac7b8=_0x35b5eb;Sprite_Name[_0x4ac7b8(0x73b)][_0x4ac7b8(0x255)][_0x4ac7b8(0x541)](this),this[_0x4ac7b8(0x887)]();},Sprite_EnemyName['prototype']['initMembers']=function(){const _0x90d6eb=_0x35b5eb;Sprite_Name[_0x90d6eb(0x73b)][_0x90d6eb(0x186)]['call'](this),this[_0x90d6eb(0x1be)]=0x0,this['_linkedSprite']=null,this[_0x90d6eb(0xabd)]['x']=0.5,this[_0x90d6eb(0xabd)]['y']=0x0;},Sprite_EnemyName[_0x35b5eb(0x73b)]['createAttachedSprites']=function(){const _0x3a7ff2=_0x35b5eb;if(VisuMZ['BattleCore'][_0x3a7ff2(0x3cb)]['Enemy'][_0x3a7ff2(0x624)]){if(_0x3a7ff2(0x937)!=='dtiRv')this[_0x3a7ff2(0x59a)]=new Sprite_StateIcon(),this[_0x3a7ff2(0x835)](this['_stateIconSprite']);else return _0x52c4e0[_0x3a7ff2(0x781)]['Settings'][_0x3a7ff2(0x450)][_0x3a7ff2(0xa68)];}},Sprite_EnemyName[_0x35b5eb(0x73b)]['bitmapWidth']=function(){const _0xe5342b=_0x35b5eb;return Graphics[_0xe5342b(0x1b4)];},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x7a7)]=function(){const _0x5485b0=_0x35b5eb;return this[_0x5485b0(0xa17)]=this[_0x5485b0(0xa17)]||Window_Base[_0x5485b0(0x73b)][_0x5485b0(0x3b4)]()||0x24,this[_0x5485b0(0xa17)]*0x4;},Sprite_EnemyName[_0x35b5eb(0x73b)]['fontSize']=function(){const _0x23c2d1=_0x35b5eb;return VisuMZ[_0x23c2d1(0x781)][_0x23c2d1(0x3cb)][_0x23c2d1(0xac3)][_0x23c2d1(0x3f3)]||$gameSystem[_0x23c2d1(0x4a8)]();},Sprite_EnemyName[_0x35b5eb(0x73b)]['linkSprite']=function(_0x1a5ce4){this['_linkedSprite']=_0x1a5ce4;},Sprite_EnemyName['prototype'][_0x35b5eb(0x9de)]=function(){const _0x280781=_0x35b5eb;Sprite_Name[_0x280781(0x73b)][_0x280781(0x9de)][_0x280781(0x541)](this),this[_0x280781(0x979)](),this[_0x280781(0x5fc)](),this[_0x280781(0x1d4)](),this[_0x280781(0x34f)]();},Sprite_EnemyName[_0x35b5eb(0x73b)]['redraw']=function(){const _0x3ad496=_0x35b5eb;this[_0x3ad496(0x913)]=undefined;const _0x391e9e=this[_0x3ad496(0x945)](),_0x166675=this['bitmapWidth'](),_0x1def23=Window_Base[_0x3ad496(0x73b)][_0x3ad496(0x3b4)]();this[_0x3ad496(0x516)](),this[_0x3ad496(0x89a)][_0x3ad496(0xa37)](),this[_0x3ad496(0x89a)][_0x3ad496(0x891)](_0x391e9e,0x0,0x0,_0x166675,_0x1def23,_0x3ad496(0x321));},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x979)]=function(){const _0x32930e=_0x35b5eb;if(!this[_0x32930e(0x81e)])return;this['_battler']!==this[_0x32930e(0x81e)][_0x32930e(0xb0d)]&&this[_0x32930e(0x65b)](this[_0x32930e(0x81e)][_0x32930e(0xb0d)]);},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x5fc)]=function(){const _0x3ca601=_0x35b5eb;if(!this[_0x3ca601(0x81e)])return;this[_0x3ca601(0xa17)]=this[_0x3ca601(0xa17)]||Window_Base[_0x3ca601(0x73b)][_0x3ca601(0x3b4)](),this['x']=this[_0x3ca601(0x81e)][_0x3ca601(0x74d)],this['y']=this[_0x3ca601(0x81e)][_0x3ca601(0x740)]-this[_0x3ca601(0xa17)]*0.5;const _0x31b396=VisuMZ[_0x3ca601(0x781)][_0x3ca601(0x3cb)][_0x3ca601(0xac3)];this['x']+=_0x31b396['NameOffsetX']||0x0,this['y']+=_0x31b396['NameOffsetY']||0x0;},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x1d4)]=function(){const _0x1ed3b7=_0x35b5eb;this[_0x1ed3b7(0x128)]();},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x128)]=function(){const _0x210a9c=_0x35b5eb;if(!this[_0x210a9c(0x59a)])return;this[_0x210a9c(0xb0d)]!==this[_0x210a9c(0x59a)]['_battler']&&(_0x210a9c(0x32e)!==_0x210a9c(0x317)?this[_0x210a9c(0x59a)]['setup'](this['_battler']):this[_0x210a9c(0x67a)](_0x210a9c(0x535)));const _0x1a04e0=this[_0x210a9c(0x198)]();this['_lineHeight']=this[_0x210a9c(0xa17)]||Window_Base[_0x210a9c(0x73b)][_0x210a9c(0x3b4)](),this['_stateIconSprite']['x']=Math[_0x210a9c(0x3d5)]((_0x1a04e0+ImageManager[_0x210a9c(0x71c)])/0x2)+0x8,this[_0x210a9c(0x59a)]['y']=this[_0x210a9c(0xa17)]/0x2;const _0x1d7bc6=VisuMZ[_0x210a9c(0x781)]['Settings'][_0x210a9c(0xac3)];this[_0x210a9c(0x59a)]['x']+=_0x1d7bc6[_0x210a9c(0xa77)]||0x0,this[_0x210a9c(0x59a)]['y']+=_0x1d7bc6[_0x210a9c(0xa80)]||0x0;},Sprite_EnemyName['prototype']['updateOpacity']=function(){const _0x2c4dda=_0x35b5eb,_0x2dd9fd=this[_0x2c4dda(0x2b3)]();if(_0x2dd9fd&&this[_0x2c4dda(0x1be)]<0xff)this[_0x2c4dda(0x1be)]+=0x10;else!_0x2dd9fd&&this[_0x2c4dda(0x1be)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x35b5eb(0x73b)]['visibilityState']=function(){const _0xc73fc=_0x35b5eb;if(this[_0xc73fc(0x3e3)]()){if(_0xc73fc(0x8ad)!==_0xc73fc(0x831))return![];else _0x33779c=_0x49beba[_0xc73fc(0x3f1)](_0x592a5d);}else{if(!this['_battler']){if(_0xc73fc(0xadb)===_0xc73fc(0xadb))return![];else this['process_VisuMZ_BattleCore_Failsafes'](),this[_0xc73fc(0x6ba)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0xc73fc(0x847)](),_0x36cf0e['BattleCore']['Scene_Boot_onDatabaseLoaded'][_0xc73fc(0x541)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0xc73fc(0x505)](),this[_0xc73fc(0x38c)](),this[_0xc73fc(0xb16)]();}else{if(this[_0xc73fc(0xb0d)][_0xc73fc(0x1b2)]())return![];else{if(!this[_0xc73fc(0xb0d)][_0xc73fc(0x690)]())return![];else{if(this[_0xc73fc(0x54a)]())return!![];else{if(this['isAlwaysVisible']()){if(_0xc73fc(0x20b)!==_0xc73fc(0x20b))this[_0xc73fc(0x893)]()?delete _0x250c96[_0xc73fc(0xae2)][_0xc73fc(0xabb)]:_0x2511c4[_0xc73fc(0xaaa)](_0xc73fc(0xabb),this[_0xc73fc(0x5a1)]['bind'](this));else return!![];}else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0xc73fc(0x1be)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x3e3)]=function(){const _0x46eeb9=_0x35b5eb;return VisuMZ[_0x46eeb9(0x781)]['Settings'][_0x46eeb9(0xac3)][_0x46eeb9(0x502)];},Sprite_EnemyName[_0x35b5eb(0x73b)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x31a)]=function(){const _0x2df49c=_0x35b5eb;return VisuMZ[_0x2df49c(0x781)][_0x2df49c(0x3cb)][_0x2df49c(0xac3)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x461)]=function(){const _0x4bdae4=_0x35b5eb;return VisuMZ['BattleCore'][_0x4bdae4(0x3cb)][_0x4bdae4(0xac3)]['NameAlwaysSelectOnly']?this[_0x4bdae4(0xb0d)]['isSelected']():_0x4bdae4(0x447)!==_0x4bdae4(0xb12)?SceneManager[_0x4bdae4(0x885)][_0x4bdae4(0x8b0)]&&SceneManager[_0x4bdae4(0x885)][_0x4bdae4(0x8b0)]['active']&&SceneManager[_0x4bdae4(0x885)][_0x4bdae4(0x8b0)]['_enemies']['includes'](this[_0x4bdae4(0xb0d)]):this['height']*this[_0x4bdae4(0x354)]();},Sprite_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x198)]=function(){const _0x45158b=_0x35b5eb;if(!this['_battler'])return 0x0;if(this['_cacheTextWidth'])return this[_0x45158b(0x913)];const _0x339cc4=this['name']();return this['setupFont'](),this[_0x45158b(0x913)]=this['bitmap']['measureTextWidth'](_0x339cc4)||0x1,this[_0x45158b(0x913)];},VisuMZ[_0x35b5eb(0x781)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback[_0x35b5eb(0x73b)][_0x35b5eb(0x60d)],Sprite_Battleback[_0x35b5eb(0x73b)][_0x35b5eb(0x60d)]=function(){const _0x5931ee=_0x35b5eb,_0x1ff4f6=VisuMZ['BattleCore']['Settings'][_0x5931ee(0x674)];if(!_0x1ff4f6)return VisuMZ[_0x5931ee(0x781)][_0x5931ee(0x999)]['call'](this);const _0x86467=String(_0x1ff4f6[_0x5931ee(0x272)])||'MZ';switch(_0x86467){case'MZ':VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition']['call'](this);break;case'1:1':this[_0x5931ee(0x940)]();break;case'ScaleToFit':this[_0x5931ee(0x2bf)]();break;case'ScaleDown':this[_0x5931ee(0x175)]();break;case _0x5931ee(0x27d):this[_0x5931ee(0x68a)]();break;}},Sprite_Battleback[_0x35b5eb(0x73b)][_0x35b5eb(0x940)]=function(){const _0x3f77b0=_0x35b5eb;this[_0x3f77b0(0x91c)]=Graphics[_0x3f77b0(0x91c)],this[_0x3f77b0(0x491)]=Graphics[_0x3f77b0(0x491)];const _0x4908d7=0x1;this['scale']['x']=_0x4908d7,this['scale']['y']=_0x4908d7,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x35b5eb(0x2bf)]=function(){const _0x57c875=_0x35b5eb;this[_0x57c875(0x91c)]=Graphics[_0x57c875(0x91c)],this['height']=Graphics['height'];const _0x3472ab=this[_0x57c875(0x91c)]/this[_0x57c875(0x89a)]['width'],_0x79b3a5=this['height']/this[_0x57c875(0x89a)]['height'],_0x3f9bdc=Math[_0x57c875(0x2a3)](_0x3472ab,_0x79b3a5);this[_0x57c875(0xac1)]['x']=_0x3f9bdc,this[_0x57c875(0xac1)]['y']=_0x3f9bdc,this['x']=(Graphics[_0x57c875(0x91c)]-this['width'])/0x2,this['y']=Graphics[_0x57c875(0x491)]-this[_0x57c875(0x491)];},Sprite_Battleback['prototype']['adjustPosition_ScaleDown']=function(){const _0x273148=_0x35b5eb;this['width']=Graphics[_0x273148(0x91c)],this['height']=Graphics['height'];const _0x1c0336=Math[_0x273148(0x4bc)](0x1,this[_0x273148(0x91c)]/this[_0x273148(0x89a)][_0x273148(0x91c)]),_0x35bb64=Math[_0x273148(0x4bc)](0x1,this[_0x273148(0x491)]/this[_0x273148(0x89a)]['height']),_0x51e60c=Math['max'](_0x1c0336,_0x35bb64);this['scale']['x']=_0x51e60c,this['scale']['y']=_0x51e60c,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x273148(0x491)]-this[_0x273148(0x491)];},Sprite_Battleback['prototype'][_0x35b5eb(0x68a)]=function(){const _0x187a7d=_0x35b5eb;this[_0x187a7d(0x91c)]=Graphics[_0x187a7d(0x91c)],this[_0x187a7d(0x491)]=Graphics[_0x187a7d(0x491)];const _0x46e156=Math['max'](0x1,this['width']/this[_0x187a7d(0x89a)][_0x187a7d(0x91c)]),_0x454765=Math[_0x187a7d(0x2a3)](0x1,this['height']/this[_0x187a7d(0x89a)][_0x187a7d(0x491)]),_0x2cb013=Math['max'](_0x46e156,_0x454765);this[_0x187a7d(0xac1)]['x']=_0x2cb013,this[_0x187a7d(0xac1)]['y']=_0x2cb013,this['x']=(Graphics[_0x187a7d(0x91c)]-this[_0x187a7d(0x91c)])/0x2,this['y']=Graphics[_0x187a7d(0x491)]-this[_0x187a7d(0x491)];},Spriteset_Battle[_0x35b5eb(0x2f8)]=VisuMZ[_0x35b5eb(0x781)]['Settings'][_0x35b5eb(0x842)][_0x35b5eb(0x435)]??!![],Spriteset_Battle['prototype'][_0x35b5eb(0xb05)]=function(){const _0x54aeb5=_0x35b5eb;if(!$gameSystem[_0x54aeb5(0x9b9)]())return![];return![];},Spriteset_Battle[_0x35b5eb(0x73b)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x96b)]=function(){return 0x0;},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x8d7)]=Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x343)],Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x343)]=function(){const _0x71fcc1=_0x35b5eb;VisuMZ[_0x71fcc1(0x781)]['Spriteset_Battle_createLowerLayer']['call'](this),this[_0x71fcc1(0x373)](),this[_0x71fcc1(0x2d3)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x544)]=Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x9de)],Spriteset_Battle['prototype']['update']=function(){const _0x4343f8=_0x35b5eb;VisuMZ[_0x4343f8(0x781)]['Spriteset_Battle_update'][_0x4343f8(0x541)](this),this['updateUiContainerPosition'](),this[_0x4343f8(0x204)]();},Spriteset_Battle[_0x35b5eb(0x73b)]['createWeather']=function(){const _0x49153a=_0x35b5eb;this[_0x49153a(0x808)]=new Weather(),this['_battleField'][_0x49153a(0x835)](this[_0x49153a(0x808)]);},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x204)]=function(){const _0x4ffe7a=_0x35b5eb;this[_0x4ffe7a(0x808)]['type']=$gameScreen[_0x4ffe7a(0x6c9)](),this[_0x4ffe7a(0x808)][_0x4ffe7a(0xd4)]=$gameScreen[_0x4ffe7a(0xa07)]();},Game_Interpreter[_0x35b5eb(0x73b)]['command236']=function(_0x18f798){const _0x12693b=_0x35b5eb;$gameScreen[_0x12693b(0x214)](_0x18f798[0x0],_0x18f798[0x1],_0x18f798[0x2]);if(_0x18f798[0x3])this[_0x12693b(0x17d)](_0x18f798[0x2]);return!![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x6f7)]=Game_Interpreter[_0x35b5eb(0x73b)][_0x35b5eb(0x44c)],Game_Interpreter['prototype'][_0x35b5eb(0x44c)]=function(_0xb02c38){const _0xc2e154=_0x35b5eb;if(SceneManager['isSceneBattle']())return SceneManager[_0xc2e154(0x885)][_0xc2e154(0x254)]['changeBattlebacks'](_0xb02c38[0x0],_0xb02c38[0x1]),!![];else{if(_0xc2e154(0x62f)===_0xc2e154(0x62f))return VisuMZ[_0xc2e154(0x781)]['Game_Interpreter_command283'][_0xc2e154(0x541)](this,_0xb02c38);else{const _0x341b09=_0x4b306b['_scene'][_0xc2e154(0x7d7)]();this[_0xc2e154(0xa87)](_0x341b09['x'],_0x341b09['y'],_0x341b09[_0xc2e154(0x91c)],_0x341b09['height']),this['createContents'](),this[_0xc2e154(0x897)](0x0);}}},Spriteset_Battle[_0x35b5eb(0x73b)]['updateBattlebackBitmap']=function(_0x37133c,_0x39a4c6){_0x37133c['bitmap']=_0x39a4c6;},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x9f1)]=function(_0x2ca352,_0x2aa094){const _0x16f79b=_0x35b5eb;_0x2ca352=_0x2ca352||'',_0x2aa094=_0x2aa094||'';_0x2ca352===''&&_0x2aa094===''&&(_0x2ca352=this[_0x16f79b(0x916)][_0x16f79b(0xab0)](),_0x2aa094=this[_0x16f79b(0x23e)][_0x16f79b(0x8b4)]());const _0x3e36a7=ImageManager['loadBattleback1'](_0x2ca352),_0x3e3c0e=ImageManager[_0x16f79b(0x8a3)](_0x2aa094);_0x3e36a7[_0x16f79b(0x7ea)](this[_0x16f79b(0x296)]['bind'](this,this['_back1Sprite'],this[_0x16f79b(0x23e)],_0x3e36a7,_0x3e3c0e));},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x296)]=function(_0x303d07,_0x1cece2,_0x109774,_0x112565){const _0x4535a9=_0x35b5eb;_0x112565[_0x4535a9(0x7ea)](this[_0x4535a9(0xc9)][_0x4535a9(0x4eb)](this,_0x303d07,_0x1cece2,_0x109774,_0x112565));},Spriteset_Battle[_0x35b5eb(0x73b)]['updateBattlebackBitmap2']=function(_0xa08bf3,_0x31bee7,_0x20bed2,_0xb54fdc){const _0x19527a=_0x35b5eb;_0xa08bf3['bitmap']=_0x20bed2,_0x31bee7['bitmap']=_0xb54fdc,_0xa08bf3[_0x19527a(0x60d)](),_0x31bee7['adjustPosition']();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x84e)]=Spriteset_Battle['prototype'][_0x35b5eb(0x592)],Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x592)]=function(){const _0x2a0f31=_0x35b5eb;VisuMZ['BattleCore']['Spriteset_Battle_createBattleField'][_0x2a0f31(0x541)](this),this[_0x2a0f31(0xa8c)]();},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xa8c)]=function(){const _0x42d5c5=_0x35b5eb;this[_0x42d5c5(0x302)](),this[_0x42d5c5(0x88f)](),this[_0x42d5c5(0x378)](),this[_0x42d5c5(0xb08)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x302)]=function(){const _0x5d9198=_0x35b5eb;this[_0x5d9198(0xaec)]=new Sprite(),this[_0x5d9198(0xa45)][_0x5d9198(0x835)](this[_0x5d9198(0xaec)]);},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x378)]=function(){const _0x401b7b=_0x35b5eb;this[_0x401b7b(0x173)]=new Sprite();if(Spriteset_Battle['ANTI_TINT_UI'])_0x401b7b(0x587)!==_0x401b7b(0xb30)?this['addChild'](this[_0x401b7b(0x173)]):_0x5784b5=_0x17eee2[_0x401b7b(0x781)][_0x401b7b(0xe0)][_0x401b7b(0x541)](this);else{if(_0x401b7b(0x207)!=='xyLwY'){const _0x1ccd26=this[_0x401b7b(0x239)](),_0xc60410=_0x431ece[_0x401b7b(0x781)]['Settings']['PartyCmd'][_0x401b7b(0x5ff)],_0x2e62cf=_0x1ccd26===_0x401b7b(0x863)?_0x3d117a[_0x401b7b(0x921)]:_0x401b7b(0x901)[_0x401b7b(0x4ed)](_0xc60410,_0x467319[_0x401b7b(0x921)]),_0x496d39=this['isEscapeCommandEnabled']();this[_0x401b7b(0x675)](_0x2e62cf,_0x401b7b(0x921),_0x496d39);}else this[_0x401b7b(0xa45)][_0x401b7b(0x835)](this[_0x401b7b(0x173)]);}},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0xb08)]=function(){const _0x14d36a=_0x35b5eb;this[_0x14d36a(0x8ab)]=new Sprite(),this[_0x14d36a(0x8ab)]['x']=this[_0x14d36a(0xa45)]['x'],this[_0x14d36a(0x8ab)]['y']=this[_0x14d36a(0xa45)]['y'],this[_0x14d36a(0x835)](this[_0x14d36a(0x8ab)]);},Spriteset_Battle['prototype'][_0x35b5eb(0xa65)]=function(){const _0x5a15a6=_0x35b5eb;if(!this['isFlipped']())return;this[_0x5a15a6(0xaec)][_0x5a15a6(0xac1)]['x']=-0x1,this[_0x5a15a6(0xaec)]['x']=this[_0x5a15a6(0xa45)][_0x5a15a6(0x91c)],this[_0x5a15a6(0x183)][_0x5a15a6(0xac1)]['x']=-0x1,this[_0x5a15a6(0x183)]['x']=this[_0x5a15a6(0xa45)][_0x5a15a6(0x91c)],this[_0x5a15a6(0x173)]['scale']['x']=-0x1,this[_0x5a15a6(0x173)]['x']=this[_0x5a15a6(0xa45)][_0x5a15a6(0x91c)],this[_0x5a15a6(0x8ab)][_0x5a15a6(0xac1)]['x']=-0x1,this[_0x5a15a6(0x8ab)]['x']=this[_0x5a15a6(0xa45)]['x']+this[_0x5a15a6(0xa45)][_0x5a15a6(0x91c)];},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x159)]=function(){const _0x2b7a26=_0x35b5eb;Imported['VisuMZ_0_CoreEngine']&&this[_0x2b7a26(0x22f)]()&&this[_0x2b7a26(0x423)]();const _0x1ce913=$gameTroop[_0x2b7a26(0x7ba)](),_0x354f94=[];for(const _0x3ec0b6 of _0x1ce913){'ZlBhC'===_0x2b7a26(0x6b0)?_0x354f94['push'](new Sprite_Enemy(_0x3ec0b6)):this[_0x2b7a26(0x67a)](_0x2b7a26(0x6de));}_0x354f94[_0x2b7a26(0x9ed)](this[_0x2b7a26(0xc1)]['bind'](this));for(const _0x59799e of _0x354f94){this['_battlerContainer'][_0x2b7a26(0x835)](_0x59799e);}this[_0x2b7a26(0x7e4)]=_0x354f94;},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x9d1)]=function(){const _0x58bf0c=_0x35b5eb;this['_actorSprites']=[];for(let _0x4a579e=0x0;_0x4a579e<$gameParty[_0x58bf0c(0x2da)]();_0x4a579e++){const _0x4c65f8=$gameParty['battleMembers']()[_0x4a579e],_0x587299=new Sprite_Actor();_0x587299['moveToStartPositionBattleCore'](_0x4c65f8),_0x587299[_0x58bf0c(0x6f5)](_0x4c65f8),_0x587299[_0x58bf0c(0x9de)](),this[_0x58bf0c(0x5e7)]['push'](_0x587299),this[_0x58bf0c(0xaec)]['addChild'](_0x587299);}},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x38f)]=function(_0x275ed2,_0x4d518c,_0xb8c12a,_0x4cb148){const _0x1acce4=_0x35b5eb,_0x18c0ab=this[_0x1acce4(0x6b6)](_0x4d518c),_0x321db5=new(_0x18c0ab?Sprite_AnimationMV:Sprite_Animation)(),_0x167815=this[_0x1acce4(0xa2e)](_0x275ed2);this[_0x1acce4(0x837)](_0x275ed2[0x0])&&(_0xb8c12a=!_0xb8c12a),_0x321db5['targetObjects']=_0x275ed2,_0x321db5[_0x1acce4(0x65b)](_0x167815,_0x4d518c,_0xb8c12a,_0x4cb148),this[_0x1acce4(0x5ec)](_0x321db5);},Spriteset_Battle['prototype']['addAnimationSpriteToContainer']=function(_0x5eb635){const _0xce1641=_0x35b5eb;if(this['isAnimationShownOnBattlePortrait'](_0x5eb635)){if(_0xce1641(0x344)===_0xce1641(0x344))this[_0xce1641(0x6ab)]()['addChild'](_0x5eb635);else{const _0x72488=_0x4d7ec1(_0x588587['$1']);return[_0xaf25fc[_0xce1641(0xa91)]()[_0xce1641(0x7ba)]()[_0x72488]];}}else this[_0xce1641(0x173)]['addChild'](_0x5eb635);this[_0xce1641(0x6e1)][_0xce1641(0x7c7)](_0x5eb635);},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x52d)]=function(_0x597fc3){const _0x109ca6=_0x35b5eb;if(!_0x597fc3)return![];if(!_0x597fc3[_0x109ca6(0x3b3)])return![];if(!_0x597fc3[_0x109ca6(0x455)][0x0])return![];if(_0x597fc3[_0x109ca6(0x455)][0x0][_0x109ca6(0xa6f)]&&!_0x597fc3[_0x109ca6(0x455)][0x0]['isActor']())return![];if($gameSystem['isSideView']())return![];if(!this[_0x109ca6(0x6ab)]())return![];if(_0x597fc3['constructor']===Sprite_Animation){if('mhNNu'===_0x109ca6(0xa5f)){if(_0x597fc3['_animation']['displayType']!==0x0)return![];}else{this['removeAnimationFromContainer'](_0x1c7be1);for(const _0x570ce8 of _0x882741[_0x109ca6(0x455)]){_0x570ce8[_0x109ca6(0x9ae)]&&_0x570ce8['endAnimation']();}_0x2d6971[_0x109ca6(0x327)]();}}else{if(_0x597fc3[_0x109ca6(0x62e)]===Sprite_AnimationMV){if(_0x597fc3['_animation'][_0x109ca6(0x5d9)]===0x3)return![];}}return!![];const _0x50865f=Window_BattleStatus[_0x109ca6(0x73b)][_0x109ca6(0xd6)]();return['xp',_0x109ca6(0xf2)]['contains'](_0x50865f);},Spriteset_Battle[_0x35b5eb(0x73b)]['battleStatusWindowAnimationContainer']=function(){const _0x594e54=_0x35b5eb;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x594e54(0x885)][_0x594e54(0x8f5)])return null;if(!SceneManager[_0x594e54(0x885)][_0x594e54(0x8f5)]['_effectsContainer'])return null;return SceneManager['_scene'][_0x594e54(0x8f5)]['_effectsContainer'];},Spriteset_Battle['prototype'][_0x35b5eb(0xda)]=function(_0x209bea){const _0x1bb2a5=_0x35b5eb;this[_0x1bb2a5(0x63e)](_0x209bea);for(const _0x382bb2 of _0x209bea['targetObjects']){_0x382bb2['endAnimation']&&_0x382bb2[_0x1bb2a5(0x9ae)]();}_0x209bea[_0x1bb2a5(0x327)]();},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x63e)]=function(_0x4c7514){const _0x5b8416=_0x35b5eb;this['_animationSprites']['remove'](_0x4c7514);if(this[_0x5b8416(0x52d)](_0x4c7514)){if('WIGji'===_0x5b8416(0x398))this[_0x5b8416(0x6ab)]()['removeChild'](_0x4c7514);else{if(!this[_0x5b8416(0x5a6)]())return;if(_0x2bf1f4<=0x0)return;this[_0x5b8416(0x4c3)]=_0x49b6f5,this[_0x5b8416(0x596)]=_0x13ec34,this[_0x5b8416(0x79d)]=_0x5a5cd9;}}else this[_0x5b8416(0x173)][_0x5b8416(0x798)](_0x4c7514);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x5b3)]=Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x136)],Spriteset_Battle[_0x35b5eb(0x73b)]['updateActors']=function(){const _0xb354=_0x35b5eb;VisuMZ[_0xb354(0x781)][_0xb354(0x5b3)][_0xb354(0x541)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x35b5eb(0x73b)]['updateBattlerContainer']=function(){const _0x1733bd=_0x35b5eb;this[_0x1733bd(0xaec)][_0x1733bd(0x85e)][_0x1733bd(0x9ed)](this[_0x1733bd(0xa0f)]['bind'](this)),this[_0x1733bd(0x739)]();},Spriteset_Battle[_0x35b5eb(0x73b)]['compareBattlerSprites']=function(_0x1f2fac,_0x363ca6){const _0x22570a=_0x35b5eb;if(VisuMZ[_0x22570a(0x781)]['Settings']['Actor'][_0x22570a(0x768)]){if(_0x1f2fac[_0x22570a(0xb0d)]&&_0x363ca6[_0x22570a(0xb0d)]){if(_0x1f2fac['_battler'][_0x22570a(0xa6f)]()&&_0x363ca6[_0x22570a(0xb0d)][_0x22570a(0x65c)]()){if(_0x22570a(0xa35)!==_0x22570a(0xa35)){const _0x4d5dd4=this[_0x22570a(0x12b)]();return _0x4d5dd4[_0x3e531c['randomInt'](_0x4d5dd4[_0x22570a(0x1a0)])];}else return 0x1;}else{if(_0x363ca6[_0x22570a(0xb0d)][_0x22570a(0xa6f)]()&&_0x1f2fac['_battler']['isEnemy']())return _0x22570a(0x356)!==_0x22570a(0x356)?_0xe6dd08(_0x1e044f['$1'])*0.01:-0x1;}}}return _0x1f2fac[_0x22570a(0x740)]!==_0x363ca6[_0x22570a(0x740)]?_0x1f2fac[_0x22570a(0x740)]-_0x363ca6[_0x22570a(0x740)]:_0x363ca6[_0x22570a(0x68d)]-_0x1f2fac[_0x22570a(0x68d)];},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x739)]=function(){const _0x4f72a6=_0x35b5eb;if(!VisuMZ[_0x4f72a6(0x781)]['Settings']['Actor']['PrioritySortActive'])return;const _0x3a26b1=BattleManager[_0x4f72a6(0x785)];if(_0x3a26b1){if(_0x3a26b1[_0x4f72a6(0xa6f)]()&&!$gameSystem[_0x4f72a6(0x9b9)]())return;const _0x402c8a=_0x3a26b1[_0x4f72a6(0x691)]();if(_0x402c8a&&_0x3a26b1[_0x4f72a6(0xa6f)]())this[_0x4f72a6(0xaec)][_0x4f72a6(0x835)](_0x402c8a);}},Spriteset_Battle[_0x35b5eb(0x73b)]['processEscape']=function(){const _0x1b295d=_0x35b5eb;for(const _0x38d78e of $gameParty['aliveMembers']()){if(!_0x38d78e)continue;if(!_0x38d78e[_0x1b295d(0x691)]())continue;_0x38d78e[_0x1b295d(0x691)]()['forceEscapeSprite']=!![],_0x38d78e[_0x1b295d(0x691)]()[_0x1b295d(0x149)]();}},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x88f)]=function(){const _0x238c2f=_0x35b5eb;this[_0x238c2f(0x183)]=new Sprite();if(Spriteset_Battle[_0x238c2f(0x2f8)]){if(_0x238c2f(0x601)!==_0x238c2f(0x601)){if(!this[_0x238c2f(0x5a6)]())return;if(!this[_0x238c2f(0xa26)])return;if(this[_0x238c2f(0x6eb)]===_0x2e2709&&this[_0x238c2f(0x752)]===_0x2aad12)return;this['_targetGrowX']=_0x50a8a2,this[_0x238c2f(0x752)]=_0x13a6b0,this[_0x238c2f(0xa25)]=_0x1b1247,this[_0x238c2f(0xa32)]=_0x2fb5ca,this['_growEasing']=_0x2ec074||_0x238c2f(0x62b),_0x4ebbc6<=0x0&&(this[_0x238c2f(0x364)]=this[_0x238c2f(0x6eb)],this[_0x238c2f(0x779)]=this[_0x238c2f(0x752)]);}else this[_0x238c2f(0x835)](this[_0x238c2f(0x183)]);}else this[_0x238c2f(0xa45)]['addChild'](this['_uiContainer']);SceneManager['_scene'][_0x238c2f(0x183)]=this[_0x238c2f(0x183)];},Spriteset_Battle[_0x35b5eb(0x73b)]['createEnemyNames']=function(){const _0x1928cc=_0x35b5eb;if(VisuMZ[_0x1928cc(0x781)][_0x1928cc(0x3cb)][_0x1928cc(0xac3)][_0x1928cc(0x458)])return;this[_0x1928cc(0x91f)]=new Sprite(),BattleManager[_0x1928cc(0x801)](this[_0x1928cc(0x91f)]);for(const _0xeb0552 of this['_enemySprites']){const _0x3e5f1c=new Sprite_EnemyName();this[_0x1928cc(0x91f)][_0x1928cc(0x835)](_0x3e5f1c),_0x3e5f1c[_0x1928cc(0x43e)](_0xeb0552);}},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x7ec)]=function(){const _0x16f60a=_0x35b5eb;if(!this[_0x16f60a(0x8ab)])return;if(!this[_0x16f60a(0x183)])return;const _0x42ad5e=Spriteset_Battle[_0x16f60a(0x2f8)]?this[_0x16f60a(0x8ab)]['x']:0x0,_0x31f1cc=Spriteset_Battle[_0x16f60a(0x2f8)]?this[_0x16f60a(0x8ab)]['y']:0x0,_0x2fc827=Imported[_0x16f60a(0x333)]?this['_battleField']['x']:0x0,_0x3d544c=Imported[_0x16f60a(0x333)]?this[_0x16f60a(0xa45)]['y']:0x0;this['_uiContainer']['x']=_0x42ad5e+_0x2fc827,this[_0x16f60a(0x183)]['y']=_0x31f1cc+_0x3d544c;},BattleManager[_0x35b5eb(0x801)]=function(_0x14ab5c){const _0x233704=_0x35b5eb;if(!SceneManager[_0x233704(0x885)][_0x233704(0x183)])return;SceneManager[_0x233704(0x885)][_0x233704(0x183)]['addChild'](_0x14ab5c);},Spriteset_Battle[_0x35b5eb(0x73b)]['isBusy']=function(){return![];},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x97c)]=function(){const _0x2f2760=_0x35b5eb;return this[_0x2f2760(0x1a2)]()[_0x2f2760(0x51b)](_0x21ca56=>_0x21ca56['isFloating']());},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x9c1)]=function(){const _0x134b00=_0x35b5eb;return this[_0x134b00(0x1a2)]()[_0x134b00(0x51b)](_0x110db9=>_0x110db9[_0x134b00(0x29b)]());},Spriteset_Battle['prototype'][_0x35b5eb(0x9cd)]=function(){const _0xd5d976=_0x35b5eb;return this[_0xd5d976(0x1a2)]()[_0xd5d976(0x51b)](_0xd6e9f5=>_0xd6e9f5[_0xd5d976(0x3a7)]());},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x3c8)]=function(){const _0x2c7114=_0x35b5eb;return this['battlerSprites']()[_0x2c7114(0x51b)](_0x543889=>_0x543889[_0x2c7114(0x75f)]());},Spriteset_Battle['prototype'][_0x35b5eb(0xaf9)]=function(){const _0x20e92e=_0x35b5eb;return this[_0x20e92e(0x1a2)]()[_0x20e92e(0x51b)](_0x38f534=>_0x38f534[_0x20e92e(0x70b)]());},Spriteset_Battle[_0x35b5eb(0x73b)][_0x35b5eb(0x565)]=function(){const _0x28c76d=_0x35b5eb;return this['battlerSprites']()['some'](_0x493830=>_0x493830[_0x28c76d(0x92c)]());},VisuMZ[_0x35b5eb(0x781)]['Window_ItemList_maxCols']=Window_ItemList[_0x35b5eb(0x73b)][_0x35b5eb(0xc8)],Window_ItemList[_0x35b5eb(0x73b)][_0x35b5eb(0xc8)]=function(){const _0x4162b1=_0x35b5eb;if(SceneManager[_0x4162b1(0x3a2)]())return SceneManager[_0x4162b1(0x885)]['battleLayoutStyle']()==='border'?VisuMZ[_0x4162b1(0x781)][_0x4162b1(0x3cb)][_0x4162b1(0x842)]['SkillItemBorderCols']:VisuMZ[_0x4162b1(0x781)][_0x4162b1(0x3cb)][_0x4162b1(0x842)][_0x4162b1(0x1fc)];else{if(_0x4162b1(0x11d)===_0x4162b1(0x6fc))this[_0x4162b1(0x4fa)]();else return VisuMZ[_0x4162b1(0x781)][_0x4162b1(0x5f8)][_0x4162b1(0x541)](this);}},VisuMZ[_0x35b5eb(0x781)]['Window_SkillList_maxCols']=Window_SkillList[_0x35b5eb(0x73b)][_0x35b5eb(0xc8)],Window_SkillList['prototype'][_0x35b5eb(0xc8)]=function(){const _0x21c6fc=_0x35b5eb;if(SceneManager[_0x21c6fc(0x3a2)]()){if(SceneManager[_0x21c6fc(0x885)][_0x21c6fc(0xd6)]()===_0x21c6fc(0x390)){if(_0x21c6fc(0xa88)!==_0x21c6fc(0x922))return VisuMZ[_0x21c6fc(0x781)]['Settings'][_0x21c6fc(0x842)][_0x21c6fc(0xcc)];else{const _0x51a23c=_0x12f17b['BattleCore']['Settings'][_0x21c6fc(0x141)];if(!_0x51a23c[_0x21c6fc(0xac5)])return;this[_0x21c6fc(0x7c7)](_0x21c6fc(0x3f0),_0x51a23c['StartTurnMsg'][_0x21c6fc(0x4ed)](_0x389889['turnCount']())),this[_0x21c6fc(0x7c7)](_0x21c6fc(0x4f7),_0x51a23c[_0x21c6fc(0x20f)]),this[_0x21c6fc(0x7c7)](_0x21c6fc(0xa37));}}else{if(_0x21c6fc(0x87e)!==_0x21c6fc(0x1bb))return VisuMZ['BattleCore'][_0x21c6fc(0x3cb)][_0x21c6fc(0x842)]['SkillItemStandardCols'];else{if(!_0x4da41a[_0x21c6fc(0x3a2)]())return;if(!_0x57d90e['VisuMZ_3_ActSeqCamera'])return;const _0x6fa94a=_0x34cbc3['getLastPluginCommandInterpreter']();if(!_0x6fa94a)return;_0x6fa94a[_0x21c6fc(0x7fe)](_0x21c6fc(0x12e));}}}else return VisuMZ[_0x21c6fc(0x781)][_0x21c6fc(0x36d)][_0x21c6fc(0x541)](this);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x270)]=Window_Options[_0x35b5eb(0x73b)]['addGeneralOptions'],Window_Options['prototype'][_0x35b5eb(0x215)]=function(){const _0x4335c9=_0x35b5eb;VisuMZ[_0x4335c9(0x781)][_0x4335c9(0x270)][_0x4335c9(0x541)](this),this['addAutoBattleCommands'](),this[_0x4335c9(0x6f4)]();},Window_Options[_0x35b5eb(0x73b)][_0x35b5eb(0x576)]=function(){const _0x4b6303=_0x35b5eb;if(VisuMZ[_0x4b6303(0x781)][_0x4b6303(0x3cb)][_0x4b6303(0x93c)][_0x4b6303(0x1cb)]){if(_0x4b6303(0x310)!==_0x4b6303(0x310)){if(!_0x1a2710['isSideView']())return;this[_0x4b6303(0x432)]=_0x3a8a26;const _0x584c53=this[_0x4b6303(0x691)]();if(_0x584c53)_0x584c53[_0x4b6303(0x662)]();}else this[_0x4b6303(0x91e)](),this[_0x4b6303(0x58d)]();}},Window_Options[_0x35b5eb(0x73b)][_0x35b5eb(0x6f4)]=function(){const _0x35bec5=_0x35b5eb;if(!VisuMZ[_0x35bec5(0x781)]['Settings'][_0x35bec5(0x478)]['AddHpGaugeOption'])return;const _0x476fdf=TextManager['visualHpGauge'],_0x22954d=_0x35bec5(0x777);this[_0x35bec5(0x675)](_0x476fdf,_0x22954d);},Window_Options[_0x35b5eb(0x73b)][_0x35b5eb(0x91e)]=function(){const _0xe47060=_0x35b5eb,_0x4cc51a=TextManager[_0xe47060(0x9e8)],_0x1b9f95=_0xe47060(0x964);this[_0xe47060(0x675)](_0x4cc51a,_0x1b9f95);},Window_Options[_0x35b5eb(0x73b)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x2119c8=_0x35b5eb,_0x53dfb6=TextManager['autoBattleStyle'],_0x9c95f3=_0x2119c8(0x64b);this[_0x2119c8(0x675)](_0x53dfb6,_0x9c95f3);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x411)]=Window_Options[_0x35b5eb(0x73b)][_0x35b5eb(0x4d3)],Window_Options[_0x35b5eb(0x73b)][_0x35b5eb(0x4d3)]=function(_0x5170c6){const _0x3ec98b=_0x35b5eb,_0x4c7418=this['commandSymbol'](_0x5170c6);return _0x4c7418===_0x3ec98b(0x64b)?this['statusTextAutoBattleStyle']():VisuMZ[_0x3ec98b(0x781)][_0x3ec98b(0x411)][_0x3ec98b(0x541)](this,_0x5170c6);},Window_Options[_0x35b5eb(0x73b)][_0x35b5eb(0x4f9)]=function(){const _0x561d68=_0x35b5eb,_0x1d5ab3=VisuMZ[_0x561d68(0x781)][_0x561d68(0x3cb)][_0x561d68(0x93c)],_0x437e6f=this[_0x561d68(0xb19)](_0x561d68(0x64b));return _0x437e6f?_0x1d5ab3[_0x561d68(0x335)]:_0x1d5ab3[_0x561d68(0x962)];},Window_ShopStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x36e)]=function(){const _0x5b854b=_0x35b5eb,_0x2399fd=DataManager[_0x5b854b(0x4be)](this['_item']),_0x23409e=VisuMZ[_0x5b854b(0x3fe)][_0x2399fd];if(!_0x23409e)return this[_0x5b854b(0x522)]();const _0x385324=_0x5b854b(0x6be)['format'](this[_0x5b854b(0x859)][_0x5b854b(0x21d)][_0x5b854b(0x1f4)]),_0x802594=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item']['damage'][_0x5b854b(0x1f4)]];return _0x23409e[_0x385324][_0x5b854b(0x4ed)](_0x802594);},Window_ShopStatus[_0x35b5eb(0x73b)]['getItemDamageAmountTextBattleCore']=function(){const _0x413acb=_0x35b5eb,_0x33d580=DataManager[_0x413acb(0x4be)](this[_0x413acb(0x859)]),_0x4bf798=VisuMZ[_0x413acb(0x3fe)][_0x33d580];if(!_0x4bf798)return this[_0x413acb(0x93a)]();return _0x4bf798[_0x413acb(0x11e)]['call'](this);},VisuMZ[_0x35b5eb(0x781)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x35b5eb(0x73b)]['initialize'],Window_PartyCommand[_0x35b5eb(0x73b)]['initialize']=function(_0x4e37a3){const _0x13f28d=_0x35b5eb;VisuMZ[_0x13f28d(0x781)][_0x13f28d(0x48e)][_0x13f28d(0x541)](this,_0x4e37a3),this[_0x13f28d(0x44e)](_0x4e37a3);},Window_PartyCommand[_0x35b5eb(0x73b)]['createCommandNameWindow']=function(_0x181bb3){const _0x18d97e=_0x35b5eb,_0x2f95cb=new Rectangle(0x0,0x0,_0x181bb3[_0x18d97e(0x91c)],_0x181bb3[_0x18d97e(0x491)]);this[_0x18d97e(0x707)]=new Window_Base(_0x2f95cb),this[_0x18d97e(0x707)][_0x18d97e(0x1be)]=0x0,this[_0x18d97e(0x835)](this[_0x18d97e(0x707)]),this[_0x18d97e(0x64c)]();},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0xa0c)]=function(){const _0x16e24d=_0x35b5eb;Window_Command[_0x16e24d(0x73b)][_0x16e24d(0xa0c)][_0x16e24d(0x541)](this);if(this[_0x16e24d(0x707)])this[_0x16e24d(0x64c)]();},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x64c)]=function(){const _0x3b3ce5=_0x35b5eb,_0xe350bb=this['_commandNameWindow'];_0xe350bb['contents']['clear']();const _0x1b7091=this[_0x3b3ce5(0x75e)](this['index']());if(_0x1b7091===_0x3b3ce5(0xde)&&this[_0x3b3ce5(0x9b1)]()>0x0){const _0x5d2d72=this[_0x3b3ce5(0x408)](this[_0x3b3ce5(0xcb)]());let _0x50aeb0=this[_0x3b3ce5(0x50d)](this[_0x3b3ce5(0xcb)]());_0x50aeb0=_0x50aeb0[_0x3b3ce5(0x125)](/\\I\[(\d+)\]/gi,''),_0xe350bb[_0x3b3ce5(0x633)](),this['commandNameWindowDrawBackground'](_0x50aeb0,_0x5d2d72),this['commandNameWindowDrawText'](_0x50aeb0,_0x5d2d72),this[_0x3b3ce5(0x4bf)](_0x50aeb0,_0x5d2d72);}},Window_PartyCommand['prototype'][_0x35b5eb(0x465)]=function(_0x18afc8,_0x326be7){},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x2fd)]=function(_0x486a65,_0xe57bc1){const _0x1b8708=_0x35b5eb,_0x3dbbe9=this['_commandNameWindow'];_0x3dbbe9['drawText'](_0x486a65,0x0,_0xe57bc1['y'],_0x3dbbe9[_0x1b8708(0x2eb)],'center');},Window_PartyCommand[_0x35b5eb(0x73b)]['commandNameWindowCenter']=function(_0x480334,_0x9d5233){const _0x15c782=_0x35b5eb,_0x123a71=this[_0x15c782(0x707)],_0x17867b=$gameSystem['windowPadding'](),_0x37f028=_0x9d5233['x']+Math[_0x15c782(0xaaf)](_0x9d5233[_0x15c782(0x91c)]/0x2)+_0x17867b;_0x123a71['x']=_0x123a71[_0x15c782(0x91c)]/-0x2+_0x37f028,_0x123a71['y']=Math[_0x15c782(0xaaf)](_0x9d5233['height']/0x2);},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x19b)]=function(){const _0x1d7ee1=_0x35b5eb;this[_0x1d7ee1(0x78f)](),this[_0x1d7ee1(0x17b)](),this['addCustomCommands'](),this[_0x1d7ee1(0x693)](),this[_0x1d7ee1(0x3de)]();},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x78f)]=function(){const _0x579ca6=_0x35b5eb,_0x65ace6=this['commandStyle'](),_0x436cab=VisuMZ[_0x579ca6(0x781)]['Settings'][_0x579ca6(0x192)][_0x579ca6(0x32d)],_0x120271=_0x65ace6===_0x579ca6(0x863)?TextManager[_0x579ca6(0x5e3)]:_0x579ca6(0x901)[_0x579ca6(0x4ed)](_0x436cab,TextManager[_0x579ca6(0x5e3)]),_0x20436f=this[_0x579ca6(0xa94)]();this[_0x579ca6(0x675)](_0x120271,_0x579ca6(0x5e3),_0x20436f);},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0xa94)]=function(){return!![];},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x17b)]=function(){const _0x4e8b49=_0x35b5eb;if(!this['isAutoBattleCommandAdded']())return;const _0x82083d=this[_0x4e8b49(0x239)](),_0x408355=VisuMZ[_0x4e8b49(0x781)]['Settings'][_0x4e8b49(0x192)][_0x4e8b49(0x8f6)],_0x56c6ad=_0x82083d==='text'?TextManager['autoBattle']:_0x4e8b49(0x901)[_0x4e8b49(0x4ed)](_0x408355,TextManager[_0x4e8b49(0xa8f)]),_0x2311ea=this[_0x4e8b49(0x5c5)]();this['addCommand'](_0x56c6ad,'autoBattle',_0x2311ea);},Window_PartyCommand[_0x35b5eb(0x73b)]['isAutoBattleCommandAdded']=function(){const _0x20e52e=_0x35b5eb;return VisuMZ[_0x20e52e(0x781)][_0x20e52e(0x3cb)][_0x20e52e(0x192)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x5c5)]=function(){return!![];},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x7de)]=function(){},Window_PartyCommand['prototype']['addOptionsCommand']=function(){const _0x222f33=_0x35b5eb;if(!this[_0x222f33(0x2be)]())return;const _0x3e9a63=this['commandStyle'](),_0x374b1c=VisuMZ['BattleCore'][_0x222f33(0x3cb)]['PartyCmd'][_0x222f33(0x30f)],_0x220ecb=_0x3e9a63===_0x222f33(0x863)?TextManager[_0x222f33(0x18e)]:_0x222f33(0x901)['format'](_0x374b1c,TextManager[_0x222f33(0x18e)]),_0x4846b0=this['isOptionsCommandEnabled']();this[_0x222f33(0x675)](_0x220ecb,_0x222f33(0x18e),_0x4846b0);},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x2be)]=function(){const _0x45942e=_0x35b5eb;return VisuMZ[_0x45942e(0x781)][_0x45942e(0x3cb)][_0x45942e(0x192)][_0x45942e(0xa7b)];},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x338)]=function(){return!![];},Window_PartyCommand['prototype'][_0x35b5eb(0x3de)]=function(){const _0x18fd2b=_0x35b5eb,_0x439c19=this[_0x18fd2b(0x239)](),_0x44d187=VisuMZ[_0x18fd2b(0x781)][_0x18fd2b(0x3cb)][_0x18fd2b(0x192)][_0x18fd2b(0x5ff)],_0x183f82=_0x439c19==='text'?TextManager[_0x18fd2b(0x921)]:_0x18fd2b(0x901)[_0x18fd2b(0x4ed)](_0x44d187,TextManager['escape']),_0xe87053=this['isEscapeCommandEnabled']();this[_0x18fd2b(0x675)](_0x183f82,'escape',_0xe87053);},Window_PartyCommand['prototype'][_0x35b5eb(0x3a9)]=function(){const _0x39f136=_0x35b5eb;return BattleManager[_0x39f136(0x5fe)]();},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x865)]=function(){const _0x240975=_0x35b5eb;return VisuMZ['BattleCore'][_0x240975(0x3cb)][_0x240975(0x192)][_0x240975(0x35c)];},Window_PartyCommand['prototype']['drawItem']=function(_0x12d6f8){const _0x3f6389=_0x35b5eb,_0x20f8af=this['commandStyleCheck'](_0x12d6f8);if(_0x20f8af===_0x3f6389(0x97a)){if(_0x3f6389(0xb2c)==='CjVQh')this[_0x3f6389(0x47a)](_0x12d6f8);else{const _0x5b5a00=_0x41d6c2(_0x31366e['$1'])['toUpperCase']()['trim']();return _0x5b5a00;}}else _0x20f8af===_0x3f6389(0xde)?this['drawItemStyleIcon'](_0x12d6f8):Window_Command['prototype'][_0x3f6389(0x4ae)][_0x3f6389(0x541)](this,_0x12d6f8);},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x239)]=function(){const _0x94b95d=_0x35b5eb;return VisuMZ['BattleCore'][_0x94b95d(0x3cb)]['PartyCmd'][_0x94b95d(0x510)];},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x75e)]=function(_0x188393){const _0xa4a45d=_0x35b5eb;if(_0x188393<0x0)return'text';const _0x2afc27=this[_0xa4a45d(0x239)]();if(_0x2afc27!==_0xa4a45d(0x79f))return _0x2afc27;else{if(this[_0xa4a45d(0x9b1)]()>0x0){if('bZJaT'!=='NDyCY'){const _0x3912c6=this['commandName'](_0x188393);if(_0x3912c6[_0xa4a45d(0x111)](/\\I\[(\d+)\]/i)){const _0x2a78c7=this[_0xa4a45d(0x408)](_0x188393),_0xe7bd3=this[_0xa4a45d(0x84f)](_0x3912c6)[_0xa4a45d(0x91c)];return _0xe7bd3<=_0x2a78c7[_0xa4a45d(0x91c)]?_0xa4a45d(0x97a):'icon';}}else this[_0xa4a45d(0x7c7)](_0xa4a45d(0x5aa),_0x70ed3,[_0x2e2e41[_0xa4a45d(0x785)]],-0x1);}}return _0xa4a45d(0x863);},Window_PartyCommand['prototype'][_0x35b5eb(0x47a)]=function(_0x3541de){const _0x5c3f0c=_0x35b5eb,_0x3f21af=this[_0x5c3f0c(0x408)](_0x3541de),_0x2a1a48=this[_0x5c3f0c(0x50d)](_0x3541de),_0x5daffa=this['textSizeEx'](_0x2a1a48)['width'];this[_0x5c3f0c(0x2ac)](this[_0x5c3f0c(0x235)](_0x3541de));const _0x35d582=this[_0x5c3f0c(0x865)]();if(_0x35d582===_0x5c3f0c(0x946)){if(_0x5c3f0c(0xb35)!==_0x5c3f0c(0xb35)){let _0x53aee1=_0x88be66[_0x5c3f0c(0x781)][_0x5c3f0c(0x7f9)][_0x5c3f0c(0x541)](this);if(this['_tempEquipCheck'])return _0x53aee1;if(this[_0x5c3f0c(0x528)]!==_0x170e79){this[_0x5c3f0c(0x8fe)]=!![];const _0x47a78a=this['equipSlots']();for(let _0x2e5062=0x0;_0x2e5062<_0x47a78a[_0x5c3f0c(0x1a0)];_0x2e5062++){_0x47a78a[_0x2e5062]===0x1&&this[_0x5c3f0c(0x528)]!==_0x2e5062&&(_0x53aee1[_0x2e5062]=null);}this[_0x5c3f0c(0x8fe)]=_0x41abb4;}return _0x53aee1;}else this['drawTextEx'](_0x2a1a48,_0x3f21af['x']+_0x3f21af[_0x5c3f0c(0x91c)]-_0x5daffa,_0x3f21af['y'],_0x5daffa);}else{if(_0x35d582===_0x5c3f0c(0x321)){if(_0x5c3f0c(0x67e)==='dkUZC')_0x481254['setValue'](_0x4333e8[_0x5c3f0c(0x7e2)],!![]);else{const _0x326976=_0x3f21af['x']+Math['floor']((_0x3f21af[_0x5c3f0c(0x91c)]-_0x5daffa)/0x2);this[_0x5c3f0c(0x487)](_0x2a1a48,_0x326976,_0x3f21af['y'],_0x5daffa);}}else this[_0x5c3f0c(0x487)](_0x2a1a48,_0x3f21af['x'],_0x3f21af['y'],_0x5daffa);}},Window_PartyCommand['prototype'][_0x35b5eb(0x9fa)]=function(_0x41035f){const _0x46693b=_0x35b5eb;this[_0x46693b(0x50d)](_0x41035f)['match'](/\\I\[(\d+)\]/i);const _0x4aa3c2=Number(RegExp['$1'])||0x0,_0x40e497=this['itemLineRect'](_0x41035f),_0x30a005=_0x40e497['x']+Math[_0x46693b(0xaaf)]((_0x40e497[_0x46693b(0x91c)]-ImageManager[_0x46693b(0x71c)])/0x2),_0x59db82=_0x40e497['y']+(_0x40e497[_0x46693b(0x491)]-ImageManager[_0x46693b(0x83b)])/0x2;this[_0x46693b(0x24e)](_0x4aa3c2,_0x30a005,_0x59db82);},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x2e4)]=function(){},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x352)]=function(){const _0x3da915=_0x35b5eb;Window_Command[_0x3da915(0x73b)][_0x3da915(0x352)][_0x3da915(0x541)](this);const _0x1f5247=this[_0x3da915(0xd6)]();_0x1f5247==='border'&&this[_0x3da915(0xed)]();},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0xd6)]=function(){const _0x103ddb=_0x35b5eb;if(this[_0x103ddb(0x92d)])return this[_0x103ddb(0x92d)];return this[_0x103ddb(0x92d)]=SceneManager[_0x103ddb(0x885)][_0x103ddb(0xd6)](),this[_0x103ddb(0x92d)];},Window_PartyCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x9b3)]=function(){const _0x2a8660=_0x35b5eb,_0x49a8c5=VisuMZ[_0x2a8660(0x781)][_0x2a8660(0x3cb)][_0x2a8660(0x192)],_0x2cdd0d=this[_0x2a8660(0x90c)]();switch(_0x2cdd0d){case _0x2a8660(0x5e3):this[_0x2a8660(0x874)][_0x2a8660(0x4b7)](_0x49a8c5[_0x2a8660(0x794)]);break;case _0x2a8660(0xa8f):this[_0x2a8660(0x874)][_0x2a8660(0x4b7)](_0x49a8c5[_0x2a8660(0x4bd)]);break;case _0x2a8660(0x18e):this[_0x2a8660(0x874)][_0x2a8660(0x4b7)](_0x49a8c5['HelpOptions']);break;case _0x2a8660(0x921):this['_helpWindow'][_0x2a8660(0x4b7)](_0x49a8c5[_0x2a8660(0x87f)]);break;default:this[_0x2a8660(0x874)][_0x2a8660(0x4b7)]('');break;}},VisuMZ['BattleCore'][_0x35b5eb(0xa23)]=Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x255)],Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(_0x46af00){const _0x21f6ee=_0x35b5eb;VisuMZ[_0x21f6ee(0x781)][_0x21f6ee(0xa23)]['call'](this,_0x46af00),this['createCommandNameWindow'](_0x46af00);},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x44e)]=function(_0x1d2d5d){const _0x28f751=_0x35b5eb,_0x310ef5=new Rectangle(0x0,0x0,_0x1d2d5d[_0x28f751(0x91c)],_0x1d2d5d[_0x28f751(0x491)]);this[_0x28f751(0x707)]=new Window_Base(_0x310ef5),this[_0x28f751(0x707)][_0x28f751(0x1be)]=0x0,this[_0x28f751(0x835)](this['_commandNameWindow']),this[_0x28f751(0x64c)]();},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0xa0c)]=function(){const _0x374969=_0x35b5eb;Window_Command[_0x374969(0x73b)][_0x374969(0xa0c)][_0x374969(0x541)](this);if(this[_0x374969(0x707)])this[_0x374969(0x64c)]();},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x64c)]=function(){const _0x3dde24=_0x35b5eb,_0x2777a2=this[_0x3dde24(0x707)];_0x2777a2['contents']['clear']();const _0x593160=this[_0x3dde24(0x75e)](this[_0x3dde24(0xcb)]());if(_0x593160===_0x3dde24(0xde)&&this[_0x3dde24(0x9b1)]()>0x0){const _0x1fd16a=this[_0x3dde24(0x408)](this[_0x3dde24(0xcb)]());let _0x1af21b=this[_0x3dde24(0x50d)](this[_0x3dde24(0xcb)]());_0x1af21b=_0x1af21b[_0x3dde24(0x125)](/\\I\[(\d+)\]/gi,''),_0x2777a2[_0x3dde24(0x633)](),this[_0x3dde24(0x465)](_0x1af21b,_0x1fd16a),this['commandNameWindowDrawText'](_0x1af21b,_0x1fd16a),this[_0x3dde24(0x4bf)](_0x1af21b,_0x1fd16a);}},Window_ActorCommand['prototype'][_0x35b5eb(0x465)]=function(_0x1dff3d,_0x47dc38){},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x2fd)]=function(_0x5588f2,_0x27bc6d){const _0x511b24=_0x35b5eb,_0x38bf96=this['_commandNameWindow'];_0x38bf96[_0x511b24(0x891)](_0x5588f2,0x0,_0x27bc6d['y'],_0x38bf96[_0x511b24(0x2eb)],_0x511b24(0x321));},Window_ActorCommand['prototype'][_0x35b5eb(0x4bf)]=function(_0x2c0d92,_0x3da19d){const _0x5a92b0=_0x35b5eb,_0x4f8f0a=this['_commandNameWindow'],_0x1f1c1d=$gameSystem[_0x5a92b0(0x39f)](),_0x2df9a8=_0x3da19d['x']+Math[_0x5a92b0(0xaaf)](_0x3da19d[_0x5a92b0(0x91c)]/0x2)+_0x1f1c1d;_0x4f8f0a['x']=_0x4f8f0a[_0x5a92b0(0x91c)]/-0x2+_0x2df9a8,_0x4f8f0a['y']=Math[_0x5a92b0(0xaaf)](_0x3da19d['height']/0x2);},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x19b)]=function(){const _0x2a3670=_0x35b5eb;if(!this[_0x2a3670(0x238)])return;const _0x5e1c00=this[_0x2a3670(0x238)][_0x2a3670(0x895)]();for(const _0x241da0 of _0x5e1c00){this[_0x2a3670(0x3fa)](_0x241da0['toUpperCase']()['trim']());}},Window_ActorCommand['prototype'][_0x35b5eb(0x3fa)]=function(_0x209a1c){const _0x42eb75=_0x35b5eb;_0x209a1c===_0x42eb75(0x28d)&&this[_0x42eb75(0x9dc)]();[_0x42eb75(0x81c),_0x42eb75(0x39d)]['includes'](_0x209a1c)&&this['addSkillCommands']();_0x209a1c===_0x42eb75(0xa86)&&this[_0x42eb75(0x384)]();if(_0x209a1c===_0x42eb75(0x602)){if(_0x42eb75(0x6a2)!=='KlXFJ')return _0x53c1a7[_0x42eb75(0xac2)]['call'](this,_0x10b515);else this[_0x42eb75(0x26b)]();}_0x209a1c==='ESCAPE'&&this[_0x42eb75(0x3de)]();_0x209a1c===_0x42eb75(0x932)&&this[_0x42eb75(0x17b)]();if(_0x209a1c[_0x42eb75(0x111)](/STYPE: (\d+)/i)){if('hCDoO'===_0x42eb75(0x3b7)){this['clearResult']();if(_0x2f30da['VisuMZ_1_SkillsStatesCore']){const _0x4bf7ee=_0x2529e3[_0x42eb75(0x473)][_0x42eb75(0x3cb)]['States'];_0x4bf7ee&&_0x4bf7ee[_0x42eb75(0x256)]===![]&&this['removeStatesAuto'](0x1);}else this[_0x42eb75(0x7c2)](0x1);this[_0x42eb75(0x168)]();}else{const _0x26fed8=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x26fed8);}}else{if(_0x209a1c[_0x42eb75(0x111)](/STYPE: (.*)/i)){const _0x272609=DataManager['getStypeIdWithName'](RegExp['$1']);this['addSkillTypeCommand'](_0x272609);}}if(_0x209a1c===_0x42eb75(0x277)){if('hhhFG'===_0x42eb75(0x2b6))this['addSingleSkillCommands']();else{if(!_0x50cf70[_0x42eb75(0x243)])return;const _0x51be27=_0x520572[_0x42eb75(0x885)][_0x42eb75(0x254)];if(!_0x51be27)return;_0xd90a0b[_0x42eb75(0x68f)](_0x395247,_0x2cd591);const _0x3329eb=_0x3cde68['X']||0x0,_0x45e4f3=_0xc92b90['Y']||0x0,_0x4f3fb8=_0x32df50[_0x42eb75(0x3f5)]||0x0,_0x399f9f=_0x104578[_0x42eb75(0x928)]||0x0,_0x29966e=_0x4110cf[_0x42eb75(0x4a1)]||0x1,_0xb0a1a3=_0x4bdf32[_0x42eb75(0x66c)]||_0x42eb75(0x62b);_0x51be27[_0x42eb75(0x4e6)](_0x4f3fb8,_0x3329eb,_0x45e4f3,_0x399f9f,_0x29966e,_0xb0a1a3);}}if(_0x209a1c[_0x42eb75(0x111)](/SKILL: (\d+)/i)){const _0x65e23e=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x65e23e]);}else{if(_0x209a1c['match'](/SKILL: (.*)/i)){const _0x21c4a2=DataManager[_0x42eb75(0x52f)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x21c4a2]);}}_0x209a1c===_0x42eb75(0x2b2)&&Imported[_0x42eb75(0x79c)]&&(_0x42eb75(0xac0)!==_0x42eb75(0x88c)?this['addPartyCommand']():this['placeGauge'](_0xe5ffcc,'tp',_0x3bad2f+0x88*0x2+(_0x594dac[_0x42eb75(0x9a1)]||0x0),_0x4df3d4+(_0x542adb[_0x42eb75(0xaf7)]||0x0))),['COMBATLOG',_0x42eb75(0x563)][_0x42eb75(0x87d)](_0x209a1c)&&Imported[_0x42eb75(0x72c)]&&this[_0x42eb75(0x366)](),_0x209a1c===_0x42eb75(0x6c5)&&Imported[_0x42eb75(0x833)]&&this[_0x42eb75(0x3e1)](!![]);},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x9dc)]=function(){const _0x7c5366=_0x35b5eb,_0x1370fe=$dataSkills[this[_0x7c5366(0x238)][_0x7c5366(0x419)]()];if(!_0x1370fe)return;if(!this[_0x7c5366(0x2f1)](_0x1370fe))return;const _0x32023f=this['commandStyle'](),_0x3dfe8a=DataManager[_0x7c5366(0x7ac)](_0x1370fe),_0x1b4241=DataManager['battleCommandIcon'](_0x1370fe),_0x31b70e=_0x32023f==='text'?_0x3dfe8a:_0x7c5366(0x901)[_0x7c5366(0x4ed)](_0x1b4241,_0x3dfe8a);this[_0x7c5366(0x675)](_0x31b70e,_0x7c5366(0x8c1),this[_0x7c5366(0x238)]['canAttack']());},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x384)]=function(){const _0x149d17=_0x35b5eb,_0x40a73e=$dataSkills[this[_0x149d17(0x238)][_0x149d17(0x6c1)]()];if(!_0x40a73e)return;if(!this[_0x149d17(0x2f1)](_0x40a73e))return;const _0x1355f2=this['commandStyle'](),_0x1be61d=DataManager['battleCommandName'](_0x40a73e),_0x49ad7a=DataManager[_0x149d17(0x31c)](_0x40a73e),_0x4c0ae5=_0x1355f2===_0x149d17(0x863)?_0x1be61d:'\x5cI[%1]%2'[_0x149d17(0x4ed)](_0x49ad7a,_0x1be61d);this[_0x149d17(0x675)](_0x4c0ae5,_0x149d17(0x6de),this[_0x149d17(0x238)]['canGuard']());},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x26b)]=function(){const _0xbe726b=_0x35b5eb,_0x84e04a=this[_0xbe726b(0x239)](),_0x385286=VisuMZ['BattleCore'][_0xbe726b(0x3cb)]['ActorCmd'][_0xbe726b(0x5f5)],_0x82596a=_0x84e04a==='text'?TextManager[_0xbe726b(0x5d3)]:_0xbe726b(0x901)[_0xbe726b(0x4ed)](_0x385286,TextManager[_0xbe726b(0x5d3)]),_0x156680=this[_0xbe726b(0x19e)]();this[_0xbe726b(0x675)](_0x82596a,_0xbe726b(0x5d3),_0x156680);},Window_ActorCommand['prototype'][_0x35b5eb(0x19e)]=function(){const _0x5e4dca=_0x35b5eb;return this[_0x5e4dca(0x238)]&&this[_0x5e4dca(0x238)][_0x5e4dca(0x792)]();},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x8f1)]=function(){const _0x2fb445=_0x35b5eb,_0x189895=this[_0x2fb445(0x238)]['skillTypes']();for(const _0x559184 of _0x189895){this[_0x2fb445(0x3a6)](_0x559184);}},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x3a6)]=function(_0x374bfd){const _0x3269cc=_0x35b5eb;let _0x348b97=$dataSystem['skillTypes'][_0x374bfd];if(!_0x348b97)return;let _0x2af11e=_0x348b97;const _0x5598f2=this[_0x3269cc(0x239)]();if(_0x5598f2===_0x3269cc(0x863))_0x2af11e=_0x2af11e[_0x3269cc(0x125)](/\x1I\[(\d+)\]/gi,''),_0x2af11e=_0x2af11e[_0x3269cc(0x125)](/\\I\[(\d+)\]/gi,'');else{if(!_0x348b97[_0x3269cc(0x111)](/\\I\[(\d+)\]/i)){const _0xac4b83=Imported[_0x3269cc(0x22a)]?VisuMZ[_0x3269cc(0x473)][_0x3269cc(0x3cb)][_0x3269cc(0x232)]:VisuMZ[_0x3269cc(0x781)][_0x3269cc(0x3cb)][_0x3269cc(0x2c2)],_0x2f1a5f=$dataSystem['magicSkills'][_0x3269cc(0x87d)](_0x374bfd),_0x417730=_0x2f1a5f?_0xac4b83['IconStypeMagic']:_0xac4b83['IconStypeNorm'];_0x2af11e='\x5cI[%1]%2'['format'](_0x417730,_0x348b97);}}this[_0x3269cc(0x675)](_0x2af11e,_0x3269cc(0x961),!![],_0x374bfd);},Window_ActorCommand[_0x35b5eb(0x73b)]['addSingleSkillCommands']=function(){const _0x34bdee=_0x35b5eb,_0x18a17d=this[_0x34bdee(0x238)][_0x34bdee(0x8b1)](),_0x275f3c=this['_actor'][_0x34bdee(0x8c6)]();for(const _0x2f41f7 of _0x275f3c){if(!_0x2f41f7)continue;if(Imported[_0x34bdee(0x22a)]){if('hRLWA'===_0x34bdee(0x683)){if(this[_0x34bdee(0x881)](_0x2f41f7))continue;if(this['isHiddenSkill'](_0x2f41f7))continue;}else{if(!_0x1e0fdf[_0x34bdee(0x3a2)]())return;if(!_0x13f174[_0x34bdee(0x329)])return;if(!_0x5b7152[_0x34bdee(0x7b4)]())return;_0x1f06a4[_0x34bdee(0x68f)](_0x5171ca,_0x40c4dd);const _0xe9d89=_0x4a77e8[_0x34bdee(0x785)][_0x34bdee(0xa91)]();let _0x56cdbd=_0xa98bd0['FullActions'],_0x12d74c=_0x11b285[_0x34bdee(0x905)];_0xe9d89['gainFullActionsPTB'](_0x56cdbd),_0xe9d89[_0x34bdee(0xa2d)](_0x12d74c);}}else{if(!_0x18a17d[_0x34bdee(0x87d)](_0x2f41f7['stypeId']))continue;}this[_0x34bdee(0x14e)](_0x2f41f7);}},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x881)]=function(_0x57d162){const _0x5eae5c=_0x35b5eb,_0x4a0025=this['_actor'][_0x5eae5c(0x8b1)](),_0x56761f=_0x4a0025[_0x5eae5c(0x416)](_0x105dc2=>DataManager[_0x5eae5c(0x6aa)](_0x57d162)[_0x5eae5c(0x87d)](_0x105dc2));return _0x56761f[_0x5eae5c(0x1a0)]<=0x0;},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0xaca)]=function(_0x5b1868){const _0x1398e9=_0x35b5eb;if(!Window_SkillList['prototype'][_0x1398e9(0x8e1)]['call'](this,_0x5b1868))return!![];if(!Window_SkillList[_0x1398e9(0x73b)][_0x1398e9(0x368)][_0x1398e9(0x541)](this,_0x5b1868))return!![];if(!Window_SkillList[_0x1398e9(0x73b)]['checkShowHideSkillNotetags'][_0x1398e9(0x541)](this,_0x5b1868))return!![];return![];},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x14e)]=function(_0xe079a8){const _0x23b16e=_0x35b5eb;if(!_0xe079a8)return;if(!this[_0x23b16e(0x2f1)](_0xe079a8))return;const _0x51b3f4=this['commandStyle'](),_0xb78d96=DataManager[_0x23b16e(0x7ac)](_0xe079a8),_0x155643=DataManager['battleCommandIcon'](_0xe079a8),_0x565dc4=_0x51b3f4==='text'?_0xb78d96:_0x23b16e(0x901)[_0x23b16e(0x4ed)](_0x155643,_0xb78d96),_0x59f386=this[_0x23b16e(0x238)]['canUse'](_0xe079a8);this['addCommand'](_0x565dc4,_0x23b16e(0x41e),_0x59f386,_0xe079a8['id']);},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x2f1)]=function(_0x2e0dad){const _0xf0c49a=_0x35b5eb,_0x3e696e=_0x2e0dad['note'];if(_0x3e696e[_0xf0c49a(0x111)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0xf0c49a(0x238)]['isLearnedSkill'](_0x2e0dad['id']))return![];}if(_0x3e696e['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0xf0c49a(0x238)]['hasSkill'](_0x2e0dad['id']))return![];}const _0x2e4ccd=VisuMZ[_0xf0c49a(0x781)][_0xf0c49a(0x82f)](_0x2e0dad,_0xf0c49a(0x404));if(VisuMZ[_0xf0c49a(0x781)]['JS'][_0x2e4ccd]){if(!VisuMZ[_0xf0c49a(0x781)]['JS'][_0x2e4ccd][_0xf0c49a(0x541)](this,this[_0xf0c49a(0x238)],_0x2e0dad))return![];}return VisuMZ[_0xf0c49a(0x781)][_0xf0c49a(0x51e)](_0x2e0dad);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x51e)]=function(_0x210b4a){const _0xca6491=_0x35b5eb,_0x255a87=_0x210b4a[_0xca6491(0x7fd)];if(_0x255a87[_0xca6491(0x111)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0xca6491(0x171)!==_0xca6491(0x171))_0x2d835f+=_0x4b32be[_0xca6491(0x91c)]-_0x285224;else{const _0xa70562=JSON[_0xca6491(0x71f)]('['+RegExp['$1'][_0xca6491(0x111)](/\d+/g)+']');for(const _0x39d0df of _0xa70562){if(_0xca6491(0x556)!=='oXJWn')this['_battlerContainer']=new _0x1356b8(),this[_0xca6491(0xa45)][_0xca6491(0x835)](this[_0xca6491(0xaec)]);else{if(!$gameSwitches[_0xca6491(0x3d1)](_0x39d0df))return![];}}return!![];}}if(_0x255a87['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xdabd70=JSON[_0xca6491(0x71f)]('['+RegExp['$1'][_0xca6491(0x111)](/\d+/g)+']');for(const _0x36db90 of _0xdabd70){if(!$gameSwitches[_0xca6491(0x3d1)](_0x36db90))return![];}return!![];}if(_0x255a87[_0xca6491(0x111)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0xca6491(0x2f9)!==_0xca6491(0x4c0)){const _0x2b66f6=JSON['parse']('['+RegExp['$1'][_0xca6491(0x111)](/\d+/g)+']');for(const _0x2990c4 of _0x2b66f6){if('nqstb'!==_0xca6491(0xbf)){if(!_0x4643ba[_0xca6491(0x781)]['Settings'][_0xca6491(0x842)]['ShowPortraits'])return![];if(_0x36a5bb[_0xca6491(0x513)]())return!![];return _0xb30c8d[_0xca6491(0x919)]&&_0x145c12[_0xca6491(0x6fa)]();}else{if($gameSwitches[_0xca6491(0x3d1)](_0x2990c4))return!![];}}return![];}else this[_0xca6491(0x255)](...arguments);}if(_0x255a87[_0xca6491(0x111)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('Cmpdp'===_0xca6491(0x477)){const _0x37ea97=JSON[_0xca6491(0x71f)]('['+RegExp['$1'][_0xca6491(0x111)](/\d+/g)+']');for(const _0x19f5ee of _0x37ea97){if(!$gameSwitches[_0xca6491(0x3d1)](_0x19f5ee))return!![];}return![];}else return _0x2b83b0[_0xca6491(0x68b)];}if(_0x255a87[_0xca6491(0x111)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0xca6491(0x46f)!==_0xca6491(0xa79)){const _0xc577c3=JSON[_0xca6491(0x71f)]('['+RegExp['$1'][_0xca6491(0x111)](/\d+/g)+']');for(const _0x4f1f88 of _0xc577c3){if(!$gameSwitches[_0xca6491(0x3d1)](_0x4f1f88))return!![];}return![];}else this[_0xca6491(0x5d1)](_0xca6491(0x921));}if(_0x255a87[_0xca6491(0x111)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('glDyj'===_0xca6491(0xb25)){const _0x2a2c38=JSON[_0xca6491(0x71f)]('['+RegExp['$1'][_0xca6491(0x111)](/\d+/g)+']');for(const _0x367849 of _0x2a2c38){if($gameSwitches[_0xca6491(0x3d1)](_0x367849))return![];}return!![];}else _0x3297fb=_0x4c3527['battler']()['_homeX'],_0x226509=_0x7caeb3[_0xca6491(0x691)]()[_0xca6491(0x56d)];}return!![];},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x3de)]=function(){const _0x2c4b5e=_0x35b5eb,_0x2e30f3=this[_0x2c4b5e(0x239)](),_0xbea9d5=VisuMZ['BattleCore'][_0x2c4b5e(0x3cb)][_0x2c4b5e(0x192)][_0x2c4b5e(0x5ff)],_0x297a51=_0x2e30f3===_0x2c4b5e(0x863)?TextManager[_0x2c4b5e(0x921)]:'\x5cI[%1]%2'[_0x2c4b5e(0x4ed)](_0xbea9d5,TextManager[_0x2c4b5e(0x921)]),_0x84a0cf=this['isEscapeCommandEnabled']();this[_0x2c4b5e(0x675)](_0x297a51,_0x2c4b5e(0x921),_0x84a0cf);},Window_ActorCommand[_0x35b5eb(0x73b)]['isEscapeCommandEnabled']=function(){const _0x48bab4=_0x35b5eb;return BattleManager[_0x48bab4(0x5fe)]();},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x17b)]=function(){const _0xb6de38=_0x35b5eb,_0x1d7298=this[_0xb6de38(0x239)](),_0x4371f0=VisuMZ[_0xb6de38(0x781)][_0xb6de38(0x3cb)][_0xb6de38(0x192)][_0xb6de38(0x8f6)],_0x4edb8d=_0x1d7298===_0xb6de38(0x863)?TextManager[_0xb6de38(0xa8f)]:_0xb6de38(0x901)[_0xb6de38(0x4ed)](_0x4371f0,TextManager['autoBattle']),_0x38b7b4=this[_0xb6de38(0x5c5)]();this['addCommand'](_0x4edb8d,'autoBattle',_0x38b7b4);},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x5c5)]=function(){return!![];},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x865)]=function(){const _0x2fc584=_0x35b5eb;return VisuMZ['BattleCore']['Settings'][_0x2fc584(0x2c2)][_0x2fc584(0x35c)];},Window_ActorCommand['prototype'][_0x35b5eb(0x4ae)]=function(_0x4e6e47){const _0x1f41ee=_0x35b5eb,_0x236b96=this[_0x1f41ee(0x75e)](_0x4e6e47);if(_0x236b96===_0x1f41ee(0x97a))this[_0x1f41ee(0x47a)](_0x4e6e47);else _0x236b96===_0x1f41ee(0xde)?this[_0x1f41ee(0x9fa)](_0x4e6e47):Window_Command[_0x1f41ee(0x73b)][_0x1f41ee(0x4ae)][_0x1f41ee(0x541)](this,_0x4e6e47);this[_0x1f41ee(0x9ce)](_0x4e6e47);},Window_ActorCommand['prototype']['commandStyle']=function(){const _0x4a0feb=_0x35b5eb;return VisuMZ['BattleCore'][_0x4a0feb(0x3cb)][_0x4a0feb(0x2c2)][_0x4a0feb(0x510)];},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x75e)]=function(_0x55b6d2){const _0x44f4a3=_0x35b5eb;if(_0x55b6d2<0x0)return'text';const _0x274c63=this[_0x44f4a3(0x239)]();if(_0x274c63!==_0x44f4a3(0x79f))return _0x274c63;else{if(this[_0x44f4a3(0x9b1)]()>0x0){const _0x12746f=this['commandName'](_0x55b6d2);if(_0x12746f[_0x44f4a3(0x111)](/\\I\[(\d+)\]/i)){const _0x8f9e13=this[_0x44f4a3(0x408)](_0x55b6d2),_0x479524=this[_0x44f4a3(0x84f)](_0x12746f)[_0x44f4a3(0x91c)];if(_0x479524<=_0x8f9e13['width']){if('cFrce'!==_0x44f4a3(0x9a2))return _0x44f4a3(0x97a);else _0x47fbb2['wtypeId']=_0x16abe3[_0x44f4a3(0x6ea)](_0x77a43f['$1']);}else{if('htINL'!==_0x44f4a3(0x730))return _0x44f4a3(0xde);else _0x3e0863[_0x44f4a3(0x781)][_0x44f4a3(0x41c)][_0x44f4a3(0x541)](this,_0x447edf),this[_0x44f4a3(0xa1a)]();}}}}return'text';},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x47a)]=function(_0x102c39){const _0xc2f9a=_0x35b5eb,_0x27e0d5=this['itemLineRect'](_0x102c39),_0x21b316=this['commandName'](_0x102c39),_0x42f700=this[_0xc2f9a(0x84f)](_0x21b316)[_0xc2f9a(0x91c)];this[_0xc2f9a(0x2ac)](this[_0xc2f9a(0x235)](_0x102c39));const _0x2d3141=this[_0xc2f9a(0x865)]();if(_0x2d3141===_0xc2f9a(0x946))_0xc2f9a(0x4da)!=='eyjWg'?this[_0xc2f9a(0x777)]=!![]:this['drawTextEx'](_0x21b316,_0x27e0d5['x']+_0x27e0d5[_0xc2f9a(0x91c)]-_0x42f700,_0x27e0d5['y'],_0x42f700);else{if(_0x2d3141===_0xc2f9a(0x321)){if(_0xc2f9a(0xa7a)===_0xc2f9a(0xa7a)){const _0x428316=_0x27e0d5['x']+Math[_0xc2f9a(0xaaf)]((_0x27e0d5['width']-_0x42f700)/0x2);this[_0xc2f9a(0x487)](_0x21b316,_0x428316,_0x27e0d5['y'],_0x42f700);}else this['battleStatusWindowAnimationContainer']()[_0xc2f9a(0x835)](_0x4dae5f);}else _0xc2f9a(0x1f3)==='NMOZe'?this[_0xc2f9a(0x487)](_0x21b316,_0x27e0d5['x'],_0x27e0d5['y'],_0x42f700):_0x3dc33d['BattleCore']['ParseClassNotetags'][_0xc2f9a(0x541)](this,_0x5959c6);}},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x9fa)]=function(_0x244255){const _0x28ba57=_0x35b5eb;this[_0x28ba57(0x50d)](_0x244255)[_0x28ba57(0x111)](/\\I\[(\d+)\]/i);const _0x1c0a8c=Number(RegExp['$1'])||0x0,_0x28f518=this[_0x28ba57(0x408)](_0x244255),_0x41a585=_0x28f518['x']+Math['floor']((_0x28f518[_0x28ba57(0x91c)]-ImageManager[_0x28ba57(0x71c)])/0x2),_0x4c51e0=_0x28f518['y']+(_0x28f518['height']-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x1c0a8c,_0x41a585,_0x4c51e0);},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x9ce)]=function(_0x4af0b5){const _0xe1e2d4=_0x35b5eb;if(!(VisuMZ['BattleCore'][_0xe1e2d4(0x3cb)]['ActorCmd'][_0xe1e2d4(0x1b0)]??!![]))return;const _0x57a8e5=this[_0xe1e2d4(0x6e0)](_0x4af0b5);if(![_0xe1e2d4(0x8c1),_0xe1e2d4(0x6de),_0xe1e2d4(0x41e)][_0xe1e2d4(0x87d)](_0x57a8e5))return;const _0x553c28=this[_0xe1e2d4(0x408)](_0x4af0b5);let _0x9773=null;if(_0x57a8e5===_0xe1e2d4(0x8c1))_0x9773=$dataSkills[this[_0xe1e2d4(0x238)][_0xe1e2d4(0x419)]()];else _0x57a8e5===_0xe1e2d4(0x6de)?_0xe1e2d4(0xef)===_0xe1e2d4(0xef)?_0x9773=$dataSkills[this['_actor'][_0xe1e2d4(0x6c1)]()]:_0x21b842=_0x5eb011>=_0x1c81d5?_0x2cbb3f:_0x307eff:_0x9773=$dataSkills[this['_list'][_0x4af0b5][_0xe1e2d4(0x98d)]];this[_0xe1e2d4(0x942)](this['_actor'],_0x9773,_0x553c28['x'],_0x553c28['y'],_0x553c28['width']);},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x942)]=function(_0x4ee297,_0xca1444,_0x453bf6,_0x4ff89c,_0xa178a7){const _0x1c3afb=_0x35b5eb;if(!_0xca1444)return;Imported[_0x1c3afb(0x22a)]?Window_Command[_0x1c3afb(0x73b)]['drawSkillCost'][_0x1c3afb(0x541)](this,_0x4ee297,_0xca1444,_0x453bf6,_0x4ff89c,_0xa178a7):Window_SkillList[_0x1c3afb(0x73b)][_0x1c3afb(0x942)][_0x1c3afb(0x541)](this,_0xca1444,_0x453bf6,_0x4ff89c,_0xa178a7);},Window_ActorCommand['prototype'][_0x35b5eb(0x2e4)]=function(){},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x352)]=function(){const _0x52d871=_0x35b5eb;Window_Command[_0x52d871(0x73b)][_0x52d871(0x352)][_0x52d871(0x541)](this);const _0x56f31d=this['battleLayoutStyle']();_0x56f31d===_0x52d871(0x390)&&this[_0x52d871(0xed)]();},Window_ActorCommand[_0x35b5eb(0x73b)]['battleLayoutStyle']=function(){const _0x2d1842=_0x35b5eb;if(this[_0x2d1842(0x92d)])return this[_0x2d1842(0x92d)];return this[_0x2d1842(0x92d)]=SceneManager[_0x2d1842(0x885)][_0x2d1842(0xd6)](),this[_0x2d1842(0x92d)];},VisuMZ['BattleCore'][_0x35b5eb(0x9a9)]=Window_ActorCommand['prototype'][_0x35b5eb(0x65b)],Window_ActorCommand[_0x35b5eb(0x73b)]['setup']=function(_0x16d510){const _0x1c497b=_0x35b5eb,_0x181cd3=this[_0x1c497b(0xd6)]();if(_0x16d510&&['xp',_0x1c497b(0xf2)][_0x1c497b(0x87d)](_0x181cd3))this[_0x1c497b(0x367)](_0x16d510);else _0x16d510&&['border']['includes'](_0x181cd3)&&(this[_0x1c497b(0x2e2)](_0x16d510),this['showHelpWindow']());VisuMZ[_0x1c497b(0x781)][_0x1c497b(0x9a9)][_0x1c497b(0x541)](this,_0x16d510),_0x16d510&&$gameTroop[_0x1c497b(0x12b)]()[_0x1c497b(0x1a0)]>0x0&&_0x16d510[_0x1c497b(0x691)]()&&_0x16d510['battler']()[_0x1c497b(0x2ed)]();},Window_ActorCommand['prototype']['resizeWindowXPStyle']=function(_0x4310b4){const _0x5bff54=_0x35b5eb,_0x501eb2=Math[_0x5bff54(0x3d5)](Graphics[_0x5bff54(0x1b4)]/0x3),_0x3326f6=Math[_0x5bff54(0x3d5)](Graphics[_0x5bff54(0x1b4)]/$gameParty[_0x5bff54(0x2ae)]()[_0x5bff54(0x1a0)]),_0x1468b5=Math['min'](_0x501eb2,_0x3326f6),_0x338e5f=this[_0x5bff54(0x6dc)](VisuMZ['BattleCore']['Settings'][_0x5bff54(0x842)][_0x5bff54(0x3bb)]),_0x5b49ac=_0x3326f6*_0x4310b4[_0x5bff54(0xcb)]()+(_0x3326f6-_0x1468b5)/0x2,_0x45209f=SceneManager[_0x5bff54(0x885)]['_statusWindow']['y']-_0x338e5f;this[_0x5bff54(0xa87)](_0x5b49ac,_0x45209f,_0x1468b5,_0x338e5f),this[_0x5bff54(0x6d9)](),this[_0x5bff54(0x897)](0x1);},Window_ActorCommand['prototype'][_0x35b5eb(0x2e2)]=function(_0x393e47){const _0x28388d=_0x35b5eb,_0x12e869=SceneManager['_scene']['partyCommandWindowRectBorderStyle']();this[_0x28388d(0xa87)](_0x12e869['x'],_0x12e869['y'],_0x12e869['width'],_0x12e869[_0x28388d(0x491)]),this[_0x28388d(0x6d9)](),this[_0x28388d(0x897)](0x0);},Window_ActorCommand[_0x35b5eb(0x73b)]['refreshDimmerBitmap']=function(){const _0x53591c=_0x35b5eb;if(this[_0x53591c(0x98b)]){const _0x5a6cae=this[_0x53591c(0x98b)][_0x53591c(0x89a)],_0x59d5c1=this[_0x53591c(0x91c)]-0x8,_0x221f28=this[_0x53591c(0x491)],_0x240aee=this['padding'],_0x2b504f=ColorManager['dimColor1'](),_0x218502=ColorManager[_0x53591c(0xa01)]();this['_dimmerSprite']['x']=0x4,_0x5a6cae[_0x53591c(0x4b2)](_0x59d5c1,_0x221f28),_0x5a6cae[_0x53591c(0xa41)](0x0,0x0,_0x59d5c1,_0x240aee,_0x218502,_0x2b504f,!![]),_0x5a6cae[_0x53591c(0x90b)](0x0,_0x240aee,_0x59d5c1,_0x221f28-_0x240aee*0x2,_0x2b504f),_0x5a6cae[_0x53591c(0xa41)](0x0,_0x221f28-_0x240aee,_0x59d5c1,_0x240aee,_0x2b504f,_0x218502,!![]),this[_0x53591c(0x98b)][_0x53591c(0x154)](0x0,0x0,_0x59d5c1,_0x221f28);}},Window_ActorCommand[_0x35b5eb(0x73b)][_0x35b5eb(0x9b3)]=function(){const _0x587e10=_0x35b5eb;if(!this[_0x587e10(0x238)])return;const _0x3c43c4=VisuMZ['BattleCore'][_0x587e10(0x3cb)]['ActorCmd'],_0x234933=this[_0x587e10(0x90c)]();switch(_0x234933){case'attack':this[_0x587e10(0x5cb)]($dataSkills[this[_0x587e10(0x238)][_0x587e10(0x419)]()]);break;case _0x587e10(0x6de):this[_0x587e10(0x5cb)]($dataSkills[this['_actor']['guardSkillId']()]);break;case'skill':const _0x458e99=_0x3c43c4['HelpSkillType'],_0x375a8b=_0x458e99[_0x587e10(0x4ed)]($dataSystem[_0x587e10(0x8b1)][this['currentExt']()]);this[_0x587e10(0x874)]['setText'](_0x375a8b);break;case _0x587e10(0x41e):this['setHelpWindowItem']($dataSkills[this['currentExt']()]);break;case'item':this[_0x587e10(0x874)][_0x587e10(0x4b7)](_0x3c43c4[_0x587e10(0x96c)]);break;case'escape':this[_0x587e10(0x874)][_0x587e10(0x4b7)](_0x3c43c4[_0x587e10(0x87f)]);break;case _0x587e10(0xa8f):this[_0x587e10(0x874)]['setText'](_0x3c43c4[_0x587e10(0x4bd)]);break;default:this[_0x587e10(0x874)][_0x587e10(0x4b7)]('');break;}},VisuMZ['BattleCore'][_0x35b5eb(0x910)]=Window_BattleStatus[_0x35b5eb(0x73b)]['initialize'],Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(_0x6a700d){const _0x4a322e=_0x35b5eb;VisuMZ[_0x4a322e(0x781)][_0x4a322e(0x910)][_0x4a322e(0x541)](this,_0x6a700d),this[_0x4a322e(0x2d7)](),this[_0x4a322e(0xb31)]();},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0xd6)]=function(){const _0x36be63=_0x35b5eb;if(this[_0x36be63(0x92d)])return this[_0x36be63(0x92d)];return this[_0x36be63(0x92d)]=SceneManager[_0x36be63(0x885)][_0x36be63(0xd6)](),this['_battleLayoutStyle'];},Window_BattleStatus['prototype'][_0x35b5eb(0x2d7)]=function(){const _0x4b3c23=_0x35b5eb;this[_0x4b3c23(0x746)]=this[_0x4b3c23(0xb13)]();const _0xa51882=VisuMZ[_0x4b3c23(0x781)][_0x4b3c23(0x3cb)][_0x4b3c23(0x842)];_0xa51882[_0x4b3c23(0xc0)]&&(_0x4b3c23(0x47e)===_0x4b3c23(0x2c3)?this[_0x4b3c23(0x536)](_0x3572ed,_0x248fc2,_0x33b32c):this[_0x4b3c23(0x1be)]=0x0);},Window_BattleStatus['prototype']['isFrameVisible']=function(){const _0x33350b=_0x35b5eb,_0x7566e1=VisuMZ[_0x33350b(0x781)]['Settings']['BattleLayout'];if(_0x7566e1[_0x33350b(0xd0)]){if(_0x33350b(0x883)===_0x33350b(0x2ca)){if(this['isCertainHit']())return _0x4751e8;const _0x4aa64f=this['subject'](),_0x3e5f0c=_0x5eb8b6;let _0x436c64=[],_0x46d3b4=[];_0x436c64[_0x33350b(0x7c7)](this[_0x33350b(0x6c0)]['arPenFlat'],this['_armorPenetration'][_0x33350b(0x4e4)]),_0x46d3b4[_0x33350b(0x7c7)](this[_0x33350b(0x6c0)][_0x33350b(0x949)],this[_0x33350b(0x6c0)]['arRedRate']);const _0x351446=this[_0x33350b(0x32c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3c0728=this[_0x33350b(0x32c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x439f87=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3ed48d=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x436c64=_0x436c64['concat'](_0x3e5f0c['traitObjects']()[_0x33350b(0x3dd)](_0x10a06e=>_0x10a06e&&_0x10a06e[_0x33350b(0x7fd)][_0x33350b(0x111)](_0x351446)?_0x23ebef(_0x4767f0['$1']):0x0)),_0x46d3b4=_0x46d3b4[_0x33350b(0x992)](_0x3e5f0c[_0x33350b(0x46d)]()['map'](_0xe07322=>_0xe07322&&_0xe07322['note']['match'](_0x3c0728)?_0x68fe44(_0x1eaeac['$1'])/0x64:0x0)),_0x436c64=_0x436c64[_0x33350b(0x992)](_0x4aa64f[_0x33350b(0x46d)]()[_0x33350b(0x3dd)](_0x10573b=>_0x10573b&&_0x10573b['note'][_0x33350b(0x111)](_0x439f87)?_0x1e5650(_0x53814e['$1']):0x0)),_0x46d3b4=_0x46d3b4[_0x33350b(0x992)](_0x4aa64f[_0x33350b(0x46d)]()[_0x33350b(0x3dd)](_0x1fd35e=>_0x1fd35e&&_0x1fd35e[_0x33350b(0x7fd)][_0x33350b(0x111)](_0x3ed48d)?_0x574671(_0x31d2f0['$1'])/0x64:0x0)),this[_0x33350b(0x5d3)]()[_0x33350b(0x7fd)][_0x33350b(0x111)](_0x439f87)&&_0x436c64[_0x33350b(0x7c7)](_0x5d3fbe(_0x2b27b6['$1'])),this[_0x33350b(0x5d3)]()[_0x33350b(0x7fd)]['match'](_0x3ed48d)&&_0x46d3b4[_0x33350b(0x7c7)](_0x5edabd(_0x25090b['$1'])),_0x38f664=_0x436c64['reduce']((_0x1fdeff,_0x1eac2e)=>_0x1fdeff-_0x1eac2e,_0x451c4b),_0x50248d>0x0&&(_0x1c888c=_0x46d3b4['reduce']((_0x203a8e,_0x16ff3a)=>_0x203a8e*(0x1-_0x16ff3a),_0xbe3c8f)),_0x3372fc;}else return!![];}const _0x23fc0e=this[_0x33350b(0xd6)]();switch(_0x23fc0e){case _0x33350b(0x8d0):case _0x33350b(0x390):return!![];break;case _0x33350b(0x472):case'xp':case _0x33350b(0xf2):default:return![];break;}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x83f)]=function(){const _0xad416c=_0x35b5eb;if(this[_0xad416c(0xb13)]()){if(_0xad416c(0x7d4)===_0xad416c(0x7d4))return 0x0;else _0x58a872['push'](new _0x5de8fe(_0x36f06d));}else return 0xa;},Window_BattleStatus[_0x35b5eb(0x73b)]['maxCols']=function(){const _0x5e0e75=_0x35b5eb,_0x2f4c7e=this[_0x5e0e75(0xd6)]();switch(_0x2f4c7e){case _0x5e0e75(0x8d0):return 0x1;break;case'xp':case _0x5e0e75(0xf2):return $gameParty[_0x5e0e75(0x2ae)]()[_0x5e0e75(0x1a0)];break;case _0x5e0e75(0x472):default:return $gameParty[_0x5e0e75(0x2da)]();break;}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x62d)]=function(){const _0x43bcbc=_0x35b5eb,_0x52a9ae=this[_0x43bcbc(0xd6)]();switch(_0x52a9ae){case _0x43bcbc(0x8d0):return Window_StatusBase['prototype']['itemHeight'][_0x43bcbc(0x541)](this);break;case _0x43bcbc(0x472):case'xp':case _0x43bcbc(0xf2):default:return this[_0x43bcbc(0x17e)];break;}},Window_BattleStatus[_0x35b5eb(0x73b)]['rowSpacing']=function(){const _0x3894ce=_0x35b5eb,_0x432651=this['battleLayoutStyle']();switch(_0x432651){case _0x3894ce(0x8d0):return Window_StatusBase[_0x3894ce(0x73b)][_0x3894ce(0x331)]['call'](this);break;case _0x3894ce(0x472):case'xp':case _0x3894ce(0xf2):default:return 0x0;break;}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x15f)]=function(){const _0x166d53=_0x35b5eb;if(this[_0x166d53(0xb13)]()){if(_0x166d53(0xa84)===_0x166d53(0xa84))Window_StatusBase[_0x166d53(0x73b)][_0x166d53(0x15f)][_0x166d53(0x541)](this);else return _0x1d47dc[_0x166d53(0x781)]['Settings']['ActorCmd'][_0x166d53(0x510)];}else this[_0x166d53(0x2f5)]=0x8;},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x145)]=function(){const _0x5a637f=_0x35b5eb,_0x7d5b77=VisuMZ[_0x5a637f(0x781)][_0x5a637f(0x3cb)][_0x5a637f(0x842)];if(_0x7d5b77[_0x5a637f(0xd0)]){if(_0x5a637f(0x1d9)===_0x5a637f(0x583))return![];else this['windowskin']=ImageManager[_0x5a637f(0x4e7)](_0x7d5b77[_0x5a637f(0xd0)]);}else Window_StatusBase['prototype'][_0x5a637f(0x145)][_0x5a637f(0x541)](this);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x562)]=function(_0x4f6426){const _0x52ad21=_0x35b5eb,_0xfe01eb=VisuMZ[_0x52ad21(0x781)][_0x52ad21(0x3cb)][_0x52ad21(0x842)];if(_0xfe01eb[_0x52ad21(0x848)])return;Window_StatusBase[_0x52ad21(0x73b)]['drawItemBackground'][_0x52ad21(0x541)](this,_0x4f6426);},Window_BattleStatus[_0x35b5eb(0x73b)]['requestRefresh']=function(){const _0x19ebcf=_0x35b5eb;this[_0x19ebcf(0x7dc)]=!![];},Window_BattleStatus['prototype']['update']=function(){const _0x465ae1=_0x35b5eb;Window_StatusBase['prototype']['update']['call'](this),this[_0x465ae1(0x6e3)](),this[_0x465ae1(0xa4e)]();if(this['battleLayoutStyle']()===_0x465ae1(0x390))this[_0x465ae1(0x722)]();},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x6e3)]=function(){const _0x51f302=_0x35b5eb;if($gameTemp[_0x51f302(0xadf)]())this[_0x51f302(0x71e)](),this[_0x51f302(0x7dc)]=![],$gameTemp[_0x51f302(0x5b9)]();else{if(this[_0x51f302(0x7dc)]){if('FXOKB'===_0x51f302(0x9ca))return _0x42a050[_0x51f302(0x7fd)][_0x51f302(0x111)](/<COMMAND TEXT: (.*)>/i)?_0x15c9c0(_0x507d69['$1']):_0xcc8193[_0x51f302(0x945)];else this[_0x51f302(0x7dc)]=![],this[_0x51f302(0x129)](),this['updateAttachmentSprites']();}}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x756)]=function(){const _0x128b74=_0x35b5eb;Window_StatusBase[_0x128b74(0x73b)][_0x128b74(0x756)][_0x128b74(0x541)](this);if(!$gameSystem[_0x128b74(0x9b9)]())this[_0x128b74(0x129)]();},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x2e4)]=function(){const _0x55128f=_0x35b5eb;if(this[_0x55128f(0x62e)]===Window_BattleStatus)return;Window_StatusBase[_0x55128f(0x73b)][_0x55128f(0x2e4)][_0x55128f(0x541)](this);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x938)]=function(_0x443089){const _0x2da3b6=_0x35b5eb,_0x286181=this[_0x2da3b6(0xd6)]();switch(_0x286181){case'xp':case'portrait':break;case _0x2da3b6(0x472):case _0x2da3b6(0x8d0):case _0x2da3b6(0x390):default:return Window_StatusBase['prototype'][_0x2da3b6(0x938)][_0x2da3b6(0x541)](this,_0x443089);break;}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x155)]=Window_BattleStatus['prototype'][_0x35b5eb(0x518)],Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x518)]=function(_0x2f0817){const _0x37059a=_0x35b5eb,_0x1d8fcd=this[_0x37059a(0xd6)]();switch(_0x1d8fcd){case _0x37059a(0x8d0):this[_0x37059a(0x40e)](_0x2f0817);break;case'xp':this['drawItemImageXPStyle'](_0x2f0817);break;case _0x37059a(0xf2):this[_0x37059a(0x70c)](_0x2f0817);break;case _0x37059a(0x472):case _0x37059a(0x390):default:VisuMZ[_0x37059a(0x781)][_0x37059a(0x155)][_0x37059a(0x541)](this,_0x2f0817);break;}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x673)]=function(_0x5a2250){const _0x5364cf=_0x35b5eb,_0x51c587=this['battleLayoutStyle']();if(!$gameSystem[_0x5364cf(0x9b9)]())this[_0x5364cf(0x348)](_0x5a2250);switch(_0x51c587){case _0x5364cf(0x8d0):this[_0x5364cf(0x758)](_0x5a2250);break;case'xp':case _0x5364cf(0xf2):case _0x5364cf(0x472):case _0x5364cf(0x390):default:this[_0x5364cf(0x5d2)](_0x5a2250);break;}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x425)]=function(){const _0x516b3a=_0x35b5eb,_0x183f03=this[_0x516b3a(0xd6)]();if(['xp'][_0x516b3a(0x87d)](_0x183f03)&&!$gameSystem[_0x516b3a(0x9b9)]()){if('iCXHd'!==_0x516b3a(0x2dc)){this[_0x516b3a(0x72f)](0x0,0x0,0x0,0x0);return;}else{const _0x2bbae0=new _0x24e8ba();_0x2bbae0[_0x516b3a(0x89a)]=_0x3e537c[_0x516b3a(0x4e7)](_0x402e30['StatusWindowAttachmentFront']),_0x2bbae0['x']=_0x3500cb[_0x516b3a(0x23c)]||0x0,_0x2bbae0['y']=_0x53edfe['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x516b3a(0x835)](_0x2bbae0),this[_0x516b3a(0x3d0)]=_0x2bbae0;}}Window_StatusBase['prototype'][_0x516b3a(0x425)][_0x516b3a(0x541)](this);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x348)]=function(_0x14e01e){const _0x1314ab=_0x35b5eb,_0x19f7ad=this['actor'](_0x14e01e)[_0x1314ab(0x691)]();if(!_0x19f7ad)return;const _0xd79786=this[_0x1314ab(0xd6)](),_0x239b2b=this['itemRect'](_0x14e01e);let _0x1df41a=Math[_0x1314ab(0x3d5)](_0x239b2b['x']+_0x239b2b['width']/0x2)+this['padding'];if(['list']['includes'](_0xd79786)){if(_0x1314ab(0x281)===_0x1314ab(0x819))return this[_0x1314ab(0xa6a)]['shift']();else _0x1df41a=_0x239b2b['width']/$gameParty[_0x1314ab(0x2ae)]()['length'],_0x1df41a*=_0x14e01e,_0x1df41a+=_0x239b2b[_0x1314ab(0x91c)]/$gameParty['battleMembers']()[_0x1314ab(0x1a0)]/0x2;}let _0x38f8d5=Math[_0x1314ab(0x3d5)](this[_0x1314ab(0xa52)](_0x14e01e,_0x19f7ad,_0x239b2b));_0x19f7ad[_0x1314ab(0x94c)](_0x1df41a,_0x38f8d5),this[_0x1314ab(0x52e)](_0x19f7ad,0x1),_0x19f7ad[_0x1314ab(0x756)](),this['updateEffectsContainer'](),this[_0x1314ab(0x3bf)]();},Window_BattleStatus['prototype'][_0x35b5eb(0xa52)]=function(_0x15e83a,_0xe7f093,_0x4fb6fd){const _0x300af3=_0x35b5eb,_0x191664=VisuMZ[_0x300af3(0x781)][_0x300af3(0x3cb)]['BattleLayout'],_0x2cde9e=this['battleLayoutStyle']();if(_0x2cde9e==='xp'){const _0x499918=_0x191664['XPSpriteYLocation'];switch(_0x499918[_0x300af3(0x210)]()[_0x300af3(0x54d)]()){case _0x300af3(0x244):return _0x4fb6fd[_0x300af3(0x491)]-_0xe7f093['_shadowSprite'][_0x300af3(0x491)]/0x4;break;case _0x300af3(0x321):const _0x4922e8=_0x191664[_0x300af3(0x86a)];return(_0x4fb6fd[_0x300af3(0x491)]+(_0xe7f093[_0x300af3(0x491)]||_0x4922e8))/0x2;break;case _0x300af3(0x786):return 0x0;case _0x300af3(0x945):default:return this['nameY'](_0x4fb6fd);break;}}else{if(_0x2cde9e==='portrait'){}}return _0xe7f093[_0x300af3(0x491)];},Sprite_Name[_0x35b5eb(0x73b)][_0x35b5eb(0x7a7)]=function(){return 0x24;},Sprite_Name[_0x35b5eb(0x73b)][_0x35b5eb(0x71b)]=function(){const _0x435b45=_0x35b5eb,_0x45c4a8=this[_0x435b45(0x945)](),_0x43798b=this['bitmapWidth'](),_0xb94c53=this[_0x435b45(0x7a7)]();this[_0x435b45(0x516)](),this['bitmap'][_0x435b45(0xa37)](),this['bitmap'][_0x435b45(0x86f)](_0x45c4a8,0x0,0x0,_0x43798b,_0xb94c53,_0x435b45(0xb38));},Bitmap[_0x35b5eb(0x73b)][_0x35b5eb(0x86f)]=function(_0x69ab43,_0x3f9958,_0x20292d,_0x2bb5d1,_0x2a7703,_0x254492){const _0x1535d4=_0x35b5eb,_0x2ec5a5=this[_0x1535d4(0x152)],_0x18b67=_0x2ec5a5[_0x1535d4(0x53d)];_0x2bb5d1=_0x2bb5d1||0xffffffff;let _0x256ce4=_0x3f9958,_0x47b15d=Math[_0x1535d4(0x3d5)](_0x20292d+0x18/0x2+this[_0x1535d4(0xaf0)]*0.35);if(_0x254492===_0x1535d4(0x321)){if(_0x1535d4(0x418)===_0x1535d4(0x418))_0x256ce4+=_0x2bb5d1/0x2;else{const _0xf37155=this['context'],_0x4b5ce2=_0xf37155[_0x1535d4(0x53d)];_0x2b79ef=_0x710d7d||0xffffffff;let _0x22f517=_0xe3ff9a,_0x55acc2=_0x51014b[_0x1535d4(0x3d5)](_0x55cddb+0x18/0x2+this[_0x1535d4(0xaf0)]*0.35);_0x568b62===_0x1535d4(0x321)&&(_0x22f517+=_0x532249/0x2),_0x48b043==='right'&&(_0x22f517+=_0x4939c5),_0xf37155['save'](),_0xf37155[_0x1535d4(0x3dc)]=this[_0x1535d4(0x5e1)](),_0xf37155[_0x1535d4(0x7a2)]=_0x43f499,_0xf37155['textBaseline']=_0x1535d4(0x7d5),_0xf37155['globalAlpha']=0x1,this['_drawTextOutline'](_0x5569e9,_0x22f517,_0x55acc2,_0x48d485),_0xf37155['globalAlpha']=_0x4b5ce2,this['_drawTextBody'](_0x3cde5a,_0x22f517,_0x55acc2,_0x3a317f),_0xf37155[_0x1535d4(0x27c)](),this['_baseTexture']['update']();}}_0x254492==='right'&&(_0x1535d4(0x407)===_0x1535d4(0x15c)?this[_0x1535d4(0x487)](_0x5c4873,_0x3b78ce['x']+_0x5a2646['width']-_0x9fd296,_0x50b3c3['y'],_0x355a11):_0x256ce4+=_0x2bb5d1),_0x2ec5a5[_0x1535d4(0x379)](),_0x2ec5a5['font']=this[_0x1535d4(0x5e1)](),_0x2ec5a5[_0x1535d4(0x7a2)]=_0x254492,_0x2ec5a5[_0x1535d4(0x441)]=_0x1535d4(0x7d5),_0x2ec5a5[_0x1535d4(0x53d)]=0x1,this[_0x1535d4(0x37f)](_0x69ab43,_0x256ce4,_0x47b15d,_0x2bb5d1),_0x2ec5a5[_0x1535d4(0x53d)]=_0x18b67,this['_drawTextBody'](_0x69ab43,_0x256ce4,_0x47b15d,_0x2bb5d1),_0x2ec5a5['restore'](),this['_baseTexture'][_0x1535d4(0x9de)]();},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x701)]=function(_0x5abd4a){const _0x2f9ef8=_0x35b5eb;return this[_0x2f9ef8(0xa3a)](_0x5abd4a)-this[_0x2f9ef8(0x5ae)]();},Window_BattleStatus[_0x35b5eb(0x73b)]['drawItemImageListStyle']=function(_0x42dbde){const _0x3cb999=_0x35b5eb;if(!VisuMZ[_0x3cb999(0x781)][_0x3cb999(0x3cb)][_0x3cb999(0x842)][_0x3cb999(0x5f6)])return;const _0x3723cd=this[_0x3cb999(0x157)](_0x42dbde),_0x5b23e7=this[_0x3cb999(0x52a)](_0x42dbde);_0x5b23e7['width']=ImageManager['faceWidth'],_0x5b23e7[_0x3cb999(0x491)]-=0x2,this[_0x3cb999(0x91d)](_0x3723cd,_0x5b23e7['x']+0x1,_0x5b23e7['y']+0x1,_0x5b23e7[_0x3cb999(0x91c)],_0x5b23e7[_0x3cb999(0x491)]);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x758)]=function(_0x1a4a3d){const _0x14fabb=_0x35b5eb,_0x20c75c=VisuMZ[_0x14fabb(0x781)][_0x14fabb(0x3cb)][_0x14fabb(0x842)],_0x4a1908=$dataSystem[_0x14fabb(0x459)]?0x4:0x3,_0x9816cb=_0x4a1908*0x80+(_0x4a1908-0x1)*0x8+0x4,_0x2f0eaf=this[_0x14fabb(0x157)](_0x1a4a3d),_0x5a0bb9=this[_0x14fabb(0x52a)](_0x1a4a3d);let _0x69a2d=_0x5a0bb9['x']+this['padding'];if(_0x20c75c[_0x14fabb(0x5f6)]){if(_0x14fabb(0x105)!==_0x14fabb(0x4ab))_0x69a2d=_0x5a0bb9['x']+ImageManager[_0x14fabb(0x981)]+0x8;else{if(_0xb493f2[_0x14fabb(0x7fd)][_0x14fabb(0x111)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5d736b=_0xa9717a(_0x5d430a['$1'])[_0x14fabb(0x3e7)]()[_0x14fabb(0x54d)]();if(_0x5d736b==='MANUAL')return'MANUAL';if(_0x4a6eed['DamageStyles'][_0x5d736b])return _0x5d736b;}const _0x21ab77=_0x16ebf1[_0x14fabb(0x781)][_0x14fabb(0x3cb)][_0x14fabb(0x165)]['DefaultDamageStyle'][_0x14fabb(0x3e7)]()[_0x14fabb(0x54d)]();if(_0x412fae[_0x14fabb(0x3fe)][_0x21ab77])return _0x21ab77;return _0x14fabb(0x1ba);}}else'wNQXP'===_0x14fabb(0x646)?this[_0x14fabb(0x225)]['x']=_0x4d643d[_0x14fabb(0x91c)]-(_0x1d442f[_0x14fabb(0x91c)]-_0x2260c0[_0x14fabb(0x1b4)])/0x2-this[_0x14fabb(0x225)]['width']-0x4:_0x69a2d+=ImageManager[_0x14fabb(0x71c)];const _0xaddfb=Math['round'](Math[_0x14fabb(0x4bc)](_0x5a0bb9['x']+_0x5a0bb9[_0x14fabb(0x91c)]-_0x9816cb,_0x69a2d)),_0x5eb92e=Math[_0x14fabb(0x3d5)](_0x5a0bb9['y']+(_0x5a0bb9[_0x14fabb(0x491)]-Sprite_Name['prototype'][_0x14fabb(0x7a7)]())/0x2),_0x5bd20f=Math[_0x14fabb(0x3d5)](_0xaddfb-ImageManager['iconWidth']/0x2-0x4),_0x325652=Math[_0x14fabb(0x3d5)](_0x5a0bb9['y']+(_0x5a0bb9[_0x14fabb(0x491)]-ImageManager[_0x14fabb(0x83b)])/0x2+ImageManager[_0x14fabb(0x83b)]/0x2);let _0x2931a4=_0xaddfb+0x88;const _0xe05476=_0x5eb92e;this[_0x14fabb(0x263)](_0x2f0eaf,_0xaddfb-0x4+(_0x20c75c['TpbGaugeOffsetX']||0x0),_0x5eb92e+(_0x20c75c[_0x14fabb(0x23b)]||0x0)),this[_0x14fabb(0x603)](_0x2f0eaf,_0xaddfb+(_0x20c75c[_0x14fabb(0xdc)]||0x0),_0x5eb92e+(_0x20c75c[_0x14fabb(0x1ac)]||0x0)),this[_0x14fabb(0x654)](_0x2f0eaf,_0x5bd20f+(_0x20c75c['StateIconOffsetX']||0x0),_0x325652+(_0x20c75c[_0x14fabb(0x802)]||0x0)),this[_0x14fabb(0x203)](_0x2f0eaf,'hp',_0x2931a4+0x88*0x0+(_0x20c75c[_0x14fabb(0x8ed)]||0x0),_0xe05476+(_0x20c75c[_0x14fabb(0xa49)]||0x0)),this[_0x14fabb(0x203)](_0x2f0eaf,'mp',_0x2931a4+0x88*0x1+(_0x20c75c[_0x14fabb(0xc5)]||0x0),_0xe05476+(_0x20c75c[_0x14fabb(0x85c)]||0x0)),$dataSystem[_0x14fabb(0x459)]&&this[_0x14fabb(0x203)](_0x2f0eaf,'tp',_0x2931a4+0x88*0x2+(_0x20c75c['TpGaugeOffsetX']||0x0),_0xe05476+(_0x20c75c[_0x14fabb(0xaf7)]||0x0));},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0xae8)]=function(_0x4fabc4){const _0x3f734d=_0x35b5eb;if(!$gameSystem[_0x3f734d(0x9b9)]())return;VisuMZ[_0x3f734d(0x781)][_0x3f734d(0x155)]['call'](this,_0x4fabc4);},Window_BattleStatus['prototype']['drawItemStatusXPStyle']=function(_0x40832e){const _0x4c628e=_0x35b5eb,_0x33dccb=VisuMZ['BattleCore'][_0x4c628e(0x3cb)]['BattleLayout'],_0x348050=this['actor'](_0x40832e),_0xd9911b=this[_0x4c628e(0x52a)](_0x40832e),_0x17bba0=Math['round'](_0xd9911b['x']+(_0xd9911b[_0x4c628e(0x91c)]-0x80)/0x2),_0x45e677=this['nameY'](_0xd9911b);let _0x158588=_0x17bba0-ImageManager[_0x4c628e(0x71c)]/0x2-0x4,_0x471458=_0x45e677+ImageManager['iconHeight']/0x2;_0x158588-ImageManager[_0x4c628e(0x71c)]/0x2<_0xd9911b['x']&&(_0x158588=_0x17bba0+ImageManager[_0x4c628e(0x71c)]/0x2-0x4,_0x471458=_0x45e677-ImageManager[_0x4c628e(0x83b)]/0x2);const _0x4ecb66=_0x17bba0,_0xf02203=this['basicGaugesY'](_0xd9911b);this[_0x4c628e(0x263)](_0x348050,_0x17bba0+(_0x33dccb[_0x4c628e(0x4af)]||0x0),_0x45e677+(_0x33dccb[_0x4c628e(0x23b)]||0x0)),this['placeActorName'](_0x348050,_0x17bba0+(_0x33dccb[_0x4c628e(0xdc)]||0x0),_0x45e677+(_0x33dccb['NameOffsetY']||0x0)),this[_0x4c628e(0x654)](_0x348050,_0x158588+(_0x33dccb[_0x4c628e(0x6dd)]||0x0),_0x471458+(_0x33dccb['StateIconOffsetY']||0x0)),this[_0x4c628e(0x203)](_0x348050,'hp',_0x4ecb66+(_0x33dccb[_0x4c628e(0x8ed)]||0x0),_0xf02203+(_0x33dccb['HpGaugeOffsetY']||0x0)),this[_0x4c628e(0x203)](_0x348050,'mp',_0x4ecb66+(_0x33dccb['MpGaugeOffsetX']||0x0),_0xf02203+this['gaugeLineHeight']()+(_0x33dccb[_0x4c628e(0x85c)]||0x0)),$dataSystem[_0x4c628e(0x459)]&&this['placeGauge'](_0x348050,'tp',_0x4ecb66+(_0x33dccb[_0x4c628e(0x9a1)]||0x0),_0xf02203+this['gaugeLineHeight']()*0x2+(_0x33dccb[_0x4c628e(0xaf7)]||0x0));},Window_BattleStatus[_0x35b5eb(0x73b)]['showPortraits']=function(_0x26777b){const _0x451d5f=_0x35b5eb;if(!VisuMZ[_0x451d5f(0x781)][_0x451d5f(0x3cb)][_0x451d5f(0x842)]['ShowPortraits'])return![];if(_0x26777b['getBattlePortrait']())return!![];return Imported[_0x451d5f(0x919)]&&_0x26777b['getMenuImage']();},Game_Actor[_0x35b5eb(0x73b)]['getBattlePortraitOffsetX']=function(){const _0x3ba408=_0x35b5eb;if(this['actor']()[_0x3ba408(0x7fd)][_0x3ba408(0x111)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x3ba408(0x7fd)][_0x3ba408(0x111)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x35b5eb(0x73b)][_0x35b5eb(0x3cf)]=function(){const _0x3c100b=_0x35b5eb;if(this[_0x3c100b(0x157)]()[_0x3c100b(0x7fd)][_0x3c100b(0x111)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3c100b(0x157)]()[_0x3c100b(0x7fd)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x3c100b(0x59c)===_0x3c100b(0x59c))return Number(RegExp['$2']);else{if(this[_0x3c100b(0x5d3)]()[_0x3c100b(0x7fd)][_0x3c100b(0x111)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x193777=_0x3031f4(_0x2f0744['$1'])[_0x3c100b(0x3e7)]()[_0x3c100b(0x54d)]();return _0x193777;}return _0x3c100b(0x1ba);}}}return 0x0;},Window_BattleStatus[_0x35b5eb(0x73b)]['drawItemImagePortraitStyle']=function(_0x462444){const _0x2e25c0=_0x35b5eb,_0x562a0d=this[_0x2e25c0(0x157)](_0x462444);if(this[_0x2e25c0(0x605)](_0x562a0d)){if(_0x2e25c0(0x48b)!==_0x2e25c0(0x48b)){const _0xd0c89d=_0xc313dc[_0x2e25c0(0x4be)](this[_0x2e25c0(0x5d3)]()),_0x2f41e5=_0x2728b8[_0x2e25c0(0x3fe)][_0xd0c89d];try{return _0x2f41e5[_0x2e25c0(0xac2)][_0x2e25c0(0x541)](this,_0x1c9d37);}catch(_0x2f5694){if(_0x3e205d['isPlaytest']())_0x513eb4['log'](_0x2f5694);return _0x491a11[_0x2e25c0(0x781)][_0x2e25c0(0x196)][_0x2e25c0(0x541)](this);}}else{const _0xccb15a=_0x2e25c0(0x858)[_0x2e25c0(0x4ed)](_0x562a0d[_0x2e25c0(0xaf4)]()),_0x309d0d=this[_0x2e25c0(0x153)](_0xccb15a,Sprite),_0x25935a=_0x562a0d[_0x2e25c0(0x36c)]();if(_0x25935a!==''){if(_0x2e25c0(0x923)==='ZuUls'){if(_0x3b8c85[_0x2e25c0(0xdf)]&&_0x7368ff[_0x2e25c0(0x2f6)]!==_0x2ccc19)return _0x4315f8['uiInputPosition'];else{if(this[_0x2e25c0(0xd6)]()==='border')return![];else{return _0x398bb0['prototype'][_0x2e25c0(0x76c)]['call'](this);;}}}else _0x309d0d[_0x2e25c0(0x89a)]=ImageManager[_0x2e25c0(0x7d1)](_0x25935a);}else'fjOph'===_0x2e25c0(0x2ff)?this['_immortal']=![]:_0x309d0d[_0x2e25c0(0x89a)]=ImageManager[_0x2e25c0(0x737)];const _0x55b102=this[_0x2e25c0(0x52a)](_0x462444);_0x309d0d[_0x2e25c0(0xabd)]['x']=0.5,_0x309d0d[_0x2e25c0(0xabd)]['y']=0x1;let _0x5bb729=Math['round'](_0x55b102['x']+_0x55b102[_0x2e25c0(0x91c)]/0x2)+this[_0x2e25c0(0x2f5)];_0x5bb729+=_0x562a0d[_0x2e25c0(0x322)]();let _0x5a4763=Math[_0x2e25c0(0x3d5)](this[_0x2e25c0(0x491)]);_0x5a4763+=_0x562a0d[_0x2e25c0(0x3cf)](),_0x309d0d[_0x2e25c0(0xa87)](_0x5bb729,_0x5a4763);const _0x2d23cf=VisuMZ[_0x2e25c0(0x781)]['Settings'][_0x2e25c0(0x842)][_0x2e25c0(0x454)];_0x309d0d[_0x2e25c0(0xac1)]['x']=_0x2d23cf,_0x309d0d[_0x2e25c0(0xac1)]['y']=_0x2d23cf,_0x309d0d[_0x2e25c0(0x756)]();}}else{const _0x1ababe=this[_0x2e25c0(0x6d0)](_0x462444);this[_0x2e25c0(0x91d)](_0x562a0d,_0x1ababe['x'],_0x1ababe['y'],_0x1ababe[_0x2e25c0(0x91c)],_0x1ababe['height']);}},Window_BattleStatus['prototype'][_0x35b5eb(0x153)]=function(_0x856f4f,_0x586618){const _0x499053=_0x35b5eb,_0x5d4d80=this['_additionalSprites'];if(_0x5d4d80[_0x856f4f])return _0x5d4d80[_0x856f4f];else{if(_0x499053(0xb32)==='dXrAX')_0x50eff6[_0x499053(0x781)][_0x499053(0x699)][_0x499053(0x541)](this),this['callNextMethod']();else{const _0x46fa05=new _0x586618();return _0x5d4d80[_0x856f4f]=_0x46fa05,this[_0x499053(0x759)](_0x46fa05),this[_0x499053(0x759)](this[_0x499053(0xbe)]),_0x46fa05;}}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x899)]=function(){const _0x334afb=_0x35b5eb;this[_0x334afb(0xa27)](),this['_createEffectsContainer'](),Window_StatusBase['prototype'][_0x334afb(0x899)][_0x334afb(0x541)](this),this['_createDamageContainer']();},Window_BattleStatus['prototype']['_createCursorArea']=function(){const _0x2ad7c4=_0x35b5eb;this[_0x2ad7c4(0xbe)]=new Sprite(),this[_0x2ad7c4(0xbe)][_0x2ad7c4(0x94d)]=[new PIXI['filters']['AlphaFilter']()],this[_0x2ad7c4(0xbe)]['filterArea']=new Rectangle(),this[_0x2ad7c4(0xbe)]['move'](this[_0x2ad7c4(0x7e9)],this[_0x2ad7c4(0x7e9)]),this[_0x2ad7c4(0x835)](this[_0x2ad7c4(0xbe)]);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x761)]=function(){const _0x30b606=_0x35b5eb;this[_0x30b606(0x95a)]=new Sprite(),this[_0x30b606(0x835)](this[_0x30b606(0x95a)]);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x190)]=function(){const _0xeb31d7=_0x35b5eb;this[_0xeb31d7(0x95a)]&&this[_0xeb31d7(0x835)](this[_0xeb31d7(0x95a)]);},Window_BattleStatus[_0x35b5eb(0x73b)]['_createDamageContainer']=function(){const _0x2d5081=_0x35b5eb;this['_damageContainer']=new Sprite(),this[_0x2d5081(0x835)](this[_0x2d5081(0x8ab)]);},Window_BattleStatus['prototype'][_0x35b5eb(0x6d3)]=function(){const _0x46fff8=_0x35b5eb;this[_0x46fff8(0x1a4)]=new Sprite();for(let _0x3127ba=0x0;_0x3127ba<0x9;_0x3127ba++){'xzQAj'==='SpWMG'?this['repositionEnemiesByResolution']():this['_cursorSprite']['addChild'](new Sprite());}this[_0x46fff8(0xbe)][_0x46fff8(0x835)](this[_0x46fff8(0x1a4)]);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0xa3b)]=function(){const _0x1abe3b=_0x35b5eb;Window_StatusBase[_0x1abe3b(0x73b)][_0x1abe3b(0xa3b)]['call'](this),this[_0x1abe3b(0x6d7)]();},Window_BattleStatus['prototype'][_0x35b5eb(0x6d7)]=function(){const _0x3397a7=_0x35b5eb,_0x333a4e=this[_0x3397a7(0x7e9)];this[_0x3397a7(0xbe)][_0x3397a7(0xa87)](_0x333a4e,_0x333a4e),this['_cursorArea']['x']=_0x333a4e-this['origin']['x'],this[_0x3397a7(0xbe)]['y']=_0x333a4e-this[_0x3397a7(0x826)]['y'];if(this['innerWidth']>0x0&&this['innerHeight']>0x0)'lhWkk'!==_0x3397a7(0x5e0)?_0x5bcc74=(_0x3ce9aa+_0x3295f6)/0x2:this[_0x3397a7(0xbe)][_0x3397a7(0x17f)]=this[_0x3397a7(0x1e5)]();else{if(_0x3397a7(0x648)===_0x3397a7(0x648))this[_0x3397a7(0xbe)][_0x3397a7(0x17f)]=![];else{if(!this['_battler'][_0x3397a7(0x498)]())return;const _0x1ec0c8=_0x1a2e15[_0x3397a7(0x781)]['Settings'][_0x3397a7(0x165)],_0x39d5e5=new _0x3c1405();_0x39d5e5['_duration']=_0x1ec0c8['PopupDuration'],this[_0x3397a7(0x9d0)](_0x39d5e5),_0x39d5e5[_0x3397a7(0x772)](_0x2cde62,_0x15ca7f,_0x12eb65),this['addDamageSprite'](_0x39d5e5);}}},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x608)]=function(){const _0x126eb2=_0x35b5eb;Window_StatusBase[_0x126eb2(0x73b)][_0x126eb2(0x608)][_0x126eb2(0x541)](this),this[_0x126eb2(0x101)]();},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x101)]=function(){const _0x263622=_0x35b5eb,_0x5c5576=this[_0x263622(0xbe)]['worldTransform']['apply'](new Point(0x0,0x0)),_0x36c795=this[_0x263622(0xbe)]['filterArea'];_0x36c795['x']=_0x5c5576['x']+this[_0x263622(0x826)]['x'],_0x36c795['y']=_0x5c5576['y']+this[_0x263622(0x826)]['y'],_0x36c795[_0x263622(0x91c)]=this[_0x263622(0x2eb)],_0x36c795[_0x263622(0x491)]=this[_0x263622(0x17e)];},Window_BattleStatus['prototype']['refreshActorPortrait']=function(_0x1a0c1d){const _0x3b3fc3=_0x35b5eb;if(this[_0x3b3fc3(0xd6)]()!==_0x3b3fc3(0xf2))return;this[_0x3b3fc3(0x70c)](_0x1a0c1d[_0x3b3fc3(0xcb)]());},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x112)]=function(_0x421745,_0x3d3f02){const _0x58c936=_0x35b5eb;if(!this[_0x58c936(0x8ab)])return;if(!_0x421745)return;if(!_0x3d3f02)return;const _0x3aa651=this[_0x58c936(0x52a)](_0x3d3f02[_0x58c936(0xcb)]());_0x3aa651['x']+=_0x3aa651[_0x58c936(0x91c)]/0x2+this['padding'],_0x421745['x']=_0x3aa651['x'],_0x421745['y']=_0x3aa651['y'],this[_0x58c936(0x8ab)][_0x58c936(0x835)](_0x421745);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x853)]=function(_0x35b055){const _0x56ee62=_0x35b5eb;if(!this[_0x56ee62(0x8ab)])return;if(!_0x35b055)return;this[_0x56ee62(0x8ab)][_0x56ee62(0x798)](_0x35b055);},Window_BattleStatus['prototype']['updateBorderStyle']=function(){const _0x2f8e62=_0x35b5eb;if(!this['isBorderStylePortraitShown']())return;if(!this['_borderPortraitSprite'])this[_0x2f8e62(0x5ac)]();this[_0x2f8e62(0x363)](),this[_0x2f8e62(0x599)]();},Window_BattleStatus[_0x35b5eb(0x73b)]['isBorderStylePortraitShown']=function(){const _0x2e1113=_0x35b5eb;if(this[_0x2e1113(0x62e)]!==Window_BattleStatus)return![];if(!SceneManager[_0x2e1113(0x3a2)]())return![];return VisuMZ[_0x2e1113(0x781)][_0x2e1113(0x3cb)][_0x2e1113(0x842)][_0x2e1113(0xf5)];},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x5ac)]=function(){const _0x4cf632=_0x35b5eb;this[_0x4cf632(0x8ea)]=new Sprite();const _0x41b3a8=SceneManager['_scene'],_0x43bfd1=_0x41b3a8[_0x4cf632(0x85e)][_0x4cf632(0x57e)](_0x41b3a8['_windowLayer']);_0x41b3a8['addChildAt'](this['_borderPortraitSprite'],_0x43bfd1),this[_0x4cf632(0x8ea)][_0x4cf632(0xabd)]['x']=0.5,this[_0x4cf632(0x8ea)][_0x4cf632(0xabd)]['y']=0x1;const _0x4a71e1=VisuMZ[_0x4cf632(0x781)]['Settings']['BattleLayout'][_0x4cf632(0x3ae)];this[_0x4cf632(0x8ea)]['scale']['x']=_0x4a71e1,this[_0x4cf632(0x8ea)]['scale']['y']=_0x4a71e1,this[_0x4cf632(0x8ea)]['y']=this['y']+this[_0x4cf632(0x491)],this[_0x4cf632(0xa8a)]=0x0;},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x363)]=function(){const _0x226a26=_0x35b5eb;this['_borderPortraitSprite'][_0x226a26(0x17f)]=BattleManager[_0x226a26(0x38e)]();const _0x3b59cc=BattleManager[_0x226a26(0x157)]();if(_0x3b59cc===this[_0x226a26(0x8ea)][_0x226a26(0x157)])return;this[_0x226a26(0x8ea)]['actor']=_0x3b59cc||this[_0x226a26(0x8ea)][_0x226a26(0x157)];if(!_0x3b59cc)return;else{if(_0x3b59cc[_0x226a26(0x36c)]()===''){if(_0x226a26(0x9f6)!=='ZrlUb'){this['_borderPortraitSprite'][_0x226a26(0x89a)]=ImageManager['_emptyBitmap'];return;}else _0x25e11c[_0x226a26(0xb22)][_0x226a26(0x10d)]=![];}else{if(_0x226a26(0x92b)!==_0x226a26(0x2c5)){const _0x59d3e2=ImageManager['loadPicture'](_0x3b59cc[_0x226a26(0x36c)]());_0x59d3e2['addLoadListener'](this[_0x226a26(0x948)]['bind'](this,_0x59d3e2));}else{const _0x271fa3=_0x36f400[_0x226a26(0x73b)]['extraHeight'](),_0x5972c0=_0x4e0c7c[_0x226a26(0x1b4)],_0x46ae2e=this[_0x226a26(0x332)]()+_0x271fa3,_0x1622ee=0x0,_0x5a62ab=_0x2fba30[_0x226a26(0x197)]-_0x46ae2e+_0x271fa3;return new _0x3f417c(_0x1622ee,_0x5a62ab,_0x5972c0,_0x46ae2e);}}}},Window_BattleStatus[_0x35b5eb(0x73b)]['processBorderActor']=function(_0x259f4f){const _0x41551e=_0x35b5eb;this[_0x41551e(0xa8a)]=0x14,this[_0x41551e(0x8ea)][_0x41551e(0x89a)]=_0x259f4f;SceneManager[_0x41551e(0x885)]['isRightInputMode']()?(this[_0x41551e(0x8ea)]['x']=0x0,this['_borderPortraitTargetX']=Math['ceil'](_0x259f4f[_0x41551e(0x91c)]/0x2)):(this[_0x41551e(0x8ea)]['x']=this[_0x41551e(0x91c)],this['_borderPortraitTargetX']=this[_0x41551e(0x91c)]*0x3/0x4);this[_0x41551e(0x8ea)][_0x41551e(0x1be)]=0x0,this[_0x41551e(0x8ea)]['y']=this['y']+this[_0x41551e(0x491)];const _0x304d06=BattleManager['actor']();_0x304d06&&(this[_0x41551e(0x2cf)]+=_0x304d06['getBattlePortraitOffsetX'](),this[_0x41551e(0x8ea)]['y']+=_0x304d06['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0x599)]=function(){const _0x211330=_0x35b5eb;if(this[_0x211330(0xa8a)]>0x0){if(_0x211330(0x65e)!==_0x211330(0xb04)){const _0x147d60=this[_0x211330(0xa8a)],_0x3eb2fb=this[_0x211330(0x8ea)];_0x3eb2fb['x']=(_0x3eb2fb['x']*(_0x147d60-0x1)+this[_0x211330(0x2cf)])/_0x147d60,_0x3eb2fb[_0x211330(0x1be)]=(_0x3eb2fb[_0x211330(0x1be)]*(_0x147d60-0x1)+0xff)/_0x147d60,this[_0x211330(0xa8a)]--;}else{const _0x2d4c5e=_0x20c82a[this['_actor'][_0x211330(0x6c1)]()];if(!_0x2d4c5e)return;if(!this['canAddSkillCommand'](_0x2d4c5e))return;const _0x295117=this['commandStyle'](),_0xb0a1f1=_0x47dbf0['battleCommandName'](_0x2d4c5e),_0x3104e5=_0x6ade49[_0x211330(0x31c)](_0x2d4c5e),_0x15f309=_0x295117==='text'?_0xb0a1f1:_0x211330(0x901)[_0x211330(0x4ed)](_0x3104e5,_0xb0a1f1);this['addCommand'](_0x15f309,_0x211330(0x6de),this[_0x211330(0x238)][_0x211330(0xe1)]());}}},Window_BattleStatus[_0x35b5eb(0x73b)]['updateEffectContainers']=function(){const _0x1d01b9=_0x35b5eb;return;this[_0x1d01b9(0x95a)]&&(this[_0x1d01b9(0x95a)]['x']=this['x'],this[_0x1d01b9(0x95a)]['y']=this['y']),this[_0x1d01b9(0x8ab)]&&(this[_0x1d01b9(0x8ab)]['x']=this['x'],this[_0x1d01b9(0x8ab)]['y']=this['y']);},Window_BattleStatus[_0x35b5eb(0x73b)][_0x35b5eb(0xb31)]=function(){const _0x30dace=_0x35b5eb,_0x4e3e5d=VisuMZ[_0x30dace(0x781)][_0x30dace(0x3cb)][_0x30dace(0x842)];if(_0x4e3e5d[_0x30dace(0x529)]){const _0x5102ee=new Sprite();_0x5102ee[_0x30dace(0x89a)]=ImageManager['loadSystem'](_0x4e3e5d['StatusWindowAttachmentBack']),_0x5102ee['x']=_0x4e3e5d[_0x30dace(0x37d)]||0x0,_0x5102ee['y']=_0x4e3e5d[_0x30dace(0x985)]||0x0,this['addChildToBack'](_0x5102ee),this[_0x30dace(0x9eb)]=_0x5102ee;}if(_0x4e3e5d[_0x30dace(0x485)]){const _0x551861=new Sprite();_0x551861['bitmap']=ImageManager[_0x30dace(0x4e7)](_0x4e3e5d[_0x30dace(0x485)]),_0x551861['x']=_0x4e3e5d[_0x30dace(0x23c)]||0x0,_0x551861['y']=_0x4e3e5d[_0x30dace(0x3d6)]||0x0,this[_0x30dace(0x835)](_0x551861),this[_0x30dace(0x3d0)]=_0x551861;}},Window_BattleStatus['prototype'][_0x35b5eb(0x3bf)]=function(){const _0x3b991e=_0x35b5eb;this[_0x3b991e(0x3d0)]&&(_0x3b991e(0x4c6)!==_0x3b991e(0x4d0)?this['addChild'](this[_0x3b991e(0x3d0)]):(_0x9d67d8+='\x0a',_0x5be6ff+=_0x4a86f6['parameters'][0x0])),this[_0x3b991e(0x9eb)]&&this[_0x3b991e(0x759)](this['_backAttachmentSprite']);},Window_BattleActor['prototype'][_0x35b5eb(0x5a0)]=function(){const _0x398710=_0x35b5eb;return Window_BattleStatus['prototype'][_0x398710(0x5a0)][_0x398710(0x541)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x35b5eb(0x73b)][_0x35b5eb(0x6a3)]=function(){const _0x47180c=_0x35b5eb,_0x12bfef=BattleManager['inputtingAction'](),_0x1dea8d=this[_0x47180c(0x157)](this[_0x47180c(0xcb)]());if(!_0x12bfef)return!![];if(!_0x12bfef[_0x47180c(0x5d3)]())return!![];const _0x2dcd54=_0x12bfef[_0x47180c(0x5d3)]()[_0x47180c(0x7fd)];if(_0x2dcd54['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x1dea8d===BattleManager['actor']())return![];}return!![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x2d9)]=Window_BattleEnemy['prototype'][_0x35b5eb(0x255)],Window_BattleEnemy['prototype'][_0x35b5eb(0x255)]=function(_0x276205){const _0x56b42b=_0x35b5eb;this['_lastEnemy']=null,VisuMZ['BattleCore']['Window_BattleEnemy_initialize'][_0x56b42b(0x541)](this,_0x276205);},Window_BattleEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0xc8)]=function(){const _0x31ecc7=_0x35b5eb;return this[_0x31ecc7(0x9b1)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x45e)]=Window_BattleEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x756)],Window_BattleEnemy[_0x35b5eb(0x73b)]['show']=function(){const _0x3201c2=_0x35b5eb;VisuMZ[_0x3201c2(0x781)][_0x3201c2(0x45e)]['call'](this),this['y']=Graphics[_0x3201c2(0x491)]*0xa;},Window_BattleEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0xa9b)]=function(){const _0x3c0d9f=_0x35b5eb;return $gameTroop['aliveMembers']()[_0x3c0d9f(0x4b1)](0x0);},Window_BattleEnemy[_0x35b5eb(0x73b)]['refresh']=function(){const _0x3e2c05=_0x35b5eb;this['_enemies']=this[_0x3e2c05(0xa9b)](),this['sortEnemies'](),Window_Selectable[_0x3e2c05(0x73b)][_0x3e2c05(0x129)][_0x3e2c05(0x541)](this);},Window_BattleEnemy[_0x35b5eb(0x73b)]['sortEnemies']=function(){const _0x56a7b0=_0x35b5eb;this['_enemies'][_0x56a7b0(0x9ed)]((_0x50283a,_0x36366d)=>{const _0x3b3912=_0x56a7b0;if(_0x3b3912(0xc2)!==_0x3b3912(0xc2)){this['width']=_0x3e4a57['width'],this[_0x3b3912(0x491)]=_0x292452[_0x3b3912(0x491)];const _0x3633e9=this['width']/this[_0x3b3912(0x89a)][_0x3b3912(0x91c)],_0x5d73e4=this[_0x3b3912(0x491)]/this[_0x3b3912(0x89a)][_0x3b3912(0x491)],_0x5cfaaa=_0x25fffa[_0x3b3912(0x2a3)](_0x3633e9,_0x5d73e4);this['scale']['x']=_0x5cfaaa,this[_0x3b3912(0xac1)]['y']=_0x5cfaaa,this['x']=(_0x3066cf[_0x3b3912(0x91c)]-this[_0x3b3912(0x91c)])/0x2,this['y']=_0x2ec326[_0x3b3912(0x491)]-this['height'];}else return _0x50283a[_0x3b3912(0x691)]()[_0x3b3912(0x74d)]===_0x36366d[_0x3b3912(0x691)]()[_0x3b3912(0x74d)]?_0x50283a['battler']()[_0x3b3912(0x740)]-_0x36366d[_0x3b3912(0x691)]()[_0x3b3912(0x740)]:_0x50283a[_0x3b3912(0x691)]()[_0x3b3912(0x74d)]-_0x36366d[_0x3b3912(0x691)]()[_0x3b3912(0x74d)];}),SceneManager[_0x56a7b0(0x725)]()&&this[_0x56a7b0(0x11f)][_0x56a7b0(0x719)]();},Window_BattleEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x164)]=function(){const _0x4a8f2a=_0x35b5eb,_0x43a293=VisuMZ[_0x4a8f2a(0x781)][_0x4a8f2a(0x3cb)]['Enemy'];if(_0x43a293[_0x4a8f2a(0xa62)])this['autoSelectLastSelected']();else{if(_0x4a8f2a(0x3c2)===_0x4a8f2a(0x5d0))return 0x0;else this['autoSelectPriority']();}},Window_BattleEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x9d7)]=function(){const _0x38cbe4=_0x35b5eb;if(this['_lastEnemy']&&this[_0x38cbe4(0x11f)][_0x38cbe4(0x87d)](this[_0x38cbe4(0xacd)])){const _0x348029=this['_enemies']['indexOf'](this['_lastEnemy']);this['forceSelect'](_0x348029);}else this[_0x38cbe4(0x2cb)]();},Window_BattleEnemy[_0x35b5eb(0x73b)][_0x35b5eb(0x2cb)]=function(){const _0x16ece6=_0x35b5eb,_0x243d50=VisuMZ[_0x16ece6(0x781)][_0x16ece6(0x3cb)]['Enemy'];let _0x2cfad5=![];$gameSystem[_0x16ece6(0x9b9)]()?_0x2cfad5=_0x243d50['SideviewSelect']:_0x2cfad5=_0x243d50['FrontViewSelect'],this[_0x16ece6(0x73d)](_0x2cfad5?this[_0x16ece6(0x9b1)]()-0x1:0x0);},Window_BattleEnemy[_0x35b5eb(0x73b)]['callOkHandler']=function(){const _0x1b99c2=_0x35b5eb;Window_Selectable['prototype'][_0x1b99c2(0x9f5)]['call'](this),this[_0x1b99c2(0xacd)]=this[_0x1b99c2(0x81d)]();},Window_BattleItem['prototype']['includes']=function(_0x1b31a0){const _0x97c228=_0x35b5eb;if(!_0x1b31a0)return![];return _0x1b31a0[_0x97c228(0x7bc)]===0x0||_0x1b31a0[_0x97c228(0x7bc)]===0x1;};function Window_AutoBattleCancel(){const _0x5558d2=_0x35b5eb;this[_0x5558d2(0x255)](...arguments);}Window_AutoBattleCancel['prototype']=Object['create'](Window_Base[_0x35b5eb(0x73b)]),Window_AutoBattleCancel['prototype'][_0x35b5eb(0x62e)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x35b5eb(0x255)]=function(_0x66b79){const _0x2877fc=_0x35b5eb;Window_Base[_0x2877fc(0x73b)]['initialize'][_0x2877fc(0x541)](this,_0x66b79),this['setBackgroundType'](this[_0x2877fc(0xa03)]()),this[_0x2877fc(0x129)]();},Window_AutoBattleCancel[_0x35b5eb(0x73b)][_0x35b5eb(0xa03)]=function(){const _0x94dbbf=_0x35b5eb;return VisuMZ[_0x94dbbf(0x781)]['Settings'][_0x94dbbf(0x93c)][_0x94dbbf(0x3b8)];},Window_AutoBattleCancel[_0x35b5eb(0x73b)][_0x35b5eb(0x129)]=function(){const _0x5b0235=_0x35b5eb;this['contents'][_0x5b0235(0xa37)]();const _0x479494=VisuMZ[_0x5b0235(0x781)]['Settings']['AutoBattle']['AutoBattleMsg'],_0x4ed66c=_0x479494[_0x5b0235(0x4ed)](this[_0x5b0235(0x953)](),this[_0x5b0235(0x1b9)]()),_0x3ef78f=this['textSizeEx'](_0x4ed66c)[_0x5b0235(0x91c)],_0x51edc2=Math[_0x5b0235(0xaaf)]((this[_0x5b0235(0x2eb)]-_0x3ef78f)/0x2);this['drawTextEx'](_0x4ed66c,_0x51edc2,0x0,_0x3ef78f);},Window_AutoBattleCancel['prototype'][_0x35b5eb(0x953)]=function(){const _0x438fa4=_0x35b5eb;return Imported[_0x438fa4(0x268)]?TextManager[_0x438fa4(0x7fa)]('ok'):VisuMZ[_0x438fa4(0x781)]['Settings']['AutoBattle']['AutoBattleOK'];},Window_AutoBattleCancel['prototype'][_0x35b5eb(0x1b9)]=function(){const _0x647bd1=_0x35b5eb;if(Imported[_0x647bd1(0x268)]){if(_0x647bd1(0x6a7)!=='tQZtO')_0x252b96=_0x4e1f5f['CastCertain'];else return TextManager[_0x647bd1(0x7fa)]('cancel');}else return _0x647bd1(0x972)===_0x647bd1(0x972)?VisuMZ[_0x647bd1(0x781)]['Settings']['AutoBattle'][_0x647bd1(0x5b0)]:_0xff69d[_0x647bd1(0x781)][_0x647bd1(0x3cb)]['AutoBattle'][_0x647bd1(0x527)][_0x647bd1(0x541)](this);},Window_AutoBattleCancel[_0x35b5eb(0x73b)][_0x35b5eb(0x9de)]=function(){const _0x2d25b2=_0x35b5eb;Window_Base['prototype'][_0x2d25b2(0x9de)]['call'](this),this[_0x2d25b2(0x72a)](),this[_0x2d25b2(0x49b)]();},Window_AutoBattleCancel[_0x35b5eb(0x73b)][_0x35b5eb(0x72a)]=function(){const _0xc4ca6c=_0x35b5eb;this['visible']=BattleManager[_0xc4ca6c(0x345)];},Window_AutoBattleCancel[_0x35b5eb(0x73b)][_0x35b5eb(0x49b)]=function(){const _0x392167=_0x35b5eb;if(!BattleManager[_0x392167(0x345)])return;(Input[_0x392167(0x3df)]('ok')||Input[_0x392167(0x3df)](_0x392167(0xabb))||TouchInput[_0x392167(0x177)]()||TouchInput[_0x392167(0xab8)]())&&(SoundManager[_0x392167(0x8a5)](),BattleManager[_0x392167(0x345)]=![],Input[_0x392167(0xa37)](),TouchInput[_0x392167(0xa37)]());};function Window_EnemyName(){const _0x7bfa0d=_0x35b5eb;this[_0x7bfa0d(0x255)](...arguments);}Window_EnemyName[_0x35b5eb(0x73b)]=Object[_0x35b5eb(0x800)](Window_StatusBase[_0x35b5eb(0x73b)]),Window_EnemyName['prototype'][_0x35b5eb(0x62e)]=Window_EnemyName,Window_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x255)]=function(_0x597ac4){const _0x1d2a4a=_0x35b5eb;this['_enemyID']=_0x597ac4,this['_text']='';const _0x1d8002=new Rectangle(0x0,0x0,Graphics[_0x1d2a4a(0x1b4)],this['lineHeight']()*0x4);Window_StatusBase[_0x1d2a4a(0x73b)][_0x1d2a4a(0x255)]['call'](this,_0x1d8002),this['setBackgroundType'](0x2),this[_0x1d2a4a(0xa70)]=0x0;},Window_EnemyName['prototype']['updatePadding']=function(){const _0x43280a=_0x35b5eb;this[_0x43280a(0x2f5)]=0x0;},Window_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x81d)]=function(){return $gameTroop['members']()[this['_enemyID']];},Window_EnemyName[_0x35b5eb(0x73b)]['update']=function(){const _0x21283a=_0x35b5eb;Window_StatusBase[_0x21283a(0x73b)][_0x21283a(0x9de)][_0x21283a(0x541)](this),this['enemy']()&&this[_0x21283a(0x81d)]()[_0x21283a(0x945)]()!==this[_0x21283a(0x8c7)]&&(this['_text']=this[_0x21283a(0x81d)]()[_0x21283a(0x945)](),this[_0x21283a(0x129)]()),this[_0x21283a(0x34f)](),this['updatePosition']();},Window_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x34f)]=function(){const _0x3d8db2=_0x35b5eb;if(!this[_0x3d8db2(0x81d)]()){if(this[_0x3d8db2(0xa70)]>0x0)this[_0x3d8db2(0xa70)]-=0x10;}else{if(this['enemy']()[_0x3d8db2(0x1b2)]()){if(_0x3d8db2(0x845)===_0x3d8db2(0x845)){if(this[_0x3d8db2(0xa70)]>0x0)this[_0x3d8db2(0xa70)]-=0x10;}else _0x26f5f2[_0x3d8db2(0x781)][_0x3d8db2(0x270)][_0x3d8db2(0x541)](this),this['addAutoBattleCommands'](),this['addShowHpGaugeCommand']();}else{if(SceneManager[_0x3d8db2(0x885)]['_enemyWindow']&&SceneManager[_0x3d8db2(0x885)][_0x3d8db2(0x8b0)]['active']&&SceneManager['_scene'][_0x3d8db2(0x8b0)]['_enemies'][_0x3d8db2(0x87d)](this['enemy']())){if(this[_0x3d8db2(0xa70)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x3d8db2(0xa70)]>0x0&&(_0x3d8db2(0x42c)==='UaKQm'?this['contentsOpacity']-=0x10:this[_0x3d8db2(0x8c2)]()?this[_0x3d8db2(0x4aa)]():(this[_0x3d8db2(0xaad)](),_0x277ef5[_0x3d8db2(0x781)]['Sprite_Actor_updateFrame']['call'](this)));}}},Window_EnemyName[_0x35b5eb(0x73b)][_0x35b5eb(0x5fc)]=function(){const _0x4b739d=_0x35b5eb;if(!this[_0x4b739d(0x81d)]())return;if(SceneManager[_0x4b739d(0x725)]())this['x']=Graphics[_0x4b739d(0x1b4)]-this[_0x4b739d(0x81d)]()[_0x4b739d(0x691)]()[_0x4b739d(0x74d)];else{if(_0x4b739d(0x132)!==_0x4b739d(0x569))this['x']=this[_0x4b739d(0x81d)]()['battler']()['_baseX'];else{let _0x41c883=_0x4b739d(0x8db);if(this[_0x4b739d(0x4fe)](_0x41c883))return this[_0x4b739d(0x48f)][_0x41c883];return this['_cache'][_0x41c883]=this['createBattleUIOffsetY'](this[_0x4b739d(0x157)]()),this[_0x4b739d(0x48f)][_0x41c883];}}this['x']-=Math[_0x4b739d(0x3d5)](this[_0x4b739d(0x91c)]/0x2),this['y']=this[_0x4b739d(0x81d)]()[_0x4b739d(0x691)]()[_0x4b739d(0x740)]-Math[_0x4b739d(0x3d5)](this[_0x4b739d(0x3b4)]()*1.5);const _0x2c3c8c=VisuMZ[_0x4b739d(0x781)]['Settings'][_0x4b739d(0xac3)];this['x']+=_0x2c3c8c[_0x4b739d(0xdc)]||0x0,this['y']+=_0x2c3c8c[_0x4b739d(0x1ac)]||0x0;},Window_EnemyName['prototype']['resetFontSettings']=function(){const _0x440d89=_0x35b5eb;Window_Base['prototype']['resetFontSettings']['call'](this),this['contents'][_0x440d89(0xaf0)]=VisuMZ['BattleCore']['Settings'][_0x440d89(0xac3)][_0x440d89(0x3f3)];},Window_EnemyName[_0x35b5eb(0x73b)]['refresh']=function(){const _0x2bdf75=_0x35b5eb;Window_StatusBase[_0x2bdf75(0x73b)][_0x2bdf75(0x129)][_0x2bdf75(0x541)](this),this[_0x2bdf75(0x116)][_0x2bdf75(0xa37)]();if(!this[_0x2bdf75(0x81d)]())return;this[_0x2bdf75(0x1b5)]();},Window_EnemyName['prototype'][_0x35b5eb(0x1b5)]=function(){const _0x368759=_0x35b5eb;this[_0x368759(0x8c7)]=this[_0x368759(0x81d)]()[_0x368759(0x945)]();const _0x3ecb06=this[_0x368759(0x84f)](this['_text'])['width'],_0x316cf0=Math[_0x368759(0x3d5)]((this[_0x368759(0x2eb)]-_0x3ecb06)/0x2);this[_0x368759(0x487)](this[_0x368759(0x8c7)],_0x316cf0,0x0,_0x3ecb06+0x8);},Window_BattleLog['prototype'][_0x35b5eb(0x869)]=function(){const _0x5a526e=_0x35b5eb;return VisuMZ['BattleCore'][_0x5a526e(0x3cb)][_0x5a526e(0x141)][_0x5a526e(0x2ad)];},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x6ca)]=function(){const _0x51669e=_0x35b5eb;return VisuMZ[_0x51669e(0x781)][_0x51669e(0x3cb)][_0x51669e(0x141)][_0x51669e(0x7b5)];},Window_BattleLog['prototype'][_0x35b5eb(0xaed)]=function(){const _0x31eba8=_0x35b5eb;return VisuMZ['BattleCore'][_0x31eba8(0x3cb)][_0x31eba8(0x141)][_0x31eba8(0x709)];},Window_BattleLog['prototype'][_0x35b5eb(0xb2a)]=function(){return![];},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x3a3)]=function(_0x3ffab8,_0x2e7d9d){const _0x22a24a=_0x35b5eb;this[_0x22a24a(0x89e)](_0x22a24a(0x6a8)),BattleManager['invokeAction'](_0x3ffab8,_0x2e7d9d),this['callNextMethod']();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x6a8)]=function(){this['callNextMethod']();},Window_BattleLog['prototype'][_0x35b5eb(0x7c7)]=function(_0x40927d){const _0x5e8964=_0x35b5eb,_0x3fff80=Array[_0x5e8964(0x73b)][_0x5e8964(0x4b1)][_0x5e8964(0x541)](arguments,0x1),_0x3a4bfd={'name':_0x40927d,'params':_0x3fff80},_0x1d1eac=this[_0x5e8964(0x7a4)][_0x5e8964(0x3dd)](_0x1d5234=>_0x1d5234[_0x5e8964(0x945)])[_0x5e8964(0x57e)]('actionSplicePoint');_0x1d1eac>=0x0?'mhptt'===_0x5e8964(0xafc)?this[_0x5e8964(0xd6)]()===_0x5e8964(0x390)?this[_0x5e8964(0x225)]['x']=0x8:this[_0x5e8964(0x225)]['x']=-this[_0x5e8964(0x225)][_0x5e8964(0x91c)]-0x4:this['_methods'][_0x5e8964(0x181)](_0x1d1eac,0x0,_0x3a4bfd):this[_0x5e8964(0x7a4)][_0x5e8964(0x7c7)](_0x3a4bfd);},Window_BattleLog[_0x35b5eb(0x73b)]['unshift']=function(_0x41adb4){const _0x2feed3=_0x35b5eb,_0x2d318a=Array[_0x2feed3(0x73b)][_0x2feed3(0x4b1)][_0x2feed3(0x541)](arguments,0x1);this[_0x2feed3(0x7a4)]['unshift']({'name':_0x41adb4,'params':_0x2d318a});},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x700)]=function(){const _0x2fbd20=_0x35b5eb;if(!$gameTemp[_0x2fbd20(0x426)]())return;console[_0x2fbd20(0x33b)](this[_0x2fbd20(0x7a4)][_0x2fbd20(0x3dd)](_0x3ffff4=>_0x3ffff4[_0x2fbd20(0x945)])['join']('\x0a'));},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x95f)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x129)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x129)]=function(){const _0x315ae1=_0x35b5eb;this[_0x315ae1(0x7dc)]=!![];},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x17a)]=Window_BattleLog[_0x35b5eb(0x73b)]['update'],Window_BattleLog[_0x35b5eb(0x73b)]['update']=function(){const _0x170ace=_0x35b5eb;VisuMZ['BattleCore'][_0x170ace(0x17a)][_0x170ace(0x541)](this);if(this[_0x170ace(0x7dc)])this[_0x170ace(0x94e)]();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x94e)]=function(){const _0x4eb0e4=_0x35b5eb;this[_0x4eb0e4(0x7dc)]=![],VisuMZ[_0x4eb0e4(0x781)][_0x4eb0e4(0x95f)][_0x4eb0e4(0x541)](this);},Window_BattleLog['prototype']['drawLineText']=function(_0xeae6f8){const _0x5c3188=_0x35b5eb;let _0x2fd573=VisuMZ[_0x5c3188(0x781)][_0x5c3188(0x3cb)]['BattleLog'][_0x5c3188(0x57b)][_0x5c3188(0x210)]()['trim'](),_0xa8f534=this['_lines'][_0xeae6f8];if(_0xa8f534['match'](/<LEFT>/i)){if(_0x5c3188(0x8aa)!=='yieat')_0x2fd573=_0x5c3188(0xb38);else{if(!this[_0x5c3188(0xb0d)]['isSpriteVisible']())return;const _0x197b54=_0x29a7cf[_0x5c3188(0x781)][_0x5c3188(0x3cb)][_0x5c3188(0x165)],_0x75857c=new _0x1ab4ed();_0x75857c[_0x5c3188(0x765)]=_0x197b54['PopupDuration'],this[_0x5c3188(0x9d0)](_0x75857c),_0x75857c[_0x5c3188(0x448)](_0xec8b9f,_0x86b5d9),this[_0x5c3188(0x112)](_0x75857c);}}else{if(_0xa8f534[_0x5c3188(0x111)](/<CENTER>/i))_0x2fd573=_0x5c3188(0x321);else _0xa8f534[_0x5c3188(0x111)](/<RIGHT>/i)&&(_0x5c3188(0x720)!==_0x5c3188(0x720)?(this[_0x5c3188(0x7dc)]=![],this[_0x5c3188(0x129)](),this[_0x5c3188(0x3bf)]()):_0x2fd573='right');}_0xa8f534=_0xa8f534[_0x5c3188(0x125)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0xa8f534=_0xa8f534[_0x5c3188(0x125)](/\\I\[0\]/gi,'');const _0x4c1534=this[_0x5c3188(0x440)](_0xeae6f8);this[_0x5c3188(0x116)][_0x5c3188(0xa93)](_0x4c1534['x'],_0x4c1534['y'],_0x4c1534[_0x5c3188(0x91c)],_0x4c1534['height']);const _0x25ea76=this[_0x5c3188(0x84f)](_0xa8f534)[_0x5c3188(0x91c)];let _0xd7dab=_0x4c1534['x'];if(_0x2fd573===_0x5c3188(0x321))_0xd7dab+=(_0x4c1534[_0x5c3188(0x91c)]-_0x25ea76)/0x2;else _0x2fd573===_0x5c3188(0x946)&&(_0xd7dab+=_0x4c1534['width']-_0x25ea76);this['drawTextEx'](_0xa8f534,_0xd7dab,_0x4c1534['y'],_0x25ea76+0x8);},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x3f0)]=function(_0x226dd6){const _0x190201=_0x35b5eb;this[_0x190201(0x6bd)][_0x190201(0x7c7)](_0x226dd6),this[_0x190201(0x129)](),this[_0x190201(0xa1a)]();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x5bb)]=function(){const _0xeaa5ef=_0x35b5eb;let _0x33b8fe=![];switch(this[_0xeaa5ef(0x996)]){case _0xeaa5ef(0xa99):_0x33b8fe=this[_0xeaa5ef(0x254)][_0xeaa5ef(0x9af)]();break;case _0xeaa5ef(0x880):_0x33b8fe=this['_spriteset'][_0xeaa5ef(0x328)]();break;case _0xeaa5ef(0x668):_0x33b8fe=this[_0xeaa5ef(0x254)]['isAnimationPlaying']();break;case _0xeaa5ef(0x60c):_0x33b8fe=this[_0xeaa5ef(0x254)][_0xeaa5ef(0x97c)]();break;case _0xeaa5ef(0x1c5):_0x33b8fe=this[_0xeaa5ef(0x254)][_0xeaa5ef(0x9c1)]();break;case _0xeaa5ef(0x1be):_0x33b8fe=this[_0xeaa5ef(0x254)]['isAnyoneChangingOpacity']();break;}return!_0x33b8fe&&(this[_0xeaa5ef(0x996)]=''),_0x33b8fe;},Window_BattleLog[_0x35b5eb(0x73b)]['waitForAnimation']=function(){const _0xd59edd=_0x35b5eb;this[_0xd59edd(0x7fe)](_0xd59edd(0x668));},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x7f3)]=function(){const _0xe28f57=_0x35b5eb;this[_0xe28f57(0x7fe)](_0xe28f57(0x60c));},Window_BattleLog['prototype'][_0x35b5eb(0x530)]=function(){const _0x4d894a=_0x35b5eb;this[_0x4d894a(0x7fe)](_0x4d894a(0x1c5));},Window_BattleLog[_0x35b5eb(0x73b)]['waitForOpacity']=function(){const _0x470638=_0x35b5eb;this[_0x470638(0x7fe)](_0x470638(0x1be));},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x3f7)]=function(){const _0x30246=_0x35b5eb,_0x1d6d03=VisuMZ['BattleCore'][_0x30246(0x3cb)]['BattleLog'];if(!_0x1d6d03[_0x30246(0xac5)])return;this[_0x30246(0x7c7)](_0x30246(0x3f0),_0x1d6d03['StartTurnMsg'][_0x30246(0x4ed)]($gameTroop['turnCount']())),this[_0x30246(0x7c7)](_0x30246(0x4f7),_0x1d6d03[_0x30246(0x20f)]),this[_0x30246(0x7c7)](_0x30246(0xa37));},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x718)]=function(_0x5cf36b,_0x4bfdd2,_0x527ec8){const _0x1fb63c=_0x35b5eb;if(this['isCustomActionSequence'](_0x4bfdd2)){if(_0x1fb63c(0xa9d)!==_0x1fb63c(0x61e))BattleManager['prepareCustomActionSequence']();else return this['_battler']&&this[_0x1fb63c(0xb0d)][_0x1fb63c(0x8c2)]();}else this[_0x1fb63c(0x3aa)](_0x5cf36b,_0x4bfdd2,_0x527ec8);},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xa12)]=function(_0x55ebea){const _0x119f5e=_0x35b5eb;if(!SceneManager[_0x119f5e(0x3a2)]())return![];if(!_0x55ebea)return![];if(!_0x55ebea[_0x119f5e(0x5d3)]())return![];if(_0x55ebea[_0x119f5e(0x5d3)]()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x119f5e(0x5ba)](_0x55ebea[_0x119f5e(0x5d3)]()))return!![];return![];},Window_BattleLog[_0x35b5eb(0x73b)]['usePremadeActionSequence']=function(_0xa4df3,_0x4d6ad0,_0xa49e0b){const _0x1c4891=_0x35b5eb,_0x2891d2=_0x4d6ad0[_0x1c4891(0x5d3)]();this['setupActionSet'](_0xa4df3,_0x4d6ad0,_0xa49e0b),this[_0x1c4891(0x898)](_0xa4df3,_0x4d6ad0,_0xa49e0b),this[_0x1c4891(0x843)](_0xa4df3,_0x4d6ad0,_0xa49e0b);},Window_BattleLog['prototype'][_0x35b5eb(0x631)]=function(_0x3c1308,_0x17d672){const _0x50fb2b=_0x35b5eb,_0x2a3796=VisuMZ[_0x50fb2b(0x781)][_0x50fb2b(0x3cb)][_0x50fb2b(0x141)];if(_0x2a3796[_0x50fb2b(0xec)]){if(_0x50fb2b(0x2d0)!=='YXBQW')return this[_0x50fb2b(0x8a8)]||0x0;else this[_0x50fb2b(0x7c7)](_0x50fb2b(0x3f0),_0x50fb2b(0x40b)[_0x50fb2b(0x4ed)](DataManager[_0x50fb2b(0xa43)](_0x17d672)));}if(DataManager[_0x50fb2b(0xa50)](_0x17d672)){if(_0x2a3796['ActionSkillMsg1'])this[_0x50fb2b(0x619)](_0x17d672[_0x50fb2b(0x988)],_0x3c1308,_0x17d672);if(_0x2a3796[_0x50fb2b(0x34a)])this[_0x50fb2b(0x619)](_0x17d672['message2'],_0x3c1308,_0x17d672);}else{if(_0x2a3796[_0x50fb2b(0x323)])this['displayItemMessage'](TextManager[_0x50fb2b(0xa0b)],_0x3c1308,_0x17d672);}},Window_BattleLog[_0x35b5eb(0x73b)]['setupActionSet']=function(_0x28797d,_0x13e67a,_0x33a925){const _0x279e9a=_0x35b5eb,_0x55c749=_0x13e67a[_0x279e9a(0x5d3)]();this[_0x279e9a(0x631)](_0x28797d,_0x55c749),this['push']('applyImmortal',_0x28797d,_0x33a925,!![]),this[_0x279e9a(0x7c7)](_0x279e9a(0x387),_0x28797d,_0x13e67a),this[_0x279e9a(0x7c7)](_0x279e9a(0x79a)),this['push'](_0x279e9a(0x309),_0x28797d,_0x13e67a),this[_0x279e9a(0x7c7)]('waitForAnimation');},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x898)]=function(_0x477eea,_0x5d9bf9,_0x55a1dd){const _0x2c369e=_0x35b5eb;if(this[_0x2c369e(0x242)](_0x5d9bf9))this[_0x2c369e(0x536)](_0x477eea,_0x5d9bf9,_0x55a1dd);else{if(this[_0x2c369e(0x180)](_0x5d9bf9)){if(_0x2c369e(0x1e4)!==_0x2c369e(0x1e4)){if(!_0x38fffd[_0x2c369e(0x3a2)]())return;if(!this['_damagePopupArray'])this[_0x2c369e(0x6b4)]();this[_0x2c369e(0x5ee)]();const _0xe80394=this[_0x2c369e(0x691)]();if(_0xe80394)_0xe80394['setupDamagePopup']();}else this['autoMeleeMultiTargetActionSet'](_0x477eea,_0x5d9bf9,_0x55a1dd);}else _0x5d9bf9['isForRandom']()?this[_0x2c369e(0x902)](_0x477eea,_0x5d9bf9,_0x55a1dd):this['wholeActionSet'](_0x477eea,_0x5d9bf9,_0x55a1dd);}},Window_BattleLog['prototype']['isMeleeSingleTargetAction']=function(_0x49be58){const _0x21612a=_0x35b5eb;if(!_0x49be58[_0x21612a(0x32c)]())return![];if(!_0x49be58[_0x21612a(0xbb)]())return![];if(!_0x49be58[_0x21612a(0x582)]())return![];return VisuMZ[_0x21612a(0x781)][_0x21612a(0x3cb)]['ActionSequence'][_0x21612a(0x762)];},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x536)]=function(_0x75717,_0x2e497c,_0x259204){const _0x1bdf7a=_0x35b5eb,_0x407cb0=_0x75717[_0x1bdf7a(0x870)]()[_0x1bdf7a(0x1f4)]<0x2,_0x49b99a=0x14,_0x42694c=0x30;if(_0x407cb0){if(_0x1bdf7a(0x385)===_0x1bdf7a(0x385))this[_0x1bdf7a(0x7c7)](_0x1bdf7a(0x91a),[_0x75717],_0x42694c,_0x49b99a),this[_0x1bdf7a(0x7c7)]('performMoveToTargets',_0x75717,_0x259204,'front\x20base',_0x49b99a,!![],_0x1bdf7a(0x62b),!![]),this['push']('requestMotion',[_0x75717],_0x1bdf7a(0x7b9)),this['push'](_0x1bdf7a(0x79a));else{let _0x269864=_0x5ed4f4(_0x6095f3['$1']);while(_0x269864--){_0x48ed5b[_0x1bdf7a(0x7c7)](this['opponentsUnit']()[_0x1bdf7a(0x595)]());}return this[_0x1bdf7a(0x3e6)](_0x56d77b);}}let _0x15dadf=_0x2e497c[_0x1bdf7a(0x545)]()?this[_0x1bdf7a(0x4ef)](_0x75717):0x1;for(let _0x34e6c5=0x0;_0x34e6c5<_0x15dadf;_0x34e6c5++){if(_0x2e497c[_0x1bdf7a(0x545)]()&&_0x75717[_0x1bdf7a(0xa6f)]()){if(_0x1bdf7a(0x7b7)!==_0x1bdf7a(0x7b7)){this[_0x1bdf7a(0x91c)]=_0x2d01b2['width'],this[_0x1bdf7a(0x491)]=_0x44fdcd[_0x1bdf7a(0x491)];const _0x560311=_0x12528f['max'](0x1,this[_0x1bdf7a(0x91c)]/this['bitmap'][_0x1bdf7a(0x91c)]),_0xdc333b=_0x464eec[_0x1bdf7a(0x2a3)](0x1,this[_0x1bdf7a(0x491)]/this['bitmap'][_0x1bdf7a(0x491)]),_0x5c2c03=_0x30c7b4['max'](_0x560311,_0xdc333b);this[_0x1bdf7a(0xac1)]['x']=_0x5c2c03,this[_0x1bdf7a(0xac1)]['y']=_0x5c2c03,this['x']=(_0x30f8c8[_0x1bdf7a(0x91c)]-this[_0x1bdf7a(0x91c)])/0x2,this['y']=_0xbb852c['height']-this[_0x1bdf7a(0x491)];}else this[_0x1bdf7a(0x7c7)](_0x1bdf7a(0x7f6),_0x75717,_0x34e6c5);}if(_0x2e497c[_0x1bdf7a(0x5d3)]()[_0x1bdf7a(0xaae)]<0x0){if('XGGAr'!==_0x1bdf7a(0x72b))return _0x161223[_0x1bdf7a(0x7ba)]()[this[_0x1bdf7a(0xa4c)]];else this[_0x1bdf7a(0x902)](_0x75717,_0x2e497c,_0x259204);}else{if(_0x1bdf7a(0x784)!==_0x1bdf7a(0x784)){const _0x59471e=this[_0x1bdf7a(0x7e9)];this[_0x1bdf7a(0xbe)]['move'](_0x59471e,_0x59471e),this[_0x1bdf7a(0xbe)]['x']=_0x59471e-this[_0x1bdf7a(0x826)]['x'],this[_0x1bdf7a(0xbe)]['y']=_0x59471e-this['origin']['y'],this['innerWidth']>0x0&&this[_0x1bdf7a(0x17e)]>0x0?this[_0x1bdf7a(0xbe)][_0x1bdf7a(0x17f)]=this['isOpen']():this['_cursorArea']['visible']=![];}else this[_0x1bdf7a(0x5d5)](_0x75717,_0x2e497c,_0x259204);}}_0x2e497c[_0x1bdf7a(0x545)]()&&_0x75717[_0x1bdf7a(0xa6f)]()&&this[_0x1bdf7a(0x7c7)]('clearActiveWeaponSet',_0x75717);this['push'](_0x1bdf7a(0x6d8),_0x75717,_0x259204,![]);if(_0x407cb0){const _0x4924f8=_0x75717[_0x1bdf7a(0x691)]();this[_0x1bdf7a(0x7c7)](_0x1bdf7a(0x91a),[_0x75717],_0x42694c,_0x49b99a),this['push']('performMoveToPoint',_0x75717,_0x4924f8[_0x1bdf7a(0x82d)],_0x4924f8[_0x1bdf7a(0x56d)],_0x49b99a,![],_0x1bdf7a(0x62b)),this['push'](_0x1bdf7a(0x67a),[_0x75717],_0x1bdf7a(0x303)),this[_0x1bdf7a(0x7c7)](_0x1bdf7a(0x79a)),this[_0x1bdf7a(0x7c7)]('requestMotion',[_0x75717],_0x1bdf7a(0x7b9));}},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x180)]=function(_0x31a422){const _0x5eccc8=_0x35b5eb;if(!_0x31a422['isPhysical']())return![];if(!_0x31a422[_0x5eccc8(0x1fb)]())return![];if(!_0x31a422[_0x5eccc8(0x582)]())return![];return VisuMZ[_0x5eccc8(0x781)][_0x5eccc8(0x3cb)][_0x5eccc8(0x421)][_0x5eccc8(0x42d)];},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x503)]=function(_0x167c10,_0x13b94a,_0x339ecb){const _0xff9534=_0x35b5eb,_0xf2baab=_0x167c10[_0xff9534(0x870)]()['type']<0x2,_0x164b90=0x14,_0x3f973b=0x30;_0xf2baab&&(this[_0xff9534(0x7c7)]('performJump',[_0x167c10],_0x3f973b,_0x164b90),this[_0xff9534(0x7c7)](_0xff9534(0xe8),_0x167c10,_0x339ecb,'front\x20center',_0x164b90,!![],_0xff9534(0x62b),!![]),this[_0xff9534(0x7c7)]('requestMotion',[_0x167c10],_0xff9534(0x7b9)),this[_0xff9534(0x7c7)](_0xff9534(0x79a)));let _0x1f4561=_0x13b94a[_0xff9534(0x545)]()?this[_0xff9534(0x4ef)](_0x167c10):0x1;for(let _0x2b34a2=0x0;_0x2b34a2<_0x1f4561;_0x2b34a2++){if(_0xff9534(0x98f)!==_0xff9534(0x3e5)){if(_0x13b94a['isAttack']()&&_0x167c10[_0xff9534(0xa6f)]()){if('Ltinv'===_0xff9534(0xa67)){this[_0xff9534(0x67a)](_0xff9534(0x9e4));return;}else this[_0xff9534(0x7c7)](_0xff9534(0x7f6),_0x167c10,_0x2b34a2);}this['wholeActionSet'](_0x167c10,_0x13b94a,_0x339ecb);}else this[_0xff9534(0x487)](_0x4a96bf,_0x27663b['x'],_0x26404e['y'],_0x34deb3);}_0x13b94a[_0xff9534(0x545)]()&&_0x167c10['isActor']()&&this['push'](_0xff9534(0x5fb),_0x167c10);this[_0xff9534(0x7c7)](_0xff9534(0x6d8),_0x167c10,_0x339ecb,![]);if(_0xf2baab){const _0x2e5a0c=_0x167c10[_0xff9534(0x691)]();this['push'](_0xff9534(0x91a),[_0x167c10],_0x3f973b,_0x164b90),this[_0xff9534(0x7c7)]('performMoveToPoint',_0x167c10,_0x2e5a0c['_homeX'],_0x2e5a0c[_0xff9534(0x56d)],_0x164b90,![],_0xff9534(0x62b)),this[_0xff9534(0x7c7)]('requestMotion',[_0x167c10],_0xff9534(0x303)),this[_0xff9534(0x7c7)](_0xff9534(0x79a)),this[_0xff9534(0x7c7)](_0xff9534(0x67a),[_0x167c10],_0xff9534(0x7b9));}},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x902)]=function(_0x2cf8c2,_0x560e76,_0x3795c4){const _0x1fef61=_0x35b5eb,_0x206c26=_0x560e76[_0x1fef61(0x5d3)]();for(const _0xd59bab of _0x3795c4){if(_0x1fef61(0x1d7)==='vqyeH')_0xd21849[_0x1fef61(0xac1)]['x']=this[_0x1fef61(0x2a2)](),_0x585eb3[_0x1fef61(0xac1)]['y']=this['mainSpriteScaleY']();else{if(!_0xd59bab)continue;this[_0x1fef61(0x7c7)](_0x1fef61(0xb3c),_0x2cf8c2,_0x560e76),this[_0x1fef61(0x7c7)]('waitCount',Sprite_Battler['_motionSpeed']),this['push'](_0x1fef61(0x5aa),_0x2cf8c2,[_0xd59bab],_0x206c26[_0x1fef61(0xaae)]),this[_0x1fef61(0x7c7)](_0x1fef61(0x4f7),0x18),this[_0x1fef61(0x7c7)](_0x1fef61(0x3a3),_0x2cf8c2,_0xd59bab);}}},Window_BattleLog['prototype'][_0x35b5eb(0x5d5)]=function(_0x625424,_0x3afce8,_0x3dcda7){const _0x2dbd7b=_0x35b5eb,_0x592065=_0x3afce8['item']();this[_0x2dbd7b(0x7c7)](_0x2dbd7b(0xb3c),_0x625424,_0x3afce8),this[_0x2dbd7b(0x7c7)](_0x2dbd7b(0x4f7),Sprite_Battler['_motionSpeed']),this['push']('showAnimation',_0x625424,_0x3dcda7[_0x2dbd7b(0x4b8)](),_0x592065[_0x2dbd7b(0xaae)]),this[_0x2dbd7b(0x7c7)](_0x2dbd7b(0x340));for(const _0x1dc25b of _0x3dcda7){if(!_0x1dc25b)continue;this[_0x2dbd7b(0x7c7)](_0x2dbd7b(0x3a3),_0x625424,_0x1dc25b);}},Window_BattleLog[_0x35b5eb(0x73b)]['finishActionSet']=function(_0x30b63a,_0x567cb5,_0x6c131e){const _0x12b67a=_0x35b5eb,_0x552e2b=_0x567cb5[_0x12b67a(0x5d3)]();this[_0x12b67a(0x7c7)](_0x12b67a(0x6d8),_0x30b63a,_0x6c131e,![]),this[_0x12b67a(0x7c7)](_0x12b67a(0x8fd)),this[_0x12b67a(0x7c7)](_0x12b67a(0x672)),this[_0x12b67a(0x7c7)](_0x12b67a(0xa37)),this['push'](_0x12b67a(0x3bd),_0x30b63a),this[_0x12b67a(0x7c7)](_0x12b67a(0x79a));},Window_BattleLog[_0x35b5eb(0x73b)]['endAction']=function(_0x3eacc7){},VisuMZ['BattleCore'][_0x35b5eb(0x939)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xa54)],Window_BattleLog['prototype'][_0x35b5eb(0xa54)]=function(_0x5eb594){const _0x2177b6=_0x35b5eb;if(!VisuMZ['BattleCore'][_0x2177b6(0x3cb)][_0x2177b6(0x141)][_0x2177b6(0xa85)])return;VisuMZ[_0x2177b6(0x781)]['Window_BattleLog_displayCurrentState'][_0x2177b6(0x541)](this,_0x5eb594);},Window_BattleLog['prototype'][_0x35b5eb(0xa15)]=function(_0x5ea7b9){const _0x5670f0=_0x35b5eb;this[_0x5670f0(0x7c7)]('performCounter',_0x5ea7b9);if(VisuMZ['BattleCore'][_0x5670f0(0x3cb)]['ActionSequence'][_0x5670f0(0x4f1)]){if(_0x5670f0(0x4d1)==='DVAFA'){_0x37b10f['BattleCore']['Window_BattleLog_update'][_0x5670f0(0x541)](this);if(this[_0x5670f0(0x7dc)])this[_0x5670f0(0x94e)]();}else this[_0x5670f0(0x7c7)](_0x5670f0(0x5aa),_0x5ea7b9,[BattleManager[_0x5670f0(0x785)]],-0x1);}if(!VisuMZ[_0x5670f0(0x781)][_0x5670f0(0x3cb)]['BattleLog']['ShowCounter'])return;this[_0x5670f0(0x7c7)](_0x5670f0(0x3f0),TextManager[_0x5670f0(0x520)][_0x5670f0(0x4ed)](_0x5ea7b9[_0x5670f0(0x945)]()));},Window_BattleLog['prototype']['displayReflection']=function(_0x9d04dc){const _0x2320b4=_0x35b5eb;this[_0x2320b4(0x7c7)](_0x2320b4(0x1ab),_0x9d04dc);if(!VisuMZ['BattleCore']['Settings']['BattleLog']['ShowReflect'])return;this[_0x2320b4(0x7c7)](_0x2320b4(0x3f0),TextManager[_0x2320b4(0x4ee)]['format'](_0x9d04dc[_0x2320b4(0x945)]()));},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x3e0)]=function(_0x2a262c,_0x78deb0){const _0xbd0929=_0x35b5eb;if(VisuMZ[_0xbd0929(0x781)]['Settings'][_0xbd0929(0x421)][_0xbd0929(0x4c8)]){const _0x398152=_0x78deb0['item']();this['push'](_0xbd0929(0x5aa),_0x2a262c,[_0x2a262c],_0x398152[_0xbd0929(0xaae)]);}},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x457)]=function(_0xfc82ce,_0x340ae7){const _0x500844=_0x35b5eb;this[_0x500844(0x7c7)](_0x500844(0x969),_0xfc82ce,_0x340ae7);if(!VisuMZ['BattleCore']['Settings'][_0x500844(0x141)][_0x500844(0x944)])return;const _0x217cb5=_0xfc82ce[_0x500844(0x945)](),_0x1cb453=TextManager[_0x500844(0x1c3)][_0x500844(0x4ed)](_0x217cb5,_0x340ae7[_0x500844(0x945)]());this[_0x500844(0x7c7)](_0x500844(0x3f0),_0x1cb453);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x8d2)]=Window_BattleLog['prototype'][_0x35b5eb(0xfa)],Window_BattleLog['prototype'][_0x35b5eb(0xfa)]=function(_0x29f7d0,_0x55b34f){const _0x4034cc=_0x35b5eb;VisuMZ[_0x4034cc(0x781)]['Window_BattleLog_displayActionResults'][_0x4034cc(0x541)](this,_0x29f7d0,_0x55b34f),this['push'](_0x4034cc(0xa37));},VisuMZ['BattleCore'][_0x35b5eb(0x9b5)]=Window_BattleLog['prototype'][_0x35b5eb(0x591)],Window_BattleLog['prototype'][_0x35b5eb(0x591)]=function(_0x167178){const _0x4e4cbb=_0x35b5eb;if(!VisuMZ['BattleCore']['Settings'][_0x4e4cbb(0x141)][_0x4e4cbb(0x424)])return;VisuMZ[_0x4e4cbb(0x781)][_0x4e4cbb(0x9b5)]['call'](this,_0x167178);},VisuMZ['BattleCore']['Window_BattleLog_displayCritical']=Window_BattleLog['prototype'][_0x35b5eb(0x8d3)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x8d3)]=function(_0x552458){const _0x352760=_0x35b5eb;if(!VisuMZ['BattleCore'][_0x352760(0x3cb)]['BattleLog'][_0x352760(0x621)])return;VisuMZ[_0x352760(0x781)][_0x352760(0x50c)][_0x352760(0x541)](this,_0x552458);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x1d8)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x26d)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x26d)]=function(_0xc8bff2){const _0x3a8441=_0x35b5eb;!VisuMZ[_0x3a8441(0x781)][_0x3a8441(0x3cb)][_0x3a8441(0x141)][_0x3a8441(0x456)]?'DsxuV'===_0x3a8441(0x7ee)?this[_0x3a8441(0x7c7)](_0x3a8441(0x46a),_0xc8bff2):_0x5e28bc=_0x1355fc:VisuMZ[_0x3a8441(0x781)][_0x3a8441(0x1d8)]['call'](this,_0xc8bff2);},VisuMZ[_0x35b5eb(0x781)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xa47)],Window_BattleLog['prototype'][_0x35b5eb(0xa47)]=function(_0x1d344){const _0x2187dd=_0x35b5eb;if(!VisuMZ['BattleCore'][_0x2187dd(0x3cb)][_0x2187dd(0x141)][_0x2187dd(0x456)]){if(_0x1d344[_0x2187dd(0x59e)]()['physical']){if(_0x2187dd(0x5c3)===_0x2187dd(0x5c3))this['push'](_0x2187dd(0x734),_0x1d344);else return _0x26e62c['aliveMembers']()['filter'](_0x457598=>_0x457598!==_0x134245);}else this[_0x2187dd(0x7c7)](_0x2187dd(0x960),_0x1d344);}else VisuMZ[_0x2187dd(0x781)][_0x2187dd(0xb2f)]['call'](this,_0x1d344);},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x60f)]=function(_0x3051b6){const _0x4eb36f=_0x35b5eb;if(_0x3051b6[_0x4eb36f(0x59e)]()[_0x4eb36f(0xae5)]){_0x3051b6[_0x4eb36f(0x59e)]()[_0x4eb36f(0x490)]>0x0&&!_0x3051b6[_0x4eb36f(0x59e)]()[_0x4eb36f(0x58a)]&&this[_0x4eb36f(0x7c7)](_0x4eb36f(0x1c0),_0x3051b6);if(_0x3051b6[_0x4eb36f(0x59e)]()[_0x4eb36f(0x490)]<0x0){if(_0x4eb36f(0x90e)==='UESCi')this[_0x4eb36f(0x7c7)](_0x4eb36f(0x736),_0x3051b6);else{const _0x4f354e=_0x39673d(_0x511519['$1'])[_0x4eb36f(0x54d)](),_0x3df92a=_0x19425d(_0x5aef51['$2']);_0x44d880[_0x4f354e]=_0x3df92a,_0x3d28b3+=_0x3df92a;}}VisuMZ[_0x4eb36f(0x781)]['Settings']['BattleLog']['ShowHpDmg']&&this[_0x4eb36f(0x7c7)](_0x4eb36f(0x3f0),this[_0x4eb36f(0x151)](_0x3051b6));}},VisuMZ['BattleCore'][_0x35b5eb(0x920)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x84a)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x84a)]=function(_0x453dbc){const _0x11435d=_0x35b5eb;if(!VisuMZ[_0x11435d(0x781)][_0x11435d(0x3cb)]['BattleLog'][_0x11435d(0x77c)])return;VisuMZ[_0x11435d(0x781)]['Window_BattleLog_displayMpDamage'][_0x11435d(0x541)](this,_0x453dbc);},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x5b7)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xb14)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xb14)]=function(_0x5afffb){const _0x1f8245=_0x35b5eb;if(!VisuMZ[_0x1f8245(0x781)]['Settings'][_0x1f8245(0x141)]['ShowTpDmg'])return;VisuMZ[_0x1f8245(0x781)]['Window_BattleLog_displayTpDamage']['call'](this,_0x5afffb);},Window_BattleLog[_0x35b5eb(0x73b)]['displayAffectedStatus']=function(_0x16ede2){const _0x138962=_0x35b5eb;_0x16ede2['result']()[_0x138962(0xa57)]()&&(this[_0x138962(0x7c7)]('pushBaseLine'),this['displayChangedStates'](_0x16ede2),this[_0x138962(0xeb)](_0x16ede2),this[_0x138962(0x7c7)](_0x138962(0x8fd)));},Window_BattleLog[_0x35b5eb(0x73b)]['displayAddedStates']=function(_0x5810fa){const _0x4fb6ce=_0x35b5eb,_0x25808e=_0x5810fa[_0x4fb6ce(0x59e)](),_0x221606=_0x25808e[_0x4fb6ce(0x70f)]();for(const _0x43cfcb of _0x221606){if('nBGlo'==='nBGlo'){const _0x21d08c=_0x5810fa[_0x4fb6ce(0xa6f)]()?_0x43cfcb['message1']:_0x43cfcb[_0x4fb6ce(0x766)];_0x21d08c&&VisuMZ['BattleCore'][_0x4fb6ce(0x3cb)][_0x4fb6ce(0x141)]['ShowAddedState']&&(_0x4fb6ce(0x86c)===_0x4fb6ce(0x325)?this[_0x4fb6ce(0x5d1)](_0x4fb6ce(0x66d)):(this[_0x4fb6ce(0x7c7)](_0x4fb6ce(0x578)),this[_0x4fb6ce(0x7c7)](_0x4fb6ce(0x273)),this['push'](_0x4fb6ce(0x59f)),this[_0x4fb6ce(0x7c7)]('addText',_0x21d08c[_0x4fb6ce(0x4ed)](_0x5810fa[_0x4fb6ce(0x945)]())),this[_0x4fb6ce(0x7c7)](_0x4fb6ce(0x17d)))),_0x43cfcb['id']===_0x5810fa[_0x4fb6ce(0x7dd)]()&&('IUDrk'==='fiegy'?(_0x1f6f03=_0x42beb3(_0xc45975['$1']),_0x1e8bef--):this[_0x4fb6ce(0x7c7)](_0x4fb6ce(0x620),_0x5810fa));}else this[_0x4fb6ce(0x3e1)](!![]);}},Window_BattleLog[_0x35b5eb(0x73b)]['fnordAddedStates']=function(){},Window_BattleLog['prototype']['displayRemovedStates']=function(_0x12aac7){const _0x5bec71=_0x35b5eb;if(!VisuMZ[_0x5bec71(0x781)]['Settings']['BattleLog']['ShowRemovedState'])return;const _0x41e19a=_0x12aac7[_0x5bec71(0x59e)](),_0x1e1e13=_0x41e19a[_0x5bec71(0x220)]();for(const _0x3429ef of _0x1e1e13){if(_0x3429ef[_0x5bec71(0x914)]){if(_0x5bec71(0x5db)===_0x5bec71(0x83e)){const _0x10fb39=_0x5164b3['BattleCore'][_0x5bec71(0x3cb)][_0x5bec71(0x165)],_0x407c3d=new _0x27bfcf();_0x407c3d[_0x5bec71(0x765)]=_0x10fb39[_0x5bec71(0x383)],this['sortDamageSprites'](_0x407c3d),_0x407c3d[_0x5bec71(0x65b)](this[_0x5bec71(0xb0d)]),_0x407c3d[_0x5bec71(0xb2e)](this['_battler']),this[_0x5bec71(0x112)](_0x407c3d);}else this[_0x5bec71(0x7c7)](_0x5bec71(0x623)),this['push'](_0x5bec71(0x273)),this['push']('pushBaseLine'),this[_0x5bec71(0x7c7)]('addText',_0x3429ef[_0x5bec71(0x914)][_0x5bec71(0x4ed)](_0x12aac7['name']())),this['push']('wait');}}},Window_BattleLog[_0x35b5eb(0x73b)]['fnordRemovedStates']=function(){},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xeb)]=function(_0x29b8b7){const _0x32772f=_0x35b5eb,_0x1e9ce9=VisuMZ[_0x32772f(0x781)][_0x32772f(0x3cb)][_0x32772f(0x141)],_0x4978c1=_0x29b8b7[_0x32772f(0x59e)]();if(_0x1e9ce9[_0x32772f(0x3f2)])this['displayBuffs'](_0x29b8b7,_0x4978c1[_0x32772f(0x717)],TextManager['buffAdd']);if(_0x1e9ce9['ShowAddedDebuff'])this[_0x32772f(0x8b2)](_0x29b8b7,_0x4978c1[_0x32772f(0x5f4)],TextManager[_0x32772f(0x676)]);if(_0x1e9ce9[_0x32772f(0x551)])this[_0x32772f(0x8b2)](_0x29b8b7,_0x4978c1[_0x32772f(0x3ee)],TextManager[_0x32772f(0x6f6)]);},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x8b2)]=function(_0x4af290,_0x61bdf4,_0x23013a){const _0x2bb7fa=_0x35b5eb;for(const _0x1ac294 of _0x61bdf4){if(_0x2bb7fa(0x695)!==_0x2bb7fa(0x40c)){const _0x238250=_0x23013a[_0x2bb7fa(0x4ed)](_0x4af290[_0x2bb7fa(0x945)](),TextManager[_0x2bb7fa(0x420)](_0x1ac294));this[_0x2bb7fa(0x7c7)]('popBaseLine'),this[_0x2bb7fa(0x7c7)]('pushBaseLine'),this[_0x2bb7fa(0x7c7)](_0x2bb7fa(0x3f0),_0x238250),this[_0x2bb7fa(0x7c7)](_0x2bb7fa(0x17d));}else{if(_0x25908c['battleCameraData']()[_0x2bb7fa(0x267)]>0x0)return!![];this[_0x2bb7fa(0x996)]='';}}},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x108)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xa37)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xa37)]=function(){const _0x519474=_0x35b5eb;VisuMZ[_0x519474(0x781)][_0x519474(0x108)][_0x519474(0x541)](this),this['callNextMethod']();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x699)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x59f)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x59f)]=function(){const _0x368f32=_0x35b5eb;VisuMZ[_0x368f32(0x781)][_0x368f32(0x699)][_0x368f32(0x541)](this),this['callNextMethod']();},VisuMZ[_0x35b5eb(0x781)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x273)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x273)]=function(){const _0x2b89e4=_0x35b5eb;VisuMZ[_0x2b89e4(0x781)][_0x2b89e4(0x5bf)][_0x2b89e4(0x541)](this),this['processRefresh'](),this[_0x2b89e4(0xa1a)]();},VisuMZ['BattleCore'][_0x35b5eb(0x511)]=Window_BattleLog['prototype']['popupDamage'],Window_BattleLog[_0x35b5eb(0x73b)]['popupDamage']=function(_0x590e2b){const _0x1956b8=_0x35b5eb;VisuMZ[_0x1956b8(0x781)]['Window_BattleLog_popupDamage'][_0x1956b8(0x541)](this,_0x590e2b),this['callNextMethod']();},Window_BattleLog[_0x35b5eb(0x73b)]['waitForNewLine']=function(){const _0x27df7d=_0x35b5eb;let _0x2676bb=0x0;this[_0x27df7d(0x1f9)][_0x27df7d(0x1a0)]>0x0&&(_0x27df7d(0xb10)!==_0x27df7d(0x397)?_0x2676bb=this['_baseLineStack'][this[_0x27df7d(0x1f9)][_0x27df7d(0x1a0)]-0x1]:_0x3b51db[_0x27df7d(0x781)]['createJS'](_0x3afab4,_0x5187b6)),this['_lines'][_0x27df7d(0x1a0)]>_0x2676bb?_0x27df7d(0x2f3)===_0x27df7d(0x2f3)?this[_0x27df7d(0x17d)]():(_0x388d92['BattleCore'][_0x27df7d(0x554)]['call'](this,_0x242e7e),_0x2936e1[_0x27df7d(0x8d1)]()):_0x27df7d(0xd8)!=='QhTBj'?(_0x4c25a2[_0x27df7d(0x73b)][_0x27df7d(0x960)][_0x27df7d(0x541)](this),this['requestMotion'](_0x27df7d(0x303))):this[_0x27df7d(0xa1a)]();},VisuMZ['BattleCore']['Window_BattleLog_performActionStart']=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x387)],Window_BattleLog['prototype']['performActionStart']=function(_0x5506d3,_0x55b70f){const _0x281dad=_0x35b5eb;VisuMZ[_0x281dad(0x781)][_0x281dad(0x109)]['call'](this,_0x5506d3,_0x55b70f),this[_0x281dad(0xa1a)]();},VisuMZ['BattleCore'][_0x35b5eb(0x1e8)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xb3c)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xb3c)]=function(_0x26d96e,_0x4d35ae){const _0x457c6e=_0x35b5eb;VisuMZ[_0x457c6e(0x781)][_0x457c6e(0x1e8)][_0x457c6e(0x541)](this,_0x26d96e,_0x4d35ae),this[_0x457c6e(0xa1a)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x573)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x3bd)],Window_BattleLog['prototype']['performActionEnd']=function(_0x309596){const _0x3baf00=_0x35b5eb;VisuMZ['BattleCore']['Window_BattleLog_performActionEnd'][_0x3baf00(0x541)](this,_0x309596);for(const _0x415cbc of BattleManager[_0x3baf00(0x36a)]()){if('uaGqD'!==_0x3baf00(0x98a))this['commandEscape']();else{if(!_0x415cbc)continue;if(_0x415cbc[_0x3baf00(0x1b2)]())continue;_0x415cbc[_0x3baf00(0x62c)]();}}this[_0x3baf00(0xa1a)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x2b5)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x1c0)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x1c0)]=function(_0x244535){const _0x22edbd=_0x35b5eb;VisuMZ['BattleCore'][_0x22edbd(0x2b5)]['call'](this,_0x244535),this[_0x22edbd(0xa1a)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x93e)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x46a)],Window_BattleLog[_0x35b5eb(0x73b)]['performMiss']=function(_0x4e70e3){const _0xe6e1bc=_0x35b5eb;VisuMZ[_0xe6e1bc(0x781)][_0xe6e1bc(0x93e)]['call'](this,_0x4e70e3),this[_0xe6e1bc(0xa1a)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x915)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x736)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x736)]=function(_0x2f78e1){const _0x269828=_0x35b5eb;VisuMZ[_0x269828(0x781)][_0x269828(0x915)]['call'](this,_0x2f78e1),this['callNextMethod']();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x581)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x734)],Window_BattleLog['prototype'][_0x35b5eb(0x734)]=function(_0x4a2e5a){const _0xc08c7b=_0x35b5eb;VisuMZ[_0xc08c7b(0x781)][_0xc08c7b(0x581)][_0xc08c7b(0x541)](this,_0x4a2e5a),this['callNextMethod']();},VisuMZ['BattleCore'][_0x35b5eb(0x661)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x960)],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x960)]=function(_0x56332f){const _0x3514fc=_0x35b5eb;VisuMZ[_0x3514fc(0x781)][_0x3514fc(0x661)][_0x3514fc(0x541)](this,_0x56332f),this[_0x3514fc(0xa1a)]();},VisuMZ['BattleCore'][_0x35b5eb(0x7a0)]=Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x677)],Window_BattleLog[_0x35b5eb(0x73b)]['performCounter']=function(_0x202d7e){const _0x228945=_0x35b5eb;VisuMZ[_0x228945(0x781)][_0x228945(0x7a0)][_0x228945(0x541)](this,_0x202d7e),this[_0x228945(0xa1a)]();},VisuMZ[_0x35b5eb(0x781)][_0x35b5eb(0x41c)]=Window_BattleLog['prototype'][_0x35b5eb(0x1ab)],Window_BattleLog['prototype']['performReflection']=function(_0x80c71a){const _0x4b6183=_0x35b5eb;VisuMZ[_0x4b6183(0x781)][_0x4b6183(0x41c)][_0x4b6183(0x541)](this,_0x80c71a),this[_0x4b6183(0xa1a)]();},VisuMZ[_0x35b5eb(0x781)]['Window_BattleLog_performSubstitute']=Window_BattleLog['prototype'][_0x35b5eb(0x969)],Window_BattleLog[_0x35b5eb(0x73b)]['performSubstitute']=function(_0x1d98d0,_0x2aa915){const _0x299639=_0x35b5eb;VisuMZ[_0x299639(0x781)][_0x299639(0x51d)]['call'](this,_0x1d98d0,_0x2aa915),this[_0x299639(0xa1a)]();},VisuMZ['BattleCore'][_0x35b5eb(0x330)]=Window_BattleLog[_0x35b5eb(0x73b)]['performCollapse'],Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x620)]=function(_0x48578f){const _0x5049e7=_0x35b5eb;VisuMZ['BattleCore'][_0x5049e7(0x330)][_0x5049e7(0x541)](this,_0x48578f),this[_0x5049e7(0xa1a)]();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x309)]=function(_0x117c8c,_0x22d3e7){const _0x167442=_0x35b5eb;_0x117c8c['performCastAnimation'](_0x22d3e7),this[_0x167442(0xa1a)]();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x857)]=function(_0x43a15b,_0x33cd07){const _0x32ba9a=_0x35b5eb,_0x174713=_0x43a15b['attackAnimationId1']();_0x174713<=0x0?SoundManager[_0x32ba9a(0x867)]():'Vkqvu'===_0x32ba9a(0x2d5)?this[_0x32ba9a(0x489)](_0x33cd07,_0x174713):_0x2b0e28=_0x47247d(_0x56edec['$1']);},Window_BattleLog[_0x35b5eb(0x73b)]['applyImmortal']=function(_0x59ea2f,_0xf72c84,_0x5c387a){const _0x102473=_0x35b5eb,_0x28b4a5=[_0x59ea2f][_0x102473(0x992)](_0xf72c84);for(const _0x49704b of _0x28b4a5){if(!_0x49704b)continue;_0x49704b[_0x102473(0x68c)](_0x5c387a);}this['callNextMethod']();},Window_BattleLog[_0x35b5eb(0x73b)]['waitCount']=function(_0x30b2ad){this['_waitCount']=_0x30b2ad;},Window_BattleLog['prototype'][_0x35b5eb(0x67a)]=function(_0x3a17d1,_0x47c0a1){const _0x2465a1=_0x35b5eb;for(const _0xb851db of _0x3a17d1){if(!_0xb851db)continue;_0xb851db[_0x2465a1(0x67a)](_0x47c0a1);}this[_0x2465a1(0xa1a)]();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x31e)]=function(_0x3b0e2a,_0x1a3404,_0x329cd5,_0x54031e,_0x556670,_0x3646a6){const _0x2d82bb=_0x35b5eb;_0x3b0e2a[_0x2d82bb(0x724)](_0x1a3404,_0x329cd5,_0x54031e,_0x556670,_0x3646a6,-0x1),this[_0x2d82bb(0xa1a)]();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0xe8)]=function(_0x58a71c,_0x238aaa,_0x24a226,_0x1afdb0,_0x582e82,_0x1716f7,_0x467dfd){const _0x18034c=_0x35b5eb,_0x21d8b7=Math[_0x18034c(0x4bc)](..._0x238aaa['map'](_0x39f534=>_0x39f534[_0x18034c(0x691)]()['_baseX']-_0x39f534[_0x18034c(0x691)]()[_0x18034c(0x667)]()/0x2)),_0x1aa8ef=Math[_0x18034c(0x2a3)](..._0x238aaa[_0x18034c(0x3dd)](_0x2648d6=>_0x2648d6[_0x18034c(0x691)]()[_0x18034c(0x74d)]+_0x2648d6[_0x18034c(0x691)]()[_0x18034c(0x667)]()/0x2)),_0x16142e=Math[_0x18034c(0x4bc)](..._0x238aaa['map'](_0x22fe4f=>_0x22fe4f[_0x18034c(0x691)]()[_0x18034c(0x740)]-_0x22fe4f[_0x18034c(0x691)]()['mainSpriteHeight']())),_0x24f02a=Math[_0x18034c(0x2a3)](..._0x238aaa['map'](_0xa65600=>_0xa65600['battler']()[_0x18034c(0x740)])),_0x3ea0d0=_0x238aaa['filter'](_0x2180e6=>_0x2180e6[_0x18034c(0xa6f)]())[_0x18034c(0x1a0)],_0x45aef0=_0x238aaa[_0x18034c(0x416)](_0x38fca7=>_0x38fca7['isEnemy']())[_0x18034c(0x1a0)];let _0x2a2ba5=0x0,_0x451bba=0x0;if(_0x24a226['match'](/front/i))_0x2a2ba5=_0x3ea0d0>=_0x45aef0?_0x21d8b7:_0x1aa8ef;else{if(_0x24a226[_0x18034c(0x111)](/middle/i))_0x2a2ba5=(_0x21d8b7+_0x1aa8ef)/0x2,_0x467dfd=-0x1;else _0x24a226[_0x18034c(0x111)](/back/i)&&(_0x2a2ba5=_0x3ea0d0>=_0x45aef0?_0x1aa8ef:_0x21d8b7);}if(_0x24a226[_0x18034c(0x111)](/head/i))_0x451bba=_0x16142e;else{if(_0x24a226['match'](/center/i))_0x451bba=(_0x16142e+_0x24f02a)/0x2;else _0x24a226['match'](/base/i)&&(_0x18034c(0x651)!==_0x18034c(0x651)?_0x6eb21=_0x4b2314:_0x451bba=_0x24f02a);}_0x58a71c[_0x18034c(0x724)](_0x2a2ba5,_0x451bba,_0x1afdb0,_0x582e82,_0x1716f7,_0x467dfd),this[_0x18034c(0xa1a)]();},Window_BattleLog[_0x35b5eb(0x73b)][_0x35b5eb(0x91a)]=function(_0x1260f0,_0x4a90a3,_0x191bdd){const _0x4f31c2=_0x35b5eb;for(const _0x5d8ef0 of _0x1260f0){if(_0x4f31c2(0x769)===_0x4f31c2(0x769)){if(!_0x5d8ef0)continue;_0x5d8ef0[_0x4f31c2(0x66b)](_0x4a90a3,_0x191bdd);}else return!![];}this[_0x4f31c2(0xa1a)]();};